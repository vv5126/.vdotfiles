"必须的设置：

"关闭文件类型侦测
 filetype off
"根据侦测到的不同类型加载对应的插件
 filetype plugin on
"为特定文件类型载入相关缩进文件
 filetype indent on
" 开启语法高亮功能
 syntax enable
" 允许用指定语法高亮配色方案替换默认方案
 syntax on
" 关闭兼容模式, 不要兼容vi，建议设置，否则会有很多不兼容的问题
 set nocompatible

if has("autocmd")
    augroup vimrcEx
        "清除所有自动命令
        au!
" 实现打开同一文件时，vim能够自动记住上一次的位置
" Restore the last quit position when open file.
        autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\     exe "normal g'\"" |
			\ endif
    augroup END
else
    set autoindent " always set autoindenting on "智能缩进，相应的有cindent，官方说autoindent可以支持各种文件的缩进，但是效果会比只支持C/C++cindent效果会差一点，但笔者并没有看出来
endif " has("autocmd")

" 恢复上次文件打开位置
" set viminfo='10,\"100,:20,%,n~/.viminfo
" au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"""""""""""""""""""""
" Uncomment the following to have Vim jump to the last position when reopening a file
"  if has("autocmd")
"  au BufReadPost * if line("`\"") > 1 && line("`\"") <= line("$") | exe "normal! g`\"" | endif
"  endif
"""""""""""""""""""""

"配色方案
 colorscheme mycolor
"  colorscheme molokai
 set background=dark "背景使用黑色
"terminal下面的背景问题
 let g:solarized_termtrans=1
 let g:solarized_termcolors=256
 let g:solarized_contrast="high"
 let g:solarized_visibility="high"

 set modelines=0

"tab键的设定
"设置编辑时制表符占用空格数
 set tabstop=4
"设置格式化时制表符占用空格数
 set shiftwidth=4
"让 vim 把连续数量的空格视为一个制表符, 使得按退格键时可以一次删掉 4 个空格
 set softtabstop=4
"用空格代替制表符
 set expandtab
"autocmd FileType c,cpp set expandtab
"不要用空格代替制表符
"set noexpandtab
"指定文件类型,这样.mak和Makefile文件将都会使用真实tab
" autocmd FileType Makefile set noexpandtab

"字符设置
 set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5
 set encoding=utf-8
" 显示中文帮助
 set helplang=cn
 set scrolloff=3 " 光标移动到buffer的顶部和底部时保持的行距离
"新建文件编码
 set fenc=utf-8
 set autoindent " 继承前一行的缩进方式，特别适用于多行注释
 set hidden                  " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
"高亮显示当前行/列
 set cursorline
"set cursorcolumn
" 之前的高亮线太难看，重新制定颜色，这里的black和iterm2颜色配置中的black一样
hi CursorLine   cterm=NONE ctermbg=black guibg=black  
hi CursorColumn   cterm=NONE ctermbg=black guibg=black " 
highlight ColorColumn ctermbg=black guibg=black
hi LineNr ctermbg=black
 set ttyfast
"显示光标当前位置
 set ruler         " 显示标尺
 set backspace=indent,eol,start " 这指明在插入模式下在哪里允许 <BS> 删除光标前面的字符。
" set backspace=indent,eol,start   " 退格键分别可删除缩进，上一行结束，insert之前的字
 set laststatus=2            " 启动显示状态行(1),总是显示状态行(2)
"相对行号 要想相对行号起作用要放在显示行号后面
"set relativenumber
"开启行号显示
 set number
"无限undo
"set undofile
"自动换行
"set wrap
"禁止自动换行
 set nowrap
"GUI界面里的字体，默认有抗锯齿
" set guifont=Inconsolata:h12
"自动载入配置文件不需要重启
"autocmd! bufwritepost _vimrc source %
"将-连接符也设置为单词
 set isk+=-

set smartcase     " 如果有大写就区别大小写匹配 
set ignorecase smartcase    " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
"设置大小写敏感和聪明感知(小写全搜，大写完全匹配)
" 搜索时大小写不敏感
 set ignorecase
 set smartcase
"行内替换
"set gdefault
" 高亮显示匹配的括号
 set showmatch
set incsearch               " 输入搜索内容时就显示搜索结果
set hlsearch                " 搜索时高亮显示被找到的文本

"以下设置用来是vim正确显示过长的行
"set textwidth=80 "插入文本的最大宽度
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 文本格式和排版
set formatoptions=tcrqn "控制 Vim 如何对文本进行排版
"set formatoptions=qrnl
set fileformats=unix,dos,mac " 自动识别UNIX格式和MS-DOS格式     参与自动检测的 'fileformat' 的格式
set fileformat=unix     "文件输入输出使用的格式
"以UNIX的换行符格式保存文件，注意是去掉一个^M
" set fileformat=unix
"以dos的换行符格式保存文件, 注意是在行尾变为两个^M
" set fileformat=dos
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"彩色显示第85行
 set colorcolumn=85
"设置256色显示
 set t_Co=256

"行号栏的宽度
 set numberwidth=4
"初始窗口的宽度
"set columns=135
"初始窗口的高度
"set lines=50
"初始窗口的位置
"winpos 620 45

"匹配括号的规则，增加针对html的<>
"set matchpairs=(:),{:},[:],<:>
set whichwrap=b,s,h,l,<,>,[,]  " 行尾可右移到下行，行首左移到上行,b：退格，s：空格，hl：左右，<>：n/v模式下的左右，[]：i/r模式下的左右
"让退格，空格，上下箭头遇到行首行尾时自动移到下一行（包括insert模式）
 set whichwrap=b,s,<,>,[,]
" 允许backspace和光标键跨越行边界
" set whichwrap+=h,l

"插入模式下移动
 inoremap <c-j> <down>
 inoremap <c-k> <up>
 inoremap <c-l> <right>
 inoremap <c-h> <left>

"===================================================
"leader键的功能设置
" key 映射
let mapleader = ','         " 全局leader设置
" let g:mapleader = ","
let maplocalleader = '_'    " 本地leader设置
"esc的映射
 imap jj <esc>
"屏蔽掉讨厌的F1键
 inoremap <F1> <ESC>
 nnoremap <F1> <ESC>
 vnoremap <F1> <ESC>
"修改vim的正则表达
 nnoremap / /\v
 vnoremap / /\v
"使用tab键来代替%进行匹配跳转
 nnoremap <tab> %
 vnoremap <tab> %
"折叠html标签 ,fold tag
 nnoremap <leader>ft vatzf
"使用,v来选择刚刚复制的段落，这样可以用来缩进
 nnoremap <leader>v v`]
"使用,w来垂直分割窗口，这样可以同时查看多个文件,如果想水平分割则<c-w>s
 nnoremap <leader>w <c-w>v<c-w>l
 nnoremap <leader>wc <c-w>c
 nnoremap <leader>ww <c-w>w
"使用<leader>t来控制Tab的切换
"  nnoremap <leader>t gt
"  nnoremap <leader>r gT
"使用<leader>空格来取消搜索高亮
 nnoremap <leader><space> :noh<cr>
" map <silent> <leader><cr> :noh<cr>
"html中的js加注释 取消注释
 nmap <leader>h I//jj
 nmap <leader>ch ^xx
"切换到当前目录
 nmap <leader>q :execute "cd" expand("%:h")<CR>
"搜索替换
 nmap <leader>s :,s///c

"选中状态下 Ctrl+c 复制
 vmap <C-c> "+y

" 设置当文件被改动时自动载入
" set autoread

"取消粘贴缩进
 nmap <leader>p :set paste<CR>
 nmap <leader>pp :set nopaste<CR>

"文件类型切换
 nmap <leader>fj :set ft=javascript<CR>
 nmap <leader>fc :set ft=css<CR>
 nmap <leader>fx :set ft=xml<CR>
 nmap <leader>fm :set ft=mako<CR>

"去除左右两边的滚动条
 set go-=r
 set go-=L

 set selection=exclusive
" set selection=inclusive
 set selectmode=mouse,key
 set mouse=a      " 启动鼠标所有模式，但是右键功能不可用, 可以保证鼠标滚屏在当前屏幕内
" 查找并启用tag
 set tags=tags;

" Space to command mode.
 nnoremap <space> :
 vnoremap <space> :

"===================================================
" 插件的设置

" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

" if filereadable(expand("~/.vimrc.bundles.local"))
if ! isdirectory($HOME."/.vim/bundle/vundle")
    echo "you should setup vundle frist!"
    echo "use \"git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\""
else

" 刷新插件
 nmap <F10> :BundleInstall<cr>
" 更新插件
 nmap <S-F9> :BundleSearch<cr>

" Indent Guides设置
 let g:indent_guides_guide_size=1

 set rtp+=~/.vim/bundle/vundle/
 call vundle#rc()

" let Vundle manage Vundle
" required!
 Bundle 'gmarik/vundle'
"---------------------------------------------------

"支持分支的 undo
 Bundle 'sjl/gundo.vim'
"调用 gundo 树
 nnoremap <Leader>ud :GundoToggle<CR>

"---------------------------------------------------

"允许你在 Vim中按等号、冒号、表格等来对齐文本
 Bundle 'Tabular'

" ex: :TAb /=

"---------------------------------------------------

"和snipmate 冲突
if 1
 Bundle 'Valloric/YouCompleteMe'

"首先要保证有ycm_client_support.so、ycm_core.so、libclang.so 这三个库.
"生成方法:
"1.cd ~/.vim/bundle/YouCompleteMe/
"# 获取 YCM 的依赖包
"git submodule update --init --recursive
"2.mkdir and cd ~/ycm_build
"cmake -G "Unix Makefiles" . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
"make ycm_support_libs


 nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
 nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
 let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
 let g:syntastic_always_populate_loc_list = 1

" YCM 补全菜单配色
" 菜单
highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1
" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0
" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 引入 C++ 标准库tags
set tags+=/data/misc/software/misc./vim/stdcpp.tags
" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>
" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1
endif

"---------------------------------------------------

" jsbeautify的设置
 Bundle '_jsbeautify'
 nnoremap <leader>_ff :call g:Jsbeautify()<CR>

"---------------------------------------------------

"有道翻译，可惜只能英文到中文
 Bundle 'yakiang/YoudaoFanyi.vim'

"---------------------------------------------------

" Fencview的初始设置
 Bundle 'FencView.vim'
 let g:fencview_autodetect=1
" 查看和自动识别文件的编码格式
" Bundle 'mbbill/fencview'
" Bundle 'fencview' "字符编码识别+
" mbbill的编码识别插件
" Bundle 'mbbill/fencview'

"---------------------------------------------------

" NerdTree的设置 并且相对行号显示
" plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
" :ERDtree 打开NERD_tree         :NERDtreeClose    关闭NERD_tree
" o 打开关闭文件或者目录         t 在标签页中打开
" T 在后台标签页中打开           ! 执行此文件
" p 到上层目录                   P 到根目录
" K 到第一个节点                 J 到最后一个节点
" u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
" r 递归刷新当前目录             R 递归刷新当前根目录
 Bundle 'The-NERD-tree'
 nmap <leader>nt :NERDTree<cr>:set rnu<cr>
"nmap  <F3> :NERDTreeToggle<cr>
"imap <F3> <ESC>:NERDTreeToggle<CR>
 let NERDTreeShowBookmarks=1
 let NERDTreeShowFiles=1
 let NERDTreeShowHidden=1
 let NERDTreeIgnore=['\.$','\~$']
 let NERDTreeShowLineNumbers=1
 let NERDTreeWinPos=1
"let g:NERDTreeWinPos="right"
"let g:NERDTreeWinSize=25
"let g:NERDTreeQuitOnOpen=1
" let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
" let NERDTreeChDirMode=0
" let NERDTreeMouseMode=2
" let NERDTreeKeepTreeInNewTab=1
" let g:nerdtree_tabs_open_on_gui_startup=0

"---------------------------------------------------

"对NERD_commenter的设置
" 功能强大的代码注释工具,用来注释或者取消注释,支持很多语言,可以对文本块操作,最常用到的快捷键是\c<space>
" plugin - NERD_commenter.vim   注释代码用的，
" [count],cc 光标以下count行逐行添加注释(7,cc)
" [count],cu 光标以下count行逐行取消注释(7,cu)
" [count],cm 光标以下count行尝试添加块注释(7,cm)
" ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
" 注：count参数可选，无则默认为选中行或当前行
 Bundle 'The-NERD-Commenter'
 let NERDSpaceDelims=1       " 让注释符与语句之间留一个空格
 let NERDCompactSexyComs=1   " 多行注释时样子更好看
 let NERDShutUp=1
" 支持单行和多行的选择，//格式
 map <C-h> ,c<space>

"---------------------------------------------------

" 在.c/.h之间切换,写代码必备
 Bundle 'a.vim'
" A few of quick commands to swtich between source files and header files quickly.
"
" :A switches to the header file corresponding to the current file being
" edited (or vise versa)
" :AS splits and switches
" :AV vertical splits and switches
" :AT new tab and switches
" :AN cycles through matches
" :IH switches to file under cursor
" :IHS splits and switches
" :IHV vertical splits and switches
" :IHT new tab and switches
" :IHN cycles through matches
" <Leader>ih switches to file under cursor
" <Leader>is switches to the alternate file of file under cursor (e.g. on
" <foo.h> switches to foo.cpp)
" <Leader>ihn cycles through matches
"
" E.g. if you are editing foo.c and need to edit foo.h
" simply execute :A and you will be editting foo.h,
" to switch back to foo.c execute :A again.
"
" Can be configured to support a variety of languages. Builtin support for
" C, C++ and ADA95

"---------------------------------------------------
if has("cscope")
if 0
 Bundle 'cscope.vim'
    set cscopetag
    set cscopeverbose 
    set cscopequickfix=c-,d-,e-,g-,i-,s-,t-
    " nmap s :cs find s =expand("")   
    " nmap g :cs find g =expand("")   
    " nmap c :cs find c =expand("")   
    " nmap t :cs find t =expand("")   
    " nmap e :cs find e =expand("")   
    " nmap f :cs find f =expand("")   
    " nmap i :cs find i ^=expand("")$
    " nmap d :cs find d =expand("")   
    " nmap s :scs find s =expand("")  
    " nmap g :scs find g =expand("")  
    " nmap c :scs find c =expand("")  
    " nmap t :scs find t =expand("")  
    " nmap e :scs find e =expand("")  
    " nmap f :scs find f =expand("")  
    " nmap i :scs find i ^=expand("")$
    " nmap d :scs find d =expand("")  
    " nmap s :vert scs find s =expand("")
    " nmap g :vert scs find g =expand("")
    " nmap c :vert scs find c =expand("")
    " nmap t :vert scs find t =expand("")
    " nmap e :vert scs find e =expand("")
    " nmap f :vert scs find f =expand("")  
    " nmap i :vert scs find i ^=expand("")$
    " nmap d :vert scs find d =expand("")
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    set csto=0
    set cst
    set nocsverb
    if filereadable("cscope.out") " add any database in current directory
        cs add cscope.out
    elseif $CSCOPE_DB != "" " else add database pointed to by environment
        cs add $CSCOPE_DB
    endif
    set csverb " 这个必须放在后面,不然windows上找不到cscope.out

 nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR> :cw<CR>
 nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR> :cw<CR>
 nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR> :cw<CR>
 nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR> :cw<CR>
 nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR> :cw<CR>
 nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR> :cw<CR>
 nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR> :cw<CR>
 nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR> :cw<CR>
"nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
"nmap <leader>ss :cs find s <C-R>=expand("<cword>")<cr><cr>
"nmap <leader>sg :cs find g <C-R>=expand("<cword>")<cr><cr>
"nmap <leader>sc :cs find c <C-R>=expand("<cword>")<cr><cr>
"nmap <leader>st :cs find t <C-R>=expand("<cword>")<cr><cr>
"nmap <leader>se :cs find e <C-R>=expand("<cword>")<cr><cr>
"nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<cr><cr>
"nmap <leader>si :cs find i <C-R>=expand("<cfile>")<cr><cr>
"nmap <leader>sd :cs find d <C-R>=expand("<cword>")<cr><cr>
"nmap <F2>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
"nmap <F2>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <F2>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
"nmap <F2>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
"nmap <F2>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
"nmap <F2>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR><CR>
"nmap <F2>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR><CR>
"nmap <F2>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR><CR>
"nmap <C-]> :tjump <C-R>=expand("<cword>")<CR><CR>
""nmap <C-]> :cs find g <C-R>=expand("<cword>")<CR><CR><CR>
"if filereadable("cscope.out")
"    execute "cs add cscope.out"
"endif

"Using 'CTRL-spacebar' then a search type makes the vim window
"split horizontally, with search result displayed in
"the new window.
"nmap <C-Space>s :scs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space>g :scs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space>c :scs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space>t :scs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space>e :scs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-Space>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-Space>d :scs find d <C-R>=expand("<cword>")<CR><CR>

"Hitting CTRL-space *twice* before the search type does a vertical
"split instead of a horizontal one
"nmap <C-Space><C-Space>s:vert scs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space><C-Space>g:vert scs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space><C-Space>c:vert scs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space><C-Space>t:vert scs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space><C-Space>e:vert scs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-Space><C-Space>i:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-Space><C-Space>d:vert scs find d <C-R>=expand("<cword>")<CR><CR>

" cscope的vim插件,提供快捷键操纵cscope,好东东,如果你在用cscope的话
" Bundle 'cscope_maps.vim'
" Bundle 'cscope_macros.vim'
endif
endif

"---------------------------------------------------

"omnicppcomplete会打开一个预览窗口来提示变量定义，如果不想要看到详细的信息的话，在vimrc中这样配置
 Bundle 'OmniCppComplete'
 set completeopt=longest,menu
"搜索字符串，或以递增方式搜索字符串
 let Grep_Default_Filelist = '*.[chS]'
 let Grep_Default_Filelist = '*.c *.cpp *.asm'
 let Grep_Skip_Files = '*tags* *cscope* *.o* *.lib *.a* *.r* *.d*'
 nnoremap <silent> <C-f> :Rgrep<CR><CR><CR><CR>
 nnoremap <silent> <C-g> :RgrepAdd<CR><CR><CR><CR>
 set nocp
 set completeopt=menu "去掉提示窗口"
 filetype plugin on
 let OmniCpp_DefaultNamespaces = ["std"] "下面的设置用于当用户预先声明namespace时也能自动补全代码（如使用using std::string）
 let OmniCpp_NamespaceSearch = 1
 let OmniCpp_GlobalScopeSearch = 1
 let OmniCpp_ShowAccess = 1
 let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
 let OmniCpp_MayCompleteDot = 1 " 输入 . 后自动补全
 let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
 let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
 let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
 let OmniCpp_SelectFirstItem=2

"---------------------------------------------------

 Bundle 'tComment'

"---------------------------------------------------

" 在输入()等需要配对的符号时，自动帮你补全剩余半个
"Bundle 'AutoClose'

"---------------------------------------------------

 Bundle 'command-t'

"---------------------------------------------------

"  Bundle 'Lokaltog/vim-powerline'
" " mkfontscale
" " mkfontdir
" " fc-cache -vf
" " rm ~/.vim/bundle/vim-powerline/*.cache
" " https://github.com/eugeii/consolas-powerline-vim.git
" " https://github.com/powerline/fonts.git
"  set guifont=PowerlineSymbols\ for\ Powerline
"  let g:Powerline_symbols = 'fancy'

"---------------------------------------------------

"plugin - taglist.vim  查看函数列表，需要ctags程序
"  Bundle 'taglist.vim'
"  nmap  <F2> :TlistToggle<cr>
"nnoremap <silent><F4> :TlistToggle<CR>
 let Tlist_Auto_Open = 0                " 默认打开Taglist
 let Tlist_Auto_Update = 1
 let Tlist_Compact_Format = 1 " 压缩方式
 let Tlist_Display_Prototype = 0
 let Tlist_Enable_Fold_Column = 0    " 不要显示折叠树 (鼠标可以点开)
 let Tlist_Exit_OnlyWindow = 1          " 如果taglist窗口是最后一个窗口，则退出vim
"let Tlist_Exist_OnlyWindow = 1 " 如果只有一个buffer，kill窗口也kill掉buffer
 let Tlist_File_Fold_Auto_Close=1       " 自动折叠当前非编辑文件的方法列表
"let Tlist_File_Fold_Auto_Close = 0 " 不要关闭其他文件的tags
 let Tlist_Hightlight_Tag_On_BufEnter = 1
 let Tlist_Inc_Winwidth = 0 "标签列表窗口显示或隐藏不影响整个gvim窗口大小
 let Tlist_Process_File_Always = 1 "不是一直实时更新tags，因为没有必要
 let Tlist_Show_One_File = 1 " 设置tablist插件只显示当前编辑文件的tag内容，而非当前所有打开文件的tag内容
"let Tlist_Use_Right_Window = 1         " 在右侧窗口中显示taglist窗口
 let Tlist_WinWidth = 25 " taglist窗口宽度
 let g:Tlist_Auto_Highlight_Tag=1
 nmap <silent> <leader>tl :Tlist<cr>
let Tlist_Sort_Type            = "name"    " 按照名称排序
let Tlist_Compart_Format       = 1    " 压缩方式
let Tlist_GainFocus_On_ToggleOpen = 0
"let Tlist_Close_On_Select = 1

"进行Tlist的设置
"TlistUpdate可以更新tags
map <F8> :silent! Tlist<CR>
let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行
let Tlist_Ctags_Cmd        = '/usr/bin/ctags'
let Tlist_Show_One_File=1 "让taglist可以同时展示多个文件的函数列表，如果想只有1个，设置为1
"是否一直处理tags.1:处理;0:不处理
let Tlist_Inc_Winwidth=0

"---------------------------------------------------

 Bundle 'snipMate'
let g:snips_author="ingenic"
let g:snips_email="ingenic@ingenic.com"
let g:snips_copyright="SicMicro, Inc"

"---------------------------------------------------

" 一些插件依赖的库函数
"   genutils(2.5)底层的lookupfile的功能支持+
 Bundle 'genutils'

"---------------------------------------------------

" lookupfile.vim 使用部分关键字查找文件名
 Bundle 'lookupfile'
 nmap  <F5> <Plug>LookupFile<cr>
nmap <silent> <leader>ff :LookupFile<cr>
let g:LookupFile_MinPatLength           = 2 "最少输入2个字符才开始查找
let g:LookupFile_PreserveLastPattern    = 0 "不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1 "保存查找历史
let g:LookupFile_AlwaysAcceptFirst      = 1 "回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles          = 0 "不允许创建不存在的文件
let g:LookupFile_SortMethod             = "" "关闭对搜索结果的字母排序
"if filereadable("/home/ganquan/linux-2.6.34-rc4/filenametags")
"设置tag文件的名字
"let g:LookupFile_TagExpr ='"/home/ganquan/linux-2.6.34-rc4/filenametags"'
"endif

"---------------------------------------------------
"智能补全
 Bundle 'supertab'
" Bundle 'mbbill/code_complete'
"---------------------------------------------------
" 给vim增加IDE的功能,提供目录浏览和buffer浏览功能,因为显示器太小,感觉太占空间,所以单独使用bufexplorer,而且现在vim7的netrw功能也够强大,所以感觉比较鸡肋,而且貌似很久没有更新,所以基本不用
Bundle 'winmanager'
" let g:winManagerWindowLayout='NERDTree|TagList'
nmap wm :if IsWinManagerVisible() <BAR> WMToggle<CR> <BAR> else <BAR> WMToggle<CR>:q<CR> endif <CR><CR>
let g:winManagerWindowLayout='NERDTree|BufExplorer'
"let g:winManagerWindowLayout = 'FileExplorer|TagList'
"let g:winManagerWindowLayout='FileExplorer|MarksBrowser'
"let g:winManagerWindowLayout = 'FileExplorer'
let g:winManagerWidth = 25
let g:defaultExplorer = 0
nmap wm :WMToggle<cr>
nmap <C-W><C-F> :FirstExplorerWindow<cr>
nmap <C-W><C-B> :BottomExplorerWindow<cr>
autocmd BufWinEnter \[Buf\ List\] setl nonumber
"---------------------------------------------------
 Bundle 'biogoo.vim'
 Bundle 'gtrans.vim'
"---------------------------------------------------

if 0
" plugin - NeoComplCache.vim    自动补全插件
 Bundle 'neocomplcache'
let g:AutoComplPop_NotEnableAtStartup = 1
let g:NeoComplCache_EnableAtStartup = 1
let g:NeoComplCache_SmartCase = 1
let g:NeoComplCache_TagsAutoUpdate = 1
let g:NeoComplCache_EnableInfo = 1
let g:NeoComplCache_EnableCamelCaseCompletion = 1
let g:NeoComplCache_MinSyntaxLength = 3
let g:NeoComplCache_EnableSkipCompletion = 1
let g:NeoComplCache_SkipInputTime = '0.5'
let g:NeoComplCache_SnippetsDir = $VIMFILES.'/snippets'
" <TAB> completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" snippets expand key
imap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
smap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
endif

"---------------------------------------------------

" 列出当前打开的buffer,可以很容易的切换到和删除选定的buffer,必备插件之一
" \be 全屏方式查看全部打开的文件列表
" \bv 左右方式查看   \bs 上下方式查看
Bundle 'jlanzarotta/bufexplorer'
" Bundle 'bufexplorer.zip'


"---------------------------------------------------
"列出最近打开过的文件
" Bundle 'mhinz/vim-startify'
"---------------------------------------------------

Bundle 'majutsushi/tagbar'
" let tagbar_ctags_bin=ctags
" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：tag list 
" nnoremap <Leader>tl :TagbarToggle<CR> 
nmap tb :Tagbar<cr>
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码元素生成标签
let g:tagbar_type_cpp = {
  \ 'kinds' : [
    \ 'd:macros:1',
    \ 'g:enums',
    \ 't:typedefs:0:0',
    \ 'e:enumerators:0:0',
    \ 'n:namespaces',
    \ 'c:classes',
    \ 's:structs',
    \ 'u:unions',
    \ 'f:functions',
    \ 'm:members:0:0',
    \ 'v:global:0:0',
    \ 'x:external:0:0',
    \ 'l:local:0:0'
   \ ],
   \ 'sro'      : '::',
   \ 'kind2scope' : {
     \ 'g' : 'enum',
     \ 'n' : 'namespace',
     \ 'c' : 'class',
     \ 's' : 'struct',
     \ 'u' : 'union'
   \ },
   \ 'scope2kind' : {
     \ 'enum'     : 'g',
     \ 'namespace' : 'n',
     \ 'class'   : 'c',
     \ 'struct' : 's',
     \ 'union'   : 'u'
   \ }
\ }

"---------------------------------------------------

" 光标多行编辑 <C-n> <C-x> <C-p> 推荐：****
 Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

"---------------------------------------------------

" color theme浏览插件,列出所有的vim color theme到一个列表中,选中后按回车即可应用相应的color theme,试验color theme时再也不用一次次输入:colo theme_name了,从上百个color theme中选择自己喜欢的theme时有用
Bundle 'sjas/csExplorer'

"---------------------------------------------------

" 一个对齐的插件,用来排版,面对一堆乱七八糟的代码时,用来对齐代码,功能强大,不过用到的机会不多
Bundle 'Align'
" Bundle 'junegunn/vim-easy-align'

"---------------------------------------------------

Bundle 'checksyntax'

"---------------------------------------------------

" 在vim里画图
Bundle 'DrawIt'

"---------------------------------------------------

"显示git diff的插件
 Bundle 'airblade/vim-gitgutter'
" Bundle 'mhinz/vim-signify'

"---------------------------------------------------

" 日历插件,有了它,用vim来写日记很方便
 Bundle 'itchyny/calendar.vim'
let g:calendar_frame = 'default'

"---------------------------------------------------

" 状态栏效果 推荐：***
" Bundle 'bling/vim-airline'
" let g:airline_theme="dark"
" let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" " let g:airline_powerline_fonts = 2
" if !exists('g:airline_symbols')
"       let g:airline_symbols = {}
"   endif
"   let g:airline_symbols.space = "\ua0"

"---------------------------------------------------

"可视化的方式能将相同缩进的代码关联起来
"  Bundle 'nathanaelkane/vim-indent-guides'
 " 随 vim 自启动
 let g:indent_guides_enable_on_vim_startup=1
 " 从第二层开始可视化显示缩进
 let g:indent_guides_start_level=2
 " 色块宽度
 let g:indent_guides_guide_size=1
 " 快捷键 i 开/关缩进可视化
"  :nmap <silent> <Leader>i <Plug>IndentGuidesToggle

"---------------------------------------------------
"让书签可视化的插件
 Bundle 'kshenoy/vim-signature'
"---------------------------------------------------

"Fugitive: Git 集成，强烈推荐！Plugin 'tpope/vim-fugitive'
 Bundle 'fugitive.vim'
"在两端加上、修改、删除匹配的符号如（）
"Bundle 'vim-surround'
 " vim帮助中文版
"Bundle 'vimcdoc'
"Bundle 'altercation/vim-colors-solarized'   " Solarized: 非常流行的配色。
"Bundle 'EnhancedCommentify' " 多文本类型的快捷comment/uncomment, 据说NERD Commenter 更好一些
"Bundle 'surround'           " 用来加括号，引号，前后缀等等，写XML很有用（特别是配合repeat）
"Bundle 'manpageview'        " 在Vim中查看Manpage，有语法高亮
"Bundle 'VCScommand'         " 支持多种版本管理器
"Bundle 'cctree'             " 可以查看function的call tree
" vim自带的文件浏览器
"Bundle 'netrwPlugin.vim'

"---------------------------------------------------

" Bundle 'SirVer/ultisnips'
" Bundle 'guns/ultisnips'
" Bundle 'UltiSnips'
" " Trigger configuration. Do not use <tab>
" "if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" Bundle 'UltiSnips'

"---------------------------------------------------

" 同时高亮多个单词
Bundle 'Mark--Karkat'
" plugin - mark.vim 给各种tags标记不同的颜色，便于观看调式的插件。
" \m  mark or unmark the word under (or before) the cursor
" \r  manually input a regular expression. 用于搜索.
" \n  clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .
" \*  当前MarkWord的下一个     \#  当前MarkWord的上一个
" \/  所有MarkWords的下一个    \?  所有MarkWords的上一个

"---------------------------------------------------

"显示缩进对齐线
Bundle 'Yggdroot/indentLine'
map <leader>il :IndentLinesToggle<CR>

"---------------------------------------------------

" 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project
" ack 后端， 需要ack版本不低于2.0
" 可以键入 p 键，将在右侧子窗口中给出该匹配项的完整代码，而不再仅有前后几行。
" 不想跳至任何匹配项，可以直接键入  q 退出 ctrlsf.vim；如果有钟意的匹配项，
" 光标定位该项后回车，立即跳至新 buffer 中对应位置。

if has('ack')
Bundle 'dyng/ctrlsf.vim'
Bundle 'ack.vim'
endif

nnoremap <Leader>sp :CtrlSF<CR>

"---------------------------------------------------

if 0 " EasyMotion设置
Bundle 'easymotion/vim-easymotion'
" nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

let g:EasyMotion_do_mapping = 0 " Disable default mappings
" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key
" binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
" map <Leader>j <Plug>(easymotion-j)
" map <Leader>k <Plug>(easymotion-k)
endif

"---------------------------------------------------

" 任务列表的插件 —— TaskList.vim，方便管理项目中的 TODO、FIXME 等标签.
" Bundle 'TaskList.vim'
" nnoremap <leader>v <Plug>TaskList
"---------------------------------------------------
Bundle 'dkprice/vim-easygrep'
let g:EasyGrepMode = 2     " All:0, Open Buffers:1, TrackExt:2, 
let g:EasyGrepCommand = 0  " Use vimgrep:0, grepprg:1
let g:EasyGrepRecursive  = 1 " Recursive searching
let g:EasyGrepIgnoreCase = 1 " not ignorecase:0
let g:EasyGrepFilesToExclude = "*.bak, *~, cscope.*, *.a, *.o, *.pyc, *.bak"
"---------------------------------------------------

" Syntax highlighting for GLib, Gtk+, Xlib, Gimp, Gstreamer, and more. 
Bundle 'gtk-vim-syntax'
"---------------------------------------------------
"repeat 支持使用.来重复执行一些插件的命令（如speeddating, surround等)
" Bundle 'repeat.vim'

"---------------------------------------------------
" 工程内查找与替换+
Bundle 'grep.vim'
"---------------------------------------------------
" 切换缓冲区
" minibufexpl插件的一般设置
let g:miniBufExplMapWindowNavVim    = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs  = 1
let g:miniBufExplModSelTarget       = 1
"let g:miniBufExplorerMoreThanOne   = 1 "自动打开

Bundle 'fholgado/minibufexpl.vim'
" 显示/隐藏 MiniBufExplorer 窗口
map <Leader>bl :MBEToggle<cr>
" buffer 切换快捷键
map <C-Tab> :MBEbn<cr>
map <C-S-Tab> :MBEbp<cr>
"---------------------------------------------------

" Bundle 'l9'   "FuzzyFinder底层依耐+
" FuzzyFinder缓冲器/文件/命令/标签/等浏览器的模糊匹配 +
" electbuf.vim相比，它少了对多个buf的批量选择和处理
" mru.vim -> fuzzyfinder.vim:FuzzyFinderMruFile
" favex.vim -> fuzzyfinder.vim:FuzzyFinderFavFile
" selectbuf.vim -> fuzzyfinder.vim:FuzzyFinderBuffer
" NERDTree.vim -> fuzzyfinder.vim:FuzzyFinderFile

" 提供快速的buffer选择
" Bundle 'SelectBuf'

" Address, 给vim增加MRU功能,也就是保留最近打开的文件记录,:MRU打开,q退出,很方便,有过一个支持菜单的类似的插件 不过对于我这样的不用菜单的用户,还是这个命令行的好用一点,因为经常使用,所以我映射到了F2
" Bundle 'mru.vim'
" FavEx : Favorite file and directory explorer ,可以添加目录和文件到收藏夹，可以把经常编辑的文件添加到收藏夹来，在文件打开以后，\ff新增文件到收藏夹，\fd新增目录到收藏夹
" favex.vim

""""""""""""""""""""""""""""""
" => Fuzzy finder
""""""""""""""""""""""""""""""
try
    call fuf#defineLaunchCommand('FufCWD', 'file', 'fnamemodify(getcwd(), ''%:p:h'')')
    map <leader>t :FufCWD **/<CR>
catch
endtry
map <F7> :FufTag<cr>
map <C-F7> :FufTaggedFile<cr>
"---------------------------------------------------

"加入html标签配对
"runtime macros/matchit.vim
" 扩展了vim的%功能,让%可以匹配的,不再仅仅是括号,支持多种语言.必备插件之一
" matchit.vim
Bundle 'matchit.zip'
" plugin - matchit.vim   对%命令进行扩展使得能在嵌套标签和语句之间跳转
" % 正向匹配      g% 反向匹配
" [% 定位块首     ]% 定位块尾

"---------------------------------------------------

" better color
" Bundle 'tomasr/molokai'
" let g:molokai_original=1

"---------------------------------------------------

" Switch very quickly between your most recently used buffers
if has("ruby")
Bundle 'LustyJuggler'
endif
"---------------------------------------------------

" 将代码行最后无效的空格标红
Bundle 'ShowTrailingWhitespace'

"---------------------------------------------------

" 使用菜单和热键来编写和执行BASH脚本
Bundle 'bash-support.vim'

"---------------------------------------------------

" 结构化数据变成漂亮的表
" Bundle 'Stormherz/tablify'

"---------------------------------------------------

if 0
" 添加doxygen注释
" DoxygenToolkit.vim
" plugin - DoxygenToolkit.vim  由注释生成文档，并且能够快速生成函数标准注释
let g:DoxygenToolkit_authorName="Asins - asinsimple AT gmail DOT com"
let g:DoxygenToolkit_briefTag_funcName="yes"
map <leader>da :DoxAuthor<CR>
map <leader>df :Dox<CR>
map <leader>db :DoxBlock<CR>
map <leader>dc a /*  */<LEFT><LEFT><LEFT>

map fg : Dox<cr>
let g:DoxygenToolkit_authorName="Anders"
let g:DoxygenToolkit_licenseTag="My own license\<enter>"
let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
let g:DoxygenToolkit_briefTag_pre = "@brief\t"
let g:DoxygenToolkit_paramTag_pre = "@param\t"
let g:DoxygenToolkit_returnTag = "@return\t"
let g:DoxygenToolkit_briefTag_funcName = "no"
let g:DoxygenToolkit_maxFunctionProtoLines = 30
endif

"---------------------------------------------------

Bundle 'ctrlpvim/ctrlp.vim'
Bundle 'vimcn/ctrlp.cnx'

"---------------------------------------------------

" 保存当前会话
" Bundle 'xolox/vim-misc'
" Bundle 'xolox/vim-session'

"---------------------------------------------------

" 利用Google翻译在vim进行翻译的插件
" Bundle 'jiazhoulvke/googletranslate'

"---------------------------------------------------

"自动排版，可以少打很多空格
" Bundle 'ywgx/auto.vim'

"---------------------------------------------------

" 检测当光标改变时，执行函数。
" Bundle 'hookcursormoved'

"---------------------------------------------------

"函数提示
" Bundle 'mbbill/echofunc'

"---------------------------------------------------

" Commentary: 快速注释。
" Bundle 'tpope/vim-commentary'

"---------------------------------------------------

" 类似emacs的king ring,给vim的yank也增加缓冲,vim本身只缓冲删除的字符串,不缓冲yank的内容,这个插件可以同时粘贴多个需要的单词等
" Bundle 'YankRing.vim'

"---------------------------------------------------

" 给选中的文字加上引号,支持( { [ < ' " `,选中后,\加上你想要添加的符号,比如选中abc后,\(,得到(abc)
" Bundle 'jiangmiao/auto-pairs'
" Bundle 'Raimondi/delimitMate'

" 快速给词加环绕符号,例如引号
" Bundle 'tpope/vim-surround'
"
"---------------------------------------------------

" c/c++ support,让你用编写c/c++程序时如虎添翼,有很多贴心的功能,每个功能都有快捷键,不过一部分和NERD_comments冲突 如果经常编写一些单文件的c程序,但是不想写makefile,用这个,他帮你完成,F9编译并链接,ctrl-F9运行
Bundle 'c.vim'

"---------------------------------------------------

" Unite可以在一个项目中快速浏览文件。但是它不仅限于文件，其他任何可以列出的东西都可以很好的被显示和搜索。
Bundle 'Shougo/unite-help'
Bundle 'Shougo/unite-outline'
Bundle 'Shougo/unite.vim'
" Bundle 'osyo-manga/unite-quickfix'
" Bundle 'tsukkee/unite-tag'

"---------------------------------------------------

" 可以在vim和tmux的任何组合间无缝切换
" Bundle 'christoomey/vim-tmux-navigator'

"---------------------------------------------------

" 记录最近打开的文件
Bundle 'mru.vim'
" let MRU_File='/tmp/mru_files' "设置默认保存最近打开文件列表的文件，默认$HOME/.vim_mru_files；
let MRU_Max_Entries = 1000 "设置默认记录的打开文件数量，默认100；
let MRU_Exclude_Files = '^/tmp/.*|^/var/tmp/.*' "设置默认不包含哪些文件，默认空；
let MRU_Include_Files = '.c$|.h$' "设置默认只包含哪些文件，默认空；
let MRU_Window_Height = 15 "设置MRU窗口的高度，默认8；
let MRU_Use_Current_Window = 1 "设置默认在本窗口打开最近文件列表，而不是新的窗口；
let MRU_Auto_Close = 0 "设置默认不关闭MRU窗口，默认关闭；
let MRU_Max_Menu_Entries = 20 "设置MRU窗口默认显示多少条记录，默认10；
let MRU_Max_Submenu_Entries = 15 "设置MRU窗口默认子菜单显示多少条记录，默认10。如果有太多的记录显示在MRU窗口时，记录会被分割成子菜单，该配置设置子菜单里显示多少条记录；
nmap <leader>ff :MRU<CR>

"---------------------------------------------------

" Bundle 'ZoomWin'

"---------------------------------------------------

" 语法检查 推荐：****
Bundle 'scrooloose/syntastic'

"---------------------------------------------------

" 星级越多越推荐, 5星为必选，4星强烈推荐，3星比较推荐
" 文件模糊匹配查找 推荐：****
" Bundle "kien/ctrlp.vim"
" 函数模糊匹配查找(,fu) 推荐：****
" Bundle 'tacahiroy/ctrlp-funky'
" 文件索引树 推荐：*****
" Bundle "scrooloose/nerdtree"
" 自动注释 推荐：*****
" Bundle 'scrooloose/nerdcommenter'
" 配色主题 推荐：****
" Bundle "altercation/vim-colors-solarized"
" 缩进引导线 推荐：****
" Bundle "nathanaelkane/vim-indent-guides"
" 文本同级文字选取，和文本处理 推荐：****
" Bundle 'kana/vim-textobj-indent'
" Bundle 'kana/vim-textobj-user'
" 保存vim编辑信息，比如最后的位置 推荐：****
" Bundle "vim-scripts/restore_view.vim"

"---------------------------------------------------


"---------------------------------------------------

" Very small, clean but quick and powerful buffer manager. c.
" qbuf

" 命令行模式的补全+
" Bundle 'cmdline-completion'

"底层的lookupfile的功能支持+
" Bundle 'genutils'

Bundle 'tpope/vim-git'
" Bundle 'rrhelper.vim'
" Bundle 'tarPlugin.vim'
" Bundle 'winfileexplorer.vim'
" Bundle 'wintagexplorer.vim'
" Bundle 'gtags.vim'
" Bundle 'jiazhoulvke/myproject'
" Bundle 'chrisbra/csv.vim'
" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" Bundle 'tpope/vim-rails.git'
" Bundle 'python-imports.vim'
" Bundle 'CaptureClipboard'
" Bundle 'ctrlp-modified.vim'
" Bundle 'last_edit_marker.vim'
" Bundle 'synmark.vim'
" Bundle 'SQLComplete.vim'
" Bundle 'Vim-Script-Updater'
" Bundle 'tacahiroy/ctrlp-funky'

"---------------------------------------------------

"外部库,借用Bundle,下载完成即可注释.
" Bundle 'robbyrussell/oh-my-zsh.git'
" Bundle 'gpakosz/.tmux.git'
" Bundle 'erikw/tmux-powerline.git'

"---------------------------------------------------
"unused
"添加标记,可以来回跳,但不太好用.
" Bundle 'ShowMarks'
" 快速打开关闭quickfix window
" Bundle '907th/vim-qfix'
" 可以对选中的文本块执行ex操作,尤其是visual block模式下,vim自己是不支持的.选中后,:B 加上ex命令
" Bundle 'navicore/vis.vim'
" 某些插件会用到的库
" Bundle 'tlib'
"让Vim变成所见即所得的MarkDown文件编辑器，可以在编辑时预览最终效果。
" Bundle 'jiazhoulvke/MarkdownView'
" 漂亮的括号 感觉意义不大
" Bundle 'kien/rainbow_parentheses.vim'
" 语法高亮 似乎不好用
" Bundle 'tpope/vim-markdown'
" Bundle 'plasticboy/vim-markdown'
" let g:vim_markdown_frontmatter=1
" vim的wiki
" viki.vim
"vim中打开终端的功能+
" Bundle 'pazzavita/ConqueTerm'
" 在vim在模拟Terminal
" Bundle 'rosenfeld/conque-term'
" Bundle 'Shougo/vimshell.vim'
" 将语法高亮转成 BBS 上的彩色
" toansi.vim
" 让大文件打开快一点
" LargeFile.vim
" 给vim增加url的识别功能,但是功能远不只是支持url,还有更多,详情见utl的帮.
" utl.vim
" 自制的工程管理插件
" project.vim
" 在vim里查看man
" manpageview.vim
" 神级插件，ZenCoding(原名)可以让你以一种神奇而无比爽快的感觉写HTML、CSS
"  Bundle 'ZenCoding.vim'
" coffee-scrpit support
" Bundle 'kchmck/vim-coffee-script'
"自动生成HTML/CSS代码背景,编辑html.
" Bundle 'mattn/emmet-vim'
" 单词完成，没用它
" word_complete.vim
" great for latex
" latex-suite
" 同时选择多个区域
" Bundle 'voithos/vim-multiselect'
" array操作库函数，multiselect依赖它
" Bundle 'multvals.vim'
" 扩展了vim的abbr缩写功能,支持占位符,支持变量替换.
" snippetEmu.vim
" 可以对数字, 日期, 星期, 字母进行序列填充, 方式有升序和降序, 同时可以指定step间隔.
" 给vim增加生成递增或者递减数列的功能,支持十进制,十六进制,日期,星期等,功能强大灵活
" Bundle 'VisIncr'
" 给vim整合了cvs/subversion功能,不用离开vim环境也能执行常用的cvs/subversion操作.
" vcscommand.vim
" 一些插件用到的一些库函数
" cecutil.vim
" 画图
" Bundle 'sketch.vim'
" netrw清理工具，经常升级netrw的话，用来删除老版本
" netrwclean.vim
" Bundle 'netrw.vba.gz'
" 功能强大的缩写扩展，vim版的TextMate
" snippetsEmu.vim
" runs make and shows the test run status with a red or green bar.
" Bundle 'reinh/vim-makegreen'
" C++相关
" Bundle 'stl.vim' "stl语法高亮+
" Bundle 'stlrefvim' "stl帮助 +
" Bundle 'man.vim'
"LUA用的
" Bundle 'xolox/vim-lua-ftplugin'




"没找到
" Bundle 'getscriptPlugin.vim'
" Bundle 'gzip.vim'



"---------------------------------------------------
"python 插件
"if v:version < 704
"    Bundle 'Pydiction'
"    Bundle 'Python-mode-klen'
"endif
" best for python
" python_calltips
"   pydiction       补全提示+
" let g:pydiction_location = '.vim/pydiction-1.2/complete-dict'
"   pythoncomplete  vim自带的python补全提示
"   VimPdb          调试Python程序+
" Bundle 'pyflakes' "Python代码检查+
" Bundle 'pytest'
" Bundle 'pep8'
" Bundle 'pyclewn'
"Bundle 'Python-mode-klen'
"djang
" Bundle 'django_templates.vim'
" Bundle 'Django-Projects'
" Bundle 'djangojump'
" Bundle 'yssource/python.vim'
" Bundle 'python_match.vim'
" Bundle 'pythoncomplete'
" Bundle 'hdima/python-syntax'
" Bundle 'hynek/vim-python-pep8-indent'
"---------------------------------------------------
"java 插件
" Bundle 'Javascript-OmniCompletion-with-YUI-and-j'
" Bundle 'JavaScript-Indent'
" Bundle 'Better-Javascript-Indentation'
" Bundle 'jslint.vim'
" Bundle 'pangloss/vim-javascript'
"---------------------------------------------------
" js 推荐：****
" Bundle 'elzr/vim-json'
" Bundle 'groenewege/vim-less'
" Bundle 'pangloss/vim-javascript'
" Bundle 'briancollins/vim-jst'
" Bundle 'kchmck/vim-coffee-script'
"---------------------------------------------------
" html 推荐：****
" Bundle 'amirh/HTML-AutoCloseTag'
" Bundle 'hail2u/vim-css3-syntax'
" Bundle 'gorodinskiy/vim-coloresque'
" Bundle 'tpope/vim-haml'
" Bundle 'mattn/emmet-vim'
"---------------------------------------------------

" Bundle 'ccglue'
" Bundle 'jQuery'
" Bundle 'JSON.vim'
" Bundle 'shawncplus/phpcomplete.vim'
" Bundle 'jsfaint/gen_tags.vim'
" Bundle 'PasteBin.vim'
" Bundle 'tohtml.vim'
" Bundle 'matchparen.vim'
" Bundle 'xml.vim'
" Bundle 'vimwiki.vim'
" Bundle 'zipPlugin.vim'
" Bundle 'vimballPlugin.vim'
" Bundle 'cuteErrorMarker.vim'
" Bundle 'kevinw/pyflakes-vim'
" Bundle 'Shougo/vimproc.vim', { 'build' : { 'unix' : 'make -f make_unix.mak', }, }
"---------------------------------------------------


endif
"===================================================

" wgao add
nmap  <F4> :!mk<cr>
nmap  <S-F4> :!mktag &<cr>
nmap <leader>cb :g/^\s*$/d<cr>

"定义快捷键的前缀，即<Leader>
 let mapleader=";"

" No sound on errors
set noerrorbells            " 关闭错误信息响铃
set novisualbell            " 关闭使用可视响铃代替呼叫
set t_vb=                   " 置空错误铃声的终端代码
set tm=500

" vim 自身命令行模式智能补全
 set wildmenu

"1.任意方式对齐
"2.自动排版
"3.注释代码
"4.添加自定义注释
"5.

" wgao add OK

"支持代码折叠
"set foldlevel=3
"set foldenable      " 允许折叠
"setlocal foldlevel=1        " 设置折叠层数为
"set foldclose=all           " 设置为自动关闭折叠
set foldmethod=syntax " 用语法高亮来定义折叠
"set foldmethod=manual   " 手动折叠
"set foldmethod=marker
"set foldmethod=indent
" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable
set foldlevel=100 " 启动vim时不要自动折叠代码
set foldcolumn=1 " 设置折叠区域的宽度
": exec 'cd ~/' . fnameescape('/.vim')
" 用<F3>键来开关折叠
nmap <F3> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

set   wildignore=*.bak,*.o,*.e,*~
set wildignore+=*.o,*.obj,.git,*.pyc

" Fast saving
nmap <leader>w :w!<cr>
nmap <leader>qq :qa!<cr>

" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<cr>

" When vimrc is edited, reload it
autocmd! bufwritepost .vimrc source ~/.vimrc

"代码补全
set completeopt=preview,menu
set completeopt=longest,menu
" set   completeopt=longest,menuone
"set nobackup                " 覆盖文件时不备份
set backupcopy=yes          " 设置备份时的行为为覆盖
" set autochdir               " 自动切换当前目录为当前文件所在的目录
" let g:autochdir = 1
"新建标签
map <M-F2> :tabnew<CR>
"列出当前目录文件
map <M-F3> :tabnew .<CR>


set fillchars=vert:\ ,stl:\ " 在被分割的窗口间显示空白，便于阅读,stlnc:\(加了这个wm分割兰有\\\\\\\\\\\\\)
"To hex modle
let s:hexModle = "N"
function! ToHexModle()
    if s:hexModle == "Y"
        %!xxd -r
        let s:hexModle = "N"
    else
        %!xxd
        let s:hexModle = "Y"
    endif
endfunction
"map <leader>h :call ToHexModle()<cr>

" 不要生成swap文件，当buffer被丢弃的时候隐藏它
set nobackup      " 不备份
set nowb
set noswapfile    " 关闭交换文件
set bufhidden=hide

set history=300 " history文件中需要记录的行数

"窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动
"光标到上方窗口,需要<c-w><c-w>k,非常麻烦,现在重映射为<c-k>,切换的
"时候会变得非常方便.
" Switching between buffers.
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
inoremap <C-h> <Esc><C-W>h
inoremap <C-j> <Esc><C-W>j
inoremap <C-k> <Esc><C-W>k
inoremap <C-l> <Esc><C-W>l

" 带有如下符号的单词不要被换行分割
"set iskeyword+=_,$,@,%,#,-

" 映射全选+复制 ctrl+a
" map <C-A> ggVGY
" map! <C-A> <Esc>ggVGY
"
" 命令行（在状态行下）的高度，默认为1
set cmdheight=1

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

"共享剪贴板
set clipboard+=unnamed
map <F12> gg=G
" 在行和段开始处使用制表符
set smarttab


" 设置 gvim 显示字体
set guifont=Courier_New:h10:cANSI   " 设置字体
" set guifont=YaHei\ Consolas\ Hybrid\ 11.5

" 移除高亮

" 替换函数。参数说明：
" confirm：是否替换前逐一确认
" wholeword：是否整词匹配
" replace：被替换字符串
function! Replace(confirm, wholeword, replace)

    wa
    let flag = ''
    if a:confirm
        let flag .= 'gec'
    else
        let flag .= 'ge'
    endif
    let search = ''
    if a:wholeword
        let search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
    else
        let search .= expand('<cword>')
    endif
    let replace = escape(a:replace, '/\&~')
    execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'
endfunction

" 不确认、非整词
nnoremap <Leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 不确认、整词
nnoremap <Leader>rw :call Replace(0, 1, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、非整词
nnoremap <Leader>rc :call Replace(1, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、整词
nnoremap <Leader>rcw :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>
nnoremap <Leader>rwc :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>

" 全屏开/关快捷键
" map <silent> <F11> :call ToggleFullscreen()<CR>
" 启动 vim 时自动全屏
" autocmd VimEnter * call ToggleFullscreen()
" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数
fun! ToggleFullscreen()
  call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
endf

" 禁止光标闪烁
set gcr=a:block-blinkon0
set matchtime=5 " 匹配括号高亮的时间（单位是十分之一秒）

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader        = ";"
let g:mapleader      = ";"
let maplocalleader   = ";"
let g:maplocalleader = ";"

"gvim使用的
" set guioptions-=r
" set guioptions-=l
"设置隐藏gvim的菜单和工具栏 F2切换
"  set guioptions-=m
"  set guioptions-=T
"  map <silent> <F2> :if &guioptions =~# 'T' <Bar>
"         \set guioptions-=T <Bar>
"         \set guioptions-=m <bar>
"     \else <Bar>
"         \set guioptions+=T <Bar>
"         \set guioptions+=m <Bar>
"     \endif<CR>

" 设置在状态行显示的信息
" 我的状态行显示的内容（包括文件类型和解码）
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
" set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\
" set statusline=%F%m%r%h%w\[POS=%l,%v][%p%%]\%{strftime(\”%d/%m/%y\ -\ %H:%M\”)}
" set statusline=%F%m%r%h%w\[line=%l,%v][%p%%]\%{strftime(\"%d/%m/%y\ -\ %H:%M\")}
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
" set statusline=\ %r%{Tlist_Get_Tagname_By_Line()}%h\ %w\ %F%m%r%h\ %w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ %w\ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
" set statusline=\ %F%m%r%h\ %w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ %w\ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
" set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\ \".&fenc)}\ \|\ %{$USER}\ @\ %{hostname()}\
" set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii


func! Cwd()
    let cwd = getcwd()
    return "e " . cwd
endfunc

" 获取当前路径，将$HOME转化为~
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "g")
    " let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    else
        return ''
    endif
endfunction

highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
" highlight StatusLine guifg=SlateBlue guibg=Yellow
" highlight StatusLineNC guifg=Gray guibg=White

" autocmd InsertLeave * se nocul  " 用浅色高亮当前行
" autocmd InsertEnter * se cul    " 用浅色高亮当前行

"自动保存
" set autowrite

" 屏蔽代码
vmap <C-\> dO#endif<Esc>PO#if 0<Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 为选中代码加括号啥的
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>

""""""""""""""""""""""""""""""
" 对选中代码进行匹配
" => Visual mode related
""""""""""""""""""""""""""""""
" Really useful!
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" From an idea by Michael Naumann
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
""""""""""""""""""""""""""""""
" Set 2 lines to the curors - when moving vertical..
" set so=2
""""""""""""""""""""""""""""""

" When pressing <leader>cd switch to the directory of the open buffer
" map <leader>cd :cd %:p:h<cr>

" plugin shortcuts
function! RunShell(Msg, Shell)
	echo a:Msg . '...'
	call system(a:Shell)
	echon 'done'
endfunction
" nmap  <F7> :call RunShell("get tags_dir","tag")<cr>
"nmap  <F9> :call RunShell("Generate tags", "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .")<cr>
"nmap <F11> :call RunShell("Generate filename tags", "~/.vim/shell/genfiletags.sh")<cr>
"nmap <F12> :call RunShell("Generate cscope", "cscope -Rb")<cr>:cs add cscope.out<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 以下列出了和语言编码的相关的设置：
" 环境变量 LANG（使用的语言）；
" 环境变量 LC_CTYPE（使用的内部编码）；
" Vim 选项 encoding(enc)（Vim 的内部编码）；不管文件的编码如何，不管如何显示和输入， Vim 内部使用的编码是 UTF-8；这是国际化支持的基础。
" Vim 选项 termencoding(tenc)（Vim 在与屏幕/键盘交互时使用的编码）；
" Vim 选项 fileencoding(fenc)（Vim 当前编辑的文件在存储时的编码）；
" Vim 选项 fileencodings(fencs)（Vim 打开文件时的尝试使用的编码）；
" Vim 选项 ambiwidth（对“不明宽度”字符的处理方式；Vim 6.1.455 后引入）。

" 配置多语言环境
if has("multi_byte")
    " UTF-8 编码
    set encoding=utf-8
    set termencoding=utf-8
    set formatoptions+=mM
    " 设定默认解码
    set fileencoding=utf-8
    " set fileencoding=gb18030
    " set fileencoding=gb2312

    " set fencs=usc-bom,euc-jp,iso-8859-1,shift-jis
    set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,utf-16,big5,gb2312,chinese
    if v:lang=~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" "cd" to change to open directory.
" nmap <silent> <leader>cd :exe 'cd ' . OpenDir<cr>:pwd<cr>
let OpenDir=system("pwd")
"在当前目录查找光标词的所有位置
" nmap  <F6> :vimgrep /<C-R>=expand("<cword>")<cr>/ **/*.c **/*.h<cr><C-o>:cw<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 可能用不到的配置
" set showcmd " 在 Vim 窗口右下角，标尺的右边显示未完成的命令
" set nowrapscan              " 禁止在搜索到文件两端时重新搜索
" map <leader>t2 :setlocal shiftwidth=2<cr>
" map <leader>t4 :setlocal shiftwidth=4<cr>
" map <leader>t8 :setlocal shiftwidth=4<cr>
" Remove the Windows ^M - when the encodings gets messed up
" noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
" 去掉所有的^M
" noremap <Leader>ff :%s/\$//g<cr>:%s/\/ /g<cr>
" nmap  <F4> :%s/ *$//g<cr>
set grepprg=/bin/grep\ -nH  "":grep" 使用的程序
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
"set backup "覆盖文件时保留备份文件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"关于buffer的快捷键
nnoremap <C-RETURN> :bnext<CR>
nnoremap <C-S-RETURN> :bprevious<CR>

"关于tab的快捷键
nnoremap <C-TAB> :tabnext<CR>
nnoremap <C-S-TAB> :tabprev<CR>
" map tn :tabnext<cr>
" map tp :tabprevious<cr>
" map td :tabnew .<cr>
" map te :tabedit
" map tc :tabclose<cr>
" map tm :tabmove
set viminfo+=! " 保存全局变量
set magic "改变搜索模式使用的特殊字符
" set cindent " 使用C样式的缩进
" set cinoptions=:0   "设置 'cindent' 时如何缩进
" set smartindent "C 程序智能自动缩进
set showtabline=1  "指定何时显示带有标签页标签的行,这里设置为至少有两个以上才显示.

set virtualedit=onemore             " 光标可以移到当行最后一个字符之后 
set confirm "退出、写入等有未保存的改动或文件只读时询问
set linespace=0 " 字符间插入的像素行数目
set linespace=0   " 行之间没有多余的空格
set lazyredraw  "执行宏时不重画
set display=lastline    "长行显示，解决@@@@的问题
"只显示一个buffer
"nmap <leader>zz <C-w>o

" 没sudo却想保存
cmap w!! w !sudo tee % >/dev/null

"在插入模式输入xtime自动插入时间.
iab xtime <c-r>=strftime("%Y-%m-%d %H:%M:%S")<C-I>
set splitright    " 用vsplit新建窗口，让新的放右边
set splitbelow    " 用split新建窗口，让新的放下面
set iskeyword-=.  " 让'.' 作为单词分割符
set iskeyword-=#  " 让'#' 作为单词分割符
set iskeyword-=-  " 让'-' 作为单词分割符

" 第80列往后加下划线
" au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 80 . 'v.\+', -1)

"Ctrl+I 开启右键复制项
map <C-I> :set mouse=<CR>
"Ctrl+L  禁用右键复制项
map <C-A> :set mouse=a<CR>

" set shell=/bin/bash
nmap -- 5<C-w>-
nmap ++ 5<C-w>+
nmap >> 5<C-w>>
nmap << 5<C-w><
nmap cc :color <space>

"F6 for uncomment
vmap <F6> :s=^\(//\)*==g<cr>:noh<cr>
nmap <F6> :s=^\(//\)*==g<cr>:noh<cr>
imap <F6> <ESC>:s=^\(//\)*==g<cr>:noh<cr>

" 去掉输入错误的提示声音
set noeb
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p

" Bash(Emacs)风格键盘绑定
imap <C-a> <HOME>
imap <C-e> <END>
set mousehide    " 输入文件时隐藏鼠标
set nowritebackup " 不写入备份文件
set shortmess=atI"  " 关闭欢迎页面
set viewoptions=cursor,folds,slash,unix " viminfo 记录的内容
set scrolljump=5  " 光标离开屏幕范围 
set nojoinspaces  " 用J合并两行用一个空格隔开
set pastetoggle=<F12> " 指定F12进入黏贴模式，可以正常复制缩进
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " 空格等无效字符显示
set listchars=tab:>-,trail:-
" 处理折叠行的左右移动
noremap j gj
noremap k gk

" ,fc查找冲突的地方
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" ,ff 查找光标后的单词位置，列出选择项
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" 在文件名上按gf时，在新的tab中打开
"map gf :tabnew <cfile><cr>

"清除末尾空格
nmap ds :%s/\s\+$//<cr>

"当打开vim且没有文件时自动打开NERDTree
autocmd vimenter * if !argc() | NERDTree | endif
" 只剩 NERDTree时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"删除行尾的一个^M
nmap dm :%s/\r\+$//e<cr>:set ff=unix<cr>

" 黏贴板
if has('clipboard')
    if has('unnamedplus')
        set clipboard=unnamedplus
    else
        set clipboard=unnamed
    endif
endif

" 快捷输入
" 自动完成括号和引号
inoremap <leader>1 ()<esc>:let leavechar=")"<cr>i
inoremap <leader>2 []<esc>:let leavechar="]"<cr>i
inoremap <leader>3 {}<esc>:let leavechar="}"<cr>i
inoremap <leader>4 {<esc>o}<esc>:let leavechar="}"<cr>O
inoremap <leader>q ''<esc>:let leavechar="'"<cr>i
inoremap <leader>w ""<esc>:let leavechar='"'<cr>i

"去空行
nnoremap <F2> :g/^\s*$/d<CR>
" 选中状态下 Ctrl+c 复制
map <C-v> "*pa
imap <C-v> <Esc>"*pa
"比较文件
nnoremap <C-F2> :vert diffsplit
set linebreak             " 防止折行时打断单词，将整个词进行折行。
" 清除前面数字加. exaple 12.aaa-->aaa
nmap fk :1,$s/^.*\.//g<cr>
" 清除后面空格
nmap fk :1,$s/ *$//g<cr>
" nmap  <F4> :%s/ *$//g<cr>
if 1
    source ~/.vdotfiles/src/vimrc.unuseful
endif
