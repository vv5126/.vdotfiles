[ 目录 ]

### 特殊变量
$IFS 用于设置指定shell域分隔符，默认情况下为空格。
$LANG    当前locale默认名称
$PATH    环境变量
$PPID    父进程编号
$PWD    当前工作目录
$OLDPWD   ：记录旧的工作目录。
$OSTYPE  :记录操作系统类型。
$PS1  ：提示符变量，用于设置提示符格式，用于设置一级shell提示符环境变量。
$PS2  ：用于设置二级shell提示符环境变量。
$REPLY  ：REPLY变量与read和select有关。
$SECONDS：记录脚本从开始到结束耗费的时间。
$SHELL ：显示当前所用的shell
$SHELLOPTS  ：记录了处于“开”状态的shell选项列表，它只是一个只读变量。
$SHLVL   ：记录了bash嵌套的层次，一般来说，我们启动第一个Shell时。  $SHLVL=1。如果在这个Shell中执行脚本，脚本中的$SHLVL=2 。
$TMOUT  ：用来设置脚本过期的时间，比如TMOUT=3，表示该脚本3秒后过期。
$UID 当前权限，为0时为root权限。
$USER ：显示当前用户名字
$LOGNAME 包含用户的注册名字
$BASH ：记录当前bash shell的路径。
$BASH_SUBSHELL  ：记录当前子shell的层次。BASH_SUBSHELL是从0开始计数的整数。
$BASH_VERSINFO  ：是一个数组包含六个元素，这六个元素显示bash的版本信息。
$BASH_VERSION  ：显示shell版本的信息。
$DIRSTACK  ：记录了栈顶的目录值，初值为空。
$GLOBLGNORE ：是由冒号分割的模式列表，表示通配时忽略的文件名集合。
$GROUPS   ：记录当前用户所属的组。
$HOME ：记录当前用户的家目录，由/etc/passwd的倒数第二个域决定。
$HOSTNAME  ：记录主机名。
$HOSTTYPE和$MACHTYPE ：都是记录系统的硬件架构。
$# 表示除$0之外的参数的个数。
$* 当前命令行所有参数。置于双引号中，表示将命令行所有参数当初一个单独参数
$* 以一个单字符串显示所有向脚本传递的参数，,以("$1 $2...")，除$0之外的参数的列表，但是这个列表是一个整体
$-（连字号）    在引用数给予Shell的选项
$- 显示shell使用的当前选项。
$! 后台运行的最后一个进程的ID号
$@ 当前命令行所有参数。置于双引号中，表示个别参数
$@ 除$0之外的参数的列表，这个列表时分开的
$@ 与$*相同，但是使用时加引号，并在引号中返回每个参数。("$1""$2"...)
$0 表示当前程序名称
$0:脚本名字。此变量包含地址，可以使用basename $0获得脚本名称。
$1:第一个参数
$2,$3,$4,$5,...一次类推。
$$ 是脚本运行的当前进程ID号
!$ 上一条指令的参数
!! 重复执行最后一条命令
$?命令执行的状态返回值
$?的参考值
0    成功退出
>0    退出失败
1-125    命令退出失败，失败返回的相关值由程序定义（譬如，程序内退出只执行 exit 2，则返回为2）
126    命令找到了，但无法执行
127    命令找不到
>128    命令因受到信号而kill

### 终端命令
C+l 清屏
C+a 行首
C+e 行尾
C+- 减小字体
C++ 增加字体
Ctrl + p 显示上一条命令
Ctrl + n 显示下一条命令
C+j 回车
C+w 从字符删除到空格
C+d 删除当前字符
Ctrl + d 退出shell，logout
C+z 暂停当前前台程序，bg扔到后台执行。
Ctrl + u 剪切光标之前的内容
Ctrl + k 剪切清除光标之后的内容
Ctrl + y 粘贴刚才所删除的字符
Ctrl + r 在历史命令中查找
Ctrl + c 终止命令
C+u 撤销
C+y 重做
C+t 交换前两字符
fg +n n为后台程序序号将后台程序转到当前前台操作。jobs 看所有后台。

### 文件操作逻辑运算符
-u               文件的UID标志被设置
-G               文件的组ID和当前用户相同
file1 -nt file2  文件file1比file2更新
file1 -ot file2  文件file1比file2更老
-r file　　　　　文件可读为真
-w file　　　　　文件可写为真
-x file　　　　　文件可执行为真
-f file　　　　　文件为正规文件为真
-d file　　　　　文件为目录为真
-c file　　　　　文件为字符特殊文件为真
-b file　　　　　文件为块特殊文件为真
-s file　　　　　文件大小非0时为真
-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真
-e file          当file存在时,返回True
-o file          当file文件的所有者是当前用户时,返回True
-z file          当file长度为0时,返回True
-L file          符号连接
### 判断
=   等于 应用于：整型或字符串比较 如果在[] 中，只能是字符串
!=  不等于 应用于：整型或字符串比较 如果在[] 中，只能是字符串
<   小于 应用于：整型比较 在[] 中，不能使用 表示字符串
>   大于 应用于：整型比较 在[] 中，不能使用 表示字符串
-eq 等于 应用于：整型比较
-ne 不等于 应用于：整型比较
-lt 小于 应用于：整型比较
-gt 大于 应用于：整型比较
-le 小于或等于 应用于：整型比较
-ge 大于或等于 应用于：整型比较
-a  双方都成立（and） 逻辑表达式 –a 逻辑表达式
-o  单方成立（or） 逻辑表达式 –o 逻辑表达式
-z  空字符串
-n  非空字符串
!   返回相反状态

### bash中常用的命令
alias   | 设置命令别名
unalias | 删除命令行别名
bg      | 将一个被挂起的进程在后台执行
cd      | 改变用户的当前目录
exit    | 终止一个shell
export  | 变量名：可传递给子进程, 相当于全局变量
export  | 使作为这个命令的参数的变量及其当前值,在当前运行的shell的子进程中可见
fc      | 编辑当前的命令行历史列表
fg      | 让一个被挂起的进程在前台执行
help    | 显示bash内部命令的帮助信息
history | 显示最近输入的一定数量的命令行,这个可以配合!编辑来执行某某命令
kill    | 终止一个进程
pwd     | 显示用户当前工作目录
unset   | 撤销变量
readonly| 设置变量为只读，不能unset

### 取得字符串长度
string=abc12342341
echo ${#string}             //结果11
expr length $string         //结果11
expr "$string" : ".*"       //结果11 分号二边要有空格,这里的:根match的用法差不多2，字符串所在位置
expr index $string '123'    //结果4 字符串对应的下标是从0开始的这个方法让我想起来了js的indexOf，各种语言对字符串的操作方法大方向都差不多，如果有语言基础的话，学习shell会很快的。

### 信号处理
trap命令用于在Shell程序中捕捉信号，之后可以有3种反应方式：
（1）执行一段程序来处理这一信号。
trap "commands" signal-list
（2）接受信号的默认操作。
trap signal-list
（3）忽视这一信号。
trap "" signal-list

注意：
（1）对信号11（段违例）不能捕捉，因为Shell本身需要捕捉该信号去进行内存的转储。
（2）在trap中可以定义对信号0的处理（实际上没有这个信号），Shell程序在其终止（如执行exit语句）时发出该信号。
（3）在捕捉到signal-list中指定的信号并执行完相应的命令之后，如果这些命令没有将Shell程序终止的话，Shell程序将继续执行收到信号时所执行的命令后面的命令，这样将很容易导致Shell程序无法终止。
另外，在trap语句中，单引号和双引号是不同的。当Shell程序第一次碰到trap语句时，将把commands中的命令扫描一遍。此时若 commands是用单引号括起来的话，那么Shell不会对commands中的变量和命令进行替换，否则commands中的变量和命令将用当时具体的值来替换。
trap -l 列出所有信号，stty -a 显示信号的快捷键。

### 脚本调试
 bash -选择项Shell程序文件名几个常用的选择项是：
    -e如果一个命令失败就立即退出。
    -n读入命令但是不执行它们。
    -u置换时把未设置的变量看做出错。
    -v当读入Shell输入行时把它们显示出来。
    -x执行命令时把命令和它们的参数显示出来。
    +x 关闭调试

### 数组运算
A=(a b c def)
${A[@]} 或 ${A[*]} 可得到 a b c def (全部组数)
${A[0]} 可得到 a (第一个组数)，${A[1]} 则为第二个组数...
${#A[@]} 或 ${#A[*]} 可得到 4 (全部组数数量)
${#A[0]} 可得到 1 (即第一个组数(a)的长度)，${#A[3]} 可得到 3 (第四个组数(def)的长度)

#-----------------------------------------------------------------------------------------------
---

### 杂

### 字符串处理
#### 替换运算符

${var:-word}   如果var存在且非null，返回它的值；否则返回word
${file-my.file.txt}: 若$file没有设定，则使用my.file.txt作返回值。(空值及非空值时不作处理)
${file:-my.file.txt}:若$file没有设定或为空值，则使用my.file.txt作返回值。(非空值时不作处理)

${var:+word}   如果var存在且非null，返回word；否则返回null
${file+my.file.txt}: 若$file设为空值或非空值，均使用my.file.txt作返回值。(没设定时不作处理)
${file:+my.file.txt}:若$file为非空值，则使用my.file.txt作返回值。(没设定及空值时不作处理)

${var:=word}   如果var存在且非null，返回它的值；否则将word赋值给var，并返回var的值
${file=my.file.txt}: 若$file没设定，则使用my.file.txt作返回值，同时将$file 赋值为 my.file.txt。(空值及非空值时不作处理)
${file:=my.file.txt}:若$file没设定或为空值，则使用my.file.txt作返回值，同时将 $file 赋值为 my.file.txt。(非空值时不作处理)

${var:?word}   如果var存在且非null，返回它的值；否则显示var:word
${file?my.file.txt}: 若$file没设定，则将my.file.txt输出至 STDERR。(空值及非空值时不作处理)
${file:?my.file.txt}:若$file没设定或为空值，则将my.file.txt输出至STDERR。(非空值时不作处理)
注意: 
":+"的情况是不包含空值的.
":-", ":="等只要有号就是包含空值(null).


#### 匹配并且替换 //abc12342341
echo ${string/23/bb}   //abc1bb42341  替换一次
echo ${string//23/bb}  //abc1bb4bb41  双斜杠替换所有匹配
echo ${string/#abc/bb} //bb12342341   #以什么开头来匹配
echo ${string/%41/bb}  //abc123423bb  %以什么结尾来匹配

### 指定位置截取
str='http://www.xxx.com/cut-string.html'
1、从左边第几个字符开始以及字符的个数, echo ${var:0:5} 结果是：http:
2、从左边第几个字符开始一直到结束, echo ${var:7} 结果是：www.xxx.com/cut-string.html
3、从右边第几个字符开始以及字符的个数, echo ${str:0-15:10} 结果是：cut-string
4、从右边第几个字符开始一直到结束, echo ${str:0-4} 结果是：html
echo ${string:4}      //2342341  从第4位开始截取后面所有字符串
echo ${string:3:3}    //123      从第3位开始截取后面3位
echo ${string:3:6}    //123423   从第3位开始截取后面6位
echo ${string: -4}    //2341  ：右边有空格   截取后4位
echo ${string:(-4)}   //2341  同上
注：（左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示）
expr substr $string 3 3   //123  从第3位开始截取后面3位

### 模式匹配运算符 (如 str='http://www.你的域名.com/cut-string.html')
${var#pattern}    匹配前缀（最小匹配），并返回余下内容echo ${str#*//}
cut-string.html
${var##pattern}    匹配前缀（最大匹配），并返回余下内容 echo ${str##*/}
www.你的域名.com/cut-string.html
${var%pattern}    匹配结尾（最小匹配），并返回余下内容   echo ${str%/*}
http://www.你的域名.com
${var%%pattern}    匹配结尾（最大匹配），并返回余下内容   echo ${str%%/*}
http://www.你的域名.com
注：pattern为正则表达式匹配

从字符串开头到子串的最大长度 expr match $string 'abc.*3'
匹配显示内容
//例3中也有match和这里的match不同，上面显示的是匹配字符的长度，而下面的是匹配的内容
expr match $string '\([a-c]*[0-9]*\)'  //abc12342341
expr $string : '\([a-c]*[0-9]\)'       //abc1
expr $string : '.*\([0-9][0-9][0-9]\)' //341 显示括号中匹配的内容这里括号的用法

### 数学

2)使用(())
var=1
((var+=1))
echo $var 输出结果为2

3)使用$[]
var=1
var=$[$var+1]
echo $var 输出结果位2
注意：
a)$[]将中括号内的表达式作为数学运算先计算结果再输出
b)对$[]中的变量进行访问时前面需要加$
c)$[]支持的运算符与let相同，但也只支持整数运算

4)使用expr
var=1
var=`expr $var + 1`
echo $var 输出结果为2
注意：
a)expr后的表达式个符号间需用空格隔开
b)expr支持的操作符有： |、&、<、<=、=、!=、>=、>、+、-、*、/、%
c)expr支持的操作符中所在使用时需用\进行转义的有：|、&、<、<=、>=、>、*
e)expr同样只支持整数运算

5)使用bc(可以进行浮点数计算)
var=1
var=`echo "$var+1"|bc`
echo $var 输出结果为2
bc是linux下的一个简单计算器，支持浮点数计算，在命令行下输入bc即进入计算器程序，而我们想在程序中直接进行浮点数计算时，利用一个简单的管道即可解决问题。
注意：
1)bc支持除位操作运算符之外的所有运算符。
2)bc中要使用scale进行精度设置
var=3.14
var=`echo "scale=2;$var*3"|bc`
echo $var 输出结果为9.42

6)使用awk(可已进行浮点数计算)
var=1
var=`echo "$var 1"|awk '{printf("%g",$1*$2)}'`
echo $var 输出结果为2
awk是一种文本处理工具，同时也是一种程序设计语言，作为一种程序设计语言，awk支持多种运算，而我们可以利用awk来进行浮点数计算，和上面bc一样，通过一个简单的管道，我们便可在程序中直接调用awk进行浮点数计算。
注意：
1)awk支持除微操作运算符之外的所有运算符
2)awk内置有log、sqr、cos、sin等等函数
var=3.14
var=`echo "$var 2"|awk '{printf("%g",sin($1/$2))}'`
echo $var 输出结果为1

数学计算：((xxx)) let expr bc $[xxx]，bc可以进行浮点运算。let expr $[xxx] 少用。


### 提取最后一个参数
args=$#
lastargs=${!args}
echo $lastargs
echo ${!#}
echo $(eval echo "\$$#")

### 管道方法
str="$(cat <&0)"
echo -e "$str"
">

Shell脚本中判断变量为数字的3种方法
这篇文章主要介绍了Shell脚本中判断变量为数字的3种方法,本文分别介绍了expr、sed两种方法,并给出了一个判断脚本,需要的朋友可以参考下

通过expr 计算变量与一个整数值相加，如果能正常执行则为整数，否则执行出错,$?将是非0的值
expr $args + 0 &>/dev/null

打印变量通过sed替换的方式，将变量中的数字替换为空，如果执行替换后变量为空，则为整数
echo $args | sed 's/[0-9]//g'

如果判断负数则再用sed过滤负号
echo $args | sed 's/[0-9]//g' | sed 's/-//g'

### 部分总结
脚本里使用 set -- xxx xxx xxx 相当于传入参数。
函数体内一般变量加local。
echo -n 不换行。
多模仿系统脚本。
shift 参数左移，相当于隐藏了最前面的参数。
read [参数] [变量] -p 提示 -t 超时时间。后跟 $a $b...... ,可以设置传几个参数。
传参，$*当做一个变量传递，$@保留原有变量状态。
一些简写 {1..9} {a..g}
break 跳出所有包括嵌套的循环，break n跳出n个循环。
双引号内的特殊字符可以保有变量特性，但是单引号内的特殊字符则仅为一般字符。单引号和双引号都屏蔽*的通配符作用。
反斜线用来屏蔽特殊字符的特殊含义

[]或语句(利用返回值$?) && || 相当于if语句，最好加{}。
exit 0
清空 cat /dev/null > xxx
awk sed expect 都是语言
[]两端要有空格。
环境变量就是全局变量。（相对与当前父shell和子shell）
启用shell脚本一般是属于子shell其中的变量为局部，退出即释放。
所有profile bashrc 等等其实都一样，存的是全局变量或者做些全局的事，启动账户时会建立这些全局工作（登录交互）。非登录交互只会走特定文件，其实可以互相嵌入。需要使用export导出！
su - xxx 切换用户
set 显示所有本地变量，unset 取消环境变量
env 显示目前系统中主要预设变量内容
set 显示目前系统中全部变量内量， 这里包括用户设定的变量
变量使用标准 "${xxx}"。
{ xxx } 左右要加空格！
${//}替换第一个，${/%/}结尾匹配，${/#/}开头匹配。
man bash 常看手册。
less 分屏查看。
bc 一般用管道，scale=2 保留小数个数。obase=2 进制转换，这里是2进制。
判断:[] [[]]，基本使用这两种，[[]]可以使用&& || <> 等符号。
">
">
一般数学符号需要在[[]]，(())中使用。单的不支持，只能用-eq什么的，= ！ 倒是可以。
分号相当于换行。
read 参数 -t 超时时间 -p 提示语 read -t 10 -p "hehe:" a b 可传入多参数。
if [xxx] 可以用((xxx))代替，比较符号要改。
wc -l 转换为数字
namp 远程端口状态查看
head -1 第一行，-n就是前几行，tail -n 可以取后几行，这两个可以协同工作取区间行。
cut -d "xxx" -fxxx 以什么隔开字符并取第几部分。
case语句 每个）可以使用|来加入多个判断在一个条件里。
echo xxx && echo -en \\033[1;31m 为xxx加颜色的另一个方法。
tail -f xxx 跟踪文件变化。有变化就打印。
有规律的序列可以用seq生成。
使用echo 传变量到管道，另一边怎么接？？ 使用 --stdin 代替就行了：echo "hehe" | mkdir --stdin。
随机数 $RANDOM|md5sum，或者可以更复杂。
continue n 表示退到第n个层在进行循环。
函数库使用source进行预加载就能用了。
使用etc/init.d/functions的函数库，echo可以用action "xxx" /bin/ture 代替，会好看些。
取整个数组：${数组名[*]}，数组数量：${#数组名[*]}。
数组常用方法：xxx=($(ls))
函数内局部变量加local。
以变量形式进行传参，要加双引号，防错。
大的循环最好使用awk代替。
export LANG=“zh_CN.GB18030"使用中文字符集。
Linux提供了自定义自动补全的命令：complete, 有一个-W参数，意思是把要补全的命令写到里面，整个命令的写法:complete -W "aaa bbb ccc" xxx.sh，加到bashrc中。
变量赋值一定一定不要乱加空格！！ CMD=`ls -a`

### 杂乱
由双引号括起来的字符，除$、倒引号`和反斜线\ 仍保留其特殊功能外，其余字符均作为普通字符对待。
仅当“\”后面的字符是下述字符之一时，“\”才是转义字符，这些字符是：“$”、“`”、“"”、“\”或换行符。
而对”号，若其前面没有加，则Shell会将它同前一个”号匹配。
$ TestString＝”$PATH\”$PATH”
.:/usr/bin:/ bin”$PATH
${SAT}day，变量要与字符串连在一起时，应该用${}
格式：echo '你的密码'|sudo -S 执行命令
ssh 远程用户名@远程主机IP地址 ‘远程命令或者脚本’ 
可能要执行    source ~/.profile 否则无法使用.bin中的东西。
shell中的赋值和操作默认都是字符串处理

在shell中使用管道，会fork一个子shell，传入其中的变量为局部变量。
在使用read file时可以使用cat file | while read line；do done 或者在done后< file，就不会重新fork子shell了。
">
">
需要用source或者.执行，这样会在当前shell环境中执行，如果直接执行，会开启一个子shell,你在子shell中进入了该目录，脚本执行完后会退出子shell回到父shell环境


### 技巧类
用命令行往配置文件里插入多行文本
cat >> path/to/file/to/append-to.txt << "EOF"
export PATH=$HOME/jdk1.8.0_31/bin:$PATH
export JAVA_HOME=$HOME/jdk1.8.0_31/
EOF

添加到文件：cat>xxx<<EOF xxx\n xxx\n EOF
巧用cat进行多行数据的输出，cat << END  xxxxxxxxxxxx END。

">
">
\033 八进制

shell中创建的变量局部于创建它的shell，除非使用export命令特别指出是全局的。
 运行脚本文件的三种方式
（1）直接执行
execve()可以自动识别脚本文件类型，并自动加载相应的解释器。如下：
# strace -e trace=process ./test1.sh
execve("./test1.sh", ["./test1.sh"], [/* 21 vars */]) = 0
（2）人工指定解释器执行
当然，这个识别脚本的过程也可以交给用户自己来完成，比如对于上面的 test1.sh，我们可以指定ksh93为其解释器，者通过显式的执行其解释器程序来完成。
[root@notebook135 ~]# strace -e trace=process ksh93 ./test1.sh
execve("/bin/ksh93", ["ksh93", "./test1.sh"], [/* 21 vars */]) = 0
此时，脚本文件第一行指定的解释器不起作用了。
这两种执行脚本文件的方式效果是一样的，只是通过ps查看时进程的名字会有所不同，直接执行时子进程名字为脚本文件名，通过ksh93 test1.sh执行时，子进程名为ksh93。
其实第二种方式有时候是必要的，例如某些系统的加载器本身不能直接执行脚本文件，又如脚本文件本身不具有可执行权限。
(3)使用 . 命令执行脚本（不生成子进程）
(4) 使用eval命令执行（不产生子进程）
eval与（3）的点命令原理一样，但是提供了更多的参数。
(5) 使用exec 命令执行脚本文件(不产生子进程)
exec 内置命令可以作用于二进制，也可以作用于可执行的脚本文件，使用exec命令执行（不建立子进程）,会替换当前bash进程。
