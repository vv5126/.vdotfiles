#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import json
import os
import argparse
sys.path.append(os.environ.get('HOME') + "/.bin/lib/py3")
from vpri import cprint, select_list, filetpye_guess, is_suffix

# send
from email import encoders
from email.header import Header
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
import smtplib

# get
import poplib
from email.parser import Parser
from email.header import decode_header
from email.utils import parseaddr

def guess_charset(msg):
    charset = msg.get_charset()
    if charset is None:
        content_type = msg.get('Content-Type', '').lower()
        pos = content_type.find('charset=')
        if pos >= 0:
            charset = content_type[pos + 8:].strip()
    return charset

def decode_str(s):
    value, charset = decode_header(s)[0]
    if charset:
        value = value.decode(charset)
    return value

def print_info(msg, indent=0):
    if indent == 0:
        for header in ['From', 'To', 'Subject']:
            value = msg.get(header, '')
            if value:
                if header=='Subject':
                    value = decode_str(value)
                else:
                    hdr, addr = parseaddr(value)
                    name = decode_str(hdr)
                    value = u'%s <%s>' % (name, addr)
            print('%s%s: %s' % ('  ' * indent, header, value))
    if (msg.is_multipart()):
        parts = msg.get_payload()
        for n, part in enumerate(parts):
            print('%spart %s' % ('  ' * indent, n))
            print('%s--------------------' % ('  ' * indent))
            print_info(part, indent + 1)
    else:
        content_type = msg.get_content_type()
        if content_type=='text/plain' or content_type=='text/html':
            content = msg.get_payload(decode=True)
            charset = guess_charset(msg)
            if charset:
                content = content.decode(charset)
            print('%sText: %s' % ('  ' * indent, content + '...'))
        else:
            print('%sAttachment: %s' % ('  ' * indent, content_type))

class MAIL(object):
    def __init__(self):
        self.from_addr = 'wei.gao@ingenic.com'
        self.password = 'asd123456'
        self.smtp_server = 'mail.ingenic.com'
        self.smtp_port = 25
        self.use_tls = False
        self.to_addr = 'wei.gao@ingenic.com'
        self.multipart = True
        self.attach = ''

    def test(self):
        print(self.from_addr, self.to_addr)

    def sendmail(self):
        if self.multipart == True:
            msg = MIMEMultipart()
        # else:
        #     msg = MIMEText('hello, send by Python...', 'plain', 'utf-8')

        msg['From'] = u'Python爱好者 ' + self.from_addr
        msg['To'] = u'管理员 ' + self.to_addr
        msg['Subject'] = Header(u'hello', 'utf-8').encode()

        msg.attach(MIMEText('xxx xxx', 'plain', 'utf-8'))
        msg.attach(MIMEText('<html><body><h1>Hello</h1>' +
            '<p>send by <a href="http://www.python.org">Python</a>...</p>' +
            '</body></html>', 'html', 'utf-8'))

        if self.attach:
            with open(self.attach, 'rb') as f:
                kind = filetpye_guess(self.attach)
                if kind is 'png':
                    mime = MIMEBase('image', kind, filename=self.attach)
                elif kind is '':
                    mime = MIMEBase('unknown', 'unknown', filename=self.attach)
                    pass
                mime.add_header('Content-Disposition', 'attachment', filename=self.attach)
                mime.add_header('Content-ID', '<0>')
                mime.add_header('X-Attachment-Id', '0')
                mime.set_payload(f.read())
                encoders.encode_base64(mime)
                msg.attach(mime)

        server = smtplib.SMTP(self.smtp_server, self.smtp_port)
        if self.use_tls == True:
            server.starttls()
        server.set_debuglevel(1)
        server.login(self.from_addr, self.password)
        server.sendmail(self.from_addr, [self.to_addr], msg.as_string())
        server.quit()

    def getmail(self):
        email = "wei.gao@ingenic.com"
        password = "asd123456"
        pop3_server = "mail.ingenic.com"

        server = poplib.POP3(pop3_server)
        #server.set_debuglevel(1)
        # print(server.getwelcome())
        # 认证:
        server.user(email)
        server.pass_(password)
        print('Messages: %s. Size: %s' % server.stat())
        resp, mails, octets = server.list()
        # 获取最新一封邮件, 注意索引号从1开始:
        resp, lines, octets = server.retr(len(mails))
        # 解析邮件:
        print(type(lines))
        for i in lines:
            if "b'Message-ID" in str(i):
                print(i)
                break
        msg = Parser().parsestr('\r\n'.join('%s' %id for id in lines))
        # 打印邮件内容:
        print(msg)
        # Message-ID: <5B7D1B78.9080704@ingenic.com>
        server.quit()

def main():
    parser = argparse.ArgumentParser(description='manual to this script')
    parser.add_argument('--from_addr', type=str, nargs='?', const=True, default=False)
    parser.add_argument('--to', type=str, nargs='?', const=True, default=False)
    parser.add_argument('--password', type=str, nargs='?', const=True, default=False)
    parser.add_argument('--smtp_server', type=str, nargs='?', const=True, default=False)
    parser.add_argument('--smtp_port', type=str, nargs='?', const=True, default=False)
    parser.add_argument('--tls', type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--multipart', type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--attach', type=str, nargs='?', const=True, default=False)

    parser.add_argument('-f', '--configfile', type = str, default = None)

    args = parser.parse_args()

    # if args.configfile == None:
    #     print('error!!!')
    #     return -1

    mail = MAIL();

    if args.from_addr:
        mail.from_addr = args.from_addr
    if args.to:
        mail.to = args.to
    if args.password:
        mail.password = args.password
    if args.smtp_server:
        mail.smtp_server = args.smtp_server
    if args.smtp_port:
        mail.smtp_port = args.smtp_port
    if args.tls:
        mail.use_tls = args.tls
    if args.multipart:
        mail.multipart = args.multipart
    if args.attach:
        mail.attach = args.attach

    mail.test()
    mail.sendmail()
    # mail.getmail()

if __name__ == '__main__':
    main()
