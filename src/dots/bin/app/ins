#!/usr/bin/env python3

import sys
import json
import os
import tarfile
# import re
import subprocess
import shutil

sys.path.append(os.environ.get('HOME') + "/.bin/lib/py3")

from vpri import cprint, select_list, filetpye_guess, is_suffix
import vget
import vinstall

# import filetype

global install_mode
global install_dir
install_mode = 'single'

def check_have(dict1, key1):
        if key1 in dict1.keys() and dict1[key1] != 'NULL':
            return True
        else:
            return False

class Install(object):
    package = ['.tar.gz', '.bz2.gz', 'tar' ,'rar', 'zip', 'gzip']
    plocal = os.environ.get('HOME') + '/.local'
    tmp_dir = plocal + '/install'

    def __init__(self, app, fjson, install_dir):
        self.app = app
        self.fjson = fjson;
        self.install_dir = install_dir
        self.method = ''

        self.needget = False
        self.needtar = False
        self.needcompile = False
        self.needinstall = False
        self.source_dir = self.tmp_dir
        self.sourcecode_dir = '/tmp'
        self.ins_py = False

        print ('app:', self.app)
        print ('install_dir:', self.install_dir)

    def depend(self):
        if 'depend' in self.fjson[self.app].keys():
            return self.fjson[self.app]['depend'].split(' ')
        else:
            return []

    def check_installed(self):
        t_lib = ['.so', '.py']
        c_lib = ['/lib', '/usr/lib', self.plocal + '/lib']
        t_inc = ['.h']
        c_inc = ['/usr/include', self.plocal + '/include']

        if 'installed_flag' not in self.fjson[self.app].keys():
            checkfile = self.app
            # cprint ("10", 'no installed flag for:' + checkfile)
            # return False
        else:
            checkfile = self.fjson[self.app]['installed_flag']

        if is_suffix(checkfile, t_lib) == True:
            (status, output) = subprocess.getstatusoutput('find ' + ' '.join(c_lib) + ' -name ' + checkfile)
        elif is_suffix(checkfile, t_inc) == True:
            (status, output) = subprocess.getstatusoutput('find ' + ' '.join(c_inc) + ' -name ' + checkfile)
        else:
            (status, output) = subprocess.getstatusoutput('which ' + checkfile)
        if output.strip():
            cprint ("20", 'check installed ' + checkfile + ' at:', output.strip())
            return True

        cprint ("10", 'check installed failed: ' + checkfile)
        return False

    def by(self):
        bys = ['pip', 'pip3', 'src']
        bys_with_sys = ['aptitude', 'apt', 'gdebi','dpkg'] + bys

        if self.install_dir == 'system':
            tmp_list = list(set(bys_with_sys).intersection(set(self.fjson[self.app].keys())))
        else:
            tmp_list = list(set(bys).intersection(set(self.fjson[self.app].keys())))

        if tmp_list:
            self.method = select_list(tmp_list, "\033[5;32;40m请选择: \033[0m")
            self.appdict = self.fjson[self.app][self.method]
        else:
            raise Exception('method list is empty!')

        self.parse()

    # parse
    def parse(self):
        if self.method == 'apt' \
        or self.method == 'aptitude' \
        or self.method == 'pip' \
        or self.method == 'pip3':
            self.needinstall = True
            if 'source' in self.appdict.keys():
                self.source = self.appdict['source']
            else:
                self.source = self.app

        elif self.method == 'src':
            if 'source' in self.appdict.keys():
                source = self.appdict['source']
                self.needget = True
                self.source = source
                self.sourcename = source.split('/')[-1]
                cprint ("20", 'sourcename: ', self.sourcename)

                if check_have(self.appdict, 'tmp_dst'):
                    self.source_dir = self.appdict['tmp_dst']

            if 'https://github.com' in source:
                self.getby = 'git'
                # self.sourcecode_dir = self.source_dir + '/' + source.split('/')[-1]
            elif source[0:4] == 'http' or source[0:3] == 'ftp':
                self.getby = 'wget'
                # self.sourcecode_dir = self.source_dir + '/' + source.split('/')[-1]
            else:
                self.getby = 'scp'
                # self.sourcecode_dir = self.source_dir

        if 'flag' in self.appdict.keys():
            if 'make' in self.appdict['flag']:
                self.needcompile = True
                self.compileflag = 'make'
            if 'code' in self.appdict['flag']:
                pass
            if 'git' in self.appdict['flag']:
                self.getby = 'git'
            if 'tar' in self.appdict['flag']:
                self.needtar = True
            if 'pycode' in self.appdict['flag']:
                self.ins_py = True

        self.needinstall = True

        if self.source_dir[0:1] == '~':
            self.source_dir = self.source_dir.replace('~', os.environ.get('HOME'), 1)











    def un_tar(self, file_name):
        # ok
        print ('untar file_name', file_name)
        tar = tarfile.open(file_name)
        names = tar.getnames()
        self.sourcecode_dir = self.source_dir + '/' + names[0]
        if not os.path.exists(names[0]):
            tar.extractall('.', tar)
        tar.close()

    def normal_make(self, i = 0):
        # ok
        if install_dir == 'system':
            config = [['Makefile','make -j30'], ['configure','./configure'], ['autogen.sh','./autogen.sh']]
        else:
            config = [['Makefile','make -j30'], ['configure','./configure --prefix='+self.plocal], ['autogen.sh','./autogen.sh']]
        if i >= len(config):
            return
        if not os.path.exists(config[i][0]):
            self.normal_make(i + 1)
        os.system(config[i][1])

    def clean(self):
        # ok
        print("clean dir : ", self.sourcecode_dir + '/..')
        if os.path.exists(self.sourcecode_dir):
            os.chdir(self.sourcecode_dir + '/..')
            shutil.rmtree(self.sourcecode_dir)

    def install(self):

        if os.path.exists(self.source_dir) == False:
            os.mkdir(self.source_dir)

        os.chdir(self.source_dir)

        # get

        if self.needget == True:
            if check_have(self.appdict, 'get'):
                os.system(self.appdict['get'])
            else:
                if self.getby == 'git':
                    if os.path.exists(self.sourcename):
                        pass
                    else:
                        vget.git(self.appdict['source'], self.sourcename)
                elif self.getby == 'wget':
                    if os.path.exists(self.sourcename):
                        pass
                    else:
                        vget.wget(self.appdict['source'], self.sourcename)
                elif self.getby == 'scp':
                    if os.path.exists(self.sourcename):
                        pass
                    else:
                        vget.scp(self.appdict['source'], self.sourcename)
                else:
                    if install_dir == 'local':
                        pass

# get sourcecode_dir

            # tar
            # ok
            # if os.path.exists(self.sourcecode_dir):
            #     shutil.rmtree(self.sourcecode_dir)

            if os.path.isfile(self.sourcename):
                kind = filetpye_guess(self.sourcename)
                if kind in self.package:
                    print('File extension: %s' % kind)
                    # self.needtar = True:
                    if kind is 'gzip':
                        print(self.sourcename)
                        self.un_tar(self.sourcename)
                    elif kind is '':
                        pass
            elif os.path.isdir(self.sourcename):
                cprint ("20", 'app sourcecode_dir' + self.sourcecode_dir)
                self.sourcecode_dir = self.sourcename

            if os.path.exists(self.sourcecode_dir):
                os.chdir(self.sourcecode_dir)
                print('cd in ------------', self.sourcecode_dir)
            else:
                print ('can\'t cd to sourcecode_dir, or no need into.')
                return


            # configure & compile
            # ok

            if self.needcompile == True:
                if self.compileflag == 'make':
                    if check_have(self.appdict, 'configure'):
                        os.system(self.appdict['configure'])
                        os.system(self.appdict['make'])
                    else:
                        self.normal_make()
                else:
                    pass


        # install
        if self.needinstall == True:
            if check_have(self.appdict, 'install'):
                os.system(self.appdict['install'])
            else:
                if self.ins_py == True:
                    if os.path.exists('setup.py'):
                        vinstall.py_install()
                elif self.method == 'aptitude':
                    vinstall.aptitude(self.source)
                elif self.method == 'pip':
                    vinstall.pip(install_dir[0:1], self.source)
                elif self.method == 'pip3':
                    vinstall.pip3(install_dir[0:1], self.source)


        # clean
        # if check_have(self.appdict, 'clean'):
        #     print ('clean empty!!!')
        #     os.system(self.appdict['clean'])
        # else:
        #     self.clean()

        # cprint("20", "hehe")

def inst(app, fjson):
    global install_mode
    global install_dir

    if app not in fjson:
        cprint("10", "can't find \"", app, "\" in json file.")
        return

    if install_mode == 'single':
        if os.environ["VBESUDO"] == '1':
            tmp = input("install to system? or local.\n[\033[5;32;40mY\033[0m/n]")
            if tmp == 'n':
                install_dir = 'local'
            else:
                install_dir = 'system'

            tmp = input("install follow app ALL same?\n[\033[5;32;40mY\033[0m/n]")
            if tmp == 'y' or tmp == 'Y' or tmp == '':
                install_mode = 'all'

        else:
            install_mode = 'all'
            install_dir = 'local'
            print ("\033[31;40monly support local install!\033[0m")

    ins = Install(app, fjson, install_dir)

    # check is have
    if ins.check_installed() == True:
        return

    # try:
    for i in ins.depend():
        print ('depend on ', i)
        inst(i, fjson)
    # except:
    #     print ("\033[31;40mcan't install \"", app, "\", some depend failed to installed!\033[0m")
    #     return

    # select install method
    ins.by()

    # install:
    # try:
    print ('\033[33;40m(' + install_dir + ') installing...: ', app, "\033[0m")
    ins.install()
    # except:
    #     print ("can't install \"", app, "\", failed!")
    #     return

def main():
    # file_in = open("a.json")
    file_in = open(os.environ.get('VGL_DATA') + "/tools.json")
    fjson = json.loads(file_in.read())
    file_in.close()

    apps_list = sys.argv
    apps_list.pop(0)

    print ('\033[32;40mrequest install: ', apps_list, '\033[0m')
    for i in apps_list:
        inst(i, fjson)

if __name__ == '__main__':
    main()

