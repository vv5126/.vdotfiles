#!/bin/bash

. ~/.bin/lib/lib.misc
. ~/.bin/ini/ini.work
. ~/.bin/lib/lib.work
. ~/.bin/lib/lib.shdb

# function get_session_start() {
#         local file="$1"
#         local session_name="$2"
#         local session_line=''

#         session_line="$(sed -n "/^\["$session_name"/=" "$file")"
#         [ -z "$session_line" ] && echo 'new_session' || echo $session_line
# }

# function get_session_end() {
#         local file="$1"
#         local session_name="$2"
#         local session_line_start="$(get_session_start "$file" "$session_name")"
#         local session_lines="$(sed -n '/^\[/=' "$file")"
#         local got_line=0
#         local tmp

#         for tmp in ${session_lines[@]}; do
#             [ "$got_line" -eq 1 ] && { echo $(($tmp-1)); return 0; }
#             [ "$session_line_start" == "$tmp" ] && got_line=1
#         done
#         echo "$(wc -l $file | awk '{print $1}')"
#         return 0
# }

# function deal() {
#     key_frist_location="$(get_key_frist_location "$f_cfg_name" "policy0" "enabled")"
#     sed -i "$key_frist_location s/.*/enabled=1/" $f_cfg_name

#     new_target="$target_dir/$target_name"
#     key_frist_location="$(get_key_frist_location "$f_cfg_name" "policy0" "attribute")"
#     sed -i "$key_frist_location s/.*/attribute=$new_target/" $f_cfg_name
# }

function processBar()
{
    local now=$1
    local all=$2
    local percent=`awk BEGIN'{printf "%f", ('$now'/'$all')}'`
    local len=`awk BEGIN'{printf "%d", (100*'$percent')}'`
    printf "\r \e["$bar_color"m%${len}s \e[00m%$[100-len]s %.2f%%" "" "" $len
}

function analysis_and_get() {
    eval $(ssh $VLOCALSSH "cat ~/.cloner/.cloner_info")
    d_cfgs="$CLONER_DIR/$cloner_version/configs"
    scp "$VLOCALSSH:$d_cfgs/$f_platform_name" . >/dev/null
    local cfg_name="$(sed -n -e 's/^board=//p;' $f_platform_name)"
    local cfg_file="$(ssh $VLOCALSSH "find "$d_cfgs" -name $cfg_name")"
    scp "$VLOCALSSH:$cfg_file" "$f_cfg_name" >/dev/null

    # key_frist_location="$(get_key_frist_location "$f_platform_name" "current" "board")"
    # sed -i "$key_frist_location s/.*/board=$f_cfg_name/" $f_platform_name
    sed -i "s/^board=.*/board=$f_cfg_name/1" $f_platform_name
}

function correct_cfg() {
    local attribute=($(sed -n -e 's/^attribute=//p;' $f_cfg_name))
    local enabled=($(sed -n -e 's/^enabled=//p;' $f_cfg_name))
    local label=($(sed -n -e 's/^label=//p;' $f_cfg_name))

    num=0
    for i in $(sed -n -e '/^\[policy[0-9].*\]/p;' $f_cfg_name); do
	if [ -n "${label[$num]}" ] && [ -n "${attribute[$num]}" ]; then
	    [ "${enabled[$num]}" -eq 1 ] && str="$str ${label[$num]} ${attribute[$num]#*boards/} on" \
					|| str="$str ${label[$num]} ${attribute[$num]#*boards/} off"
	fi
	((num+=1))
    done

    dialog --backtitle "Checklist" --checklist "select the line you want to burn" 20 120 40 $str 2> .tmp_bn
    clear
    sel="$(cat .tmp_bn)"
    rm .tmp_bn

    for i in $(sed -n -e 's/^label=//p;' $f_cfg_name); do
	line_num="$(($(sed -n "/label=$i/=" $f_cfg_name)-1))"
	if [[ "$sel" =~ "$i" ]]; then
	    sed -i "$line_num s/^enabled=.*/enabled=1/" $f_cfg_name
	else
	    sed -i "$line_num s/^enabled=.*/enabled=0/" $f_cfg_name
	fi
    done
}

function restore() {
    ssh $VLOCALSSH "cp .local/$f_platform_name $d_cfgs" &
}

function set_burn_type() {
    burner="
	# [burner]
	cloner_version="$cloner_version"
    "
    shdb -f ".project_info" -a "$burner"
}

function start_burner() {
    local core='bin/32bit/core_32'

    # backup old
    trap restore 1 2 3 15
    ssh $VLOCALSSH "cp $d_cfgs/$f_platform_name .local/"
    # scp new.
    soc="$(sed -n -e 's/^platform=.*,//' -e 's/\"$//p;' $f_platform_name)"
    scp "$f_cfg_name" "$VLOCALSSH:$d_cfgs/$soc" >/dev/null
    scp "$f_platform_name" "$VLOCALSSH:$d_cfgs" >/dev/null

    # burner
    ssh $VLOCALSSH "killall core_32" 2>/dev/null

    ssh -X $VLOCALSSH "cd "$CLONER_DIR"/"$cloner_version"; "./$core" 2>&1" | while read line; do
	[ "$line" == 'start burner' ] && echo -e "info start"
	[ "$line" == 'delete 0 sucess' ] && { echo -e "info done"; bar_color=${color[$((RANDOM%7+1))]}; }

	if [[ "$line" =~ '(int)message:' ]]; then
	    if [[ "$line" =~ ':6:' ]]; then
		line="${line##*:6:}"; line="${line%%;*}"
		echo -e "process $line"
	    fi
	elif [[ "$line" =~ '(string)message:' ]]; then
	    line="${line##*:}"
	    echo -e "info ${line%%;*}"
	fi
    done

}

function show_msg() {
    while read line; do
	if [ "${line%% *}" == 'info' ]; then
	    echo -e "\n${line#* }"
	elif [ "${line%% *}" == 'process' ]; then
		processBar "${line#* }" 100
	fi
    done
}

# main
# goto project root directory if possible.
cd_proj
[ ! -f ".pro" ] && exit

[ -f ".project_info" ] && source .project_info || { echo no project info!; exit; }

f_platform_name="platforms.cfg"
f_cfg_name="$feature-$project_type.cfg"
d_cfgs="$CLONER_DIR/$cloner_version/configs"

if [ ! -f "$f_platform_name" ]; then
    # frist, get info form ..., scp config form ...
    # gen_new_config and info.
    analysis_and_get

    # show a select to config
    correct_cfg

    # up .project_info
    set_burn_type
    echo init done
else
    # show a select to config
    [[  "$#" -eq 1 && "$1" != "vim" ]] && { correct_cfg; exit; }
fi

if [[  "$#" -eq 1 && "$1" == "vim" ]]; then
    start_burner >&1
else
    color=($(seq 40 47))
    bar_color=${color[$((RANDOM%7+1))]}
    start_burner | show_msg
fi
