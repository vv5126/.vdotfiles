#!/bin/bash

source ~/.bin/lib/lib.base
source ~/.bin/lib/lib.work
source ~/.bin/lib/lib.misc

APP_DIR=$(which $0)
APP_DIR=${APP_DIR%\/*}

function get_project_source_path() {
        cd .repo/manifests
	local warehouse=`git remote -v | head -2 | tail -1 | awk '{print $2}'`
        local moudle="$(ls default.xml -l)"
        moudle="${moudle##* }"
        branch="$(git branch -a | sed -n '/->/p;')"
        branch="${branch##*-> }"
        branch="${branch##*/}"
        echo repo init -u $warehouse -b $branch -m $moudle
}

function git_push() {
        local branch
	local warehouse=`git remote -v | head -2 | tail -1 | awk '{print $1}'`
        branch="$(git branch | sed -n '/^\*/p')"
        if [[ "$branch" =~ '(' || "$branch" =~ ' default' ]]; then
                branch="$(git branch -a | sed -n '/->/p')"
                branch=${branch##*-> }
                branch=${branch#*/}
        else
                branch=${branch##* }
                # branch=${branch##*/}
        fi
                echo git push $warehouse HEAD:refs/for/refs/heads/$branch
                git push $warehouse HEAD:refs/for/refs/heads/$branch

}
function make_git_push_file() {
	local file
	local mark
        local branch
	> git-push.sh
	chmod +x git-push.sh
	git status -s | {
		while read line; do
			[ -n "$line" -a "${line% *}" != "D" ] && {
				line=${line##* }

				file=$line
				[ "${file:0-1}" == "/" ] && file=${file%/*}
				file=${file##*/}

				mark=1
				while read ignore; do
					[ "$file" == "$ignore" ] && { mark=0; break; }
				done < "$APP_DIR/.gt_ignore"

				[ "$mark" -eq 1 ] && echo "git add $line" >> git-push.sh
			}
		done
	}

	echo -e >> git-push.sh
	echo git commit -m "\"xxx\"" >> git-push.sh

	local warehouse=`git remote -v | head -2 | tail -1 | awk '{print $1}'`
        git branch -a | {
                while read line; do
                        [[ "$line" =~ "->" ]] && {
                                branch=${line##*-> }
                                branch=${branch##*/}
	                        echo git push $warehouse HEAD:refs/for/refs/heads/$branch >> git-push.sh
                        }
                done
        }
}

function git_bak_list() {
	local BAKDIR=''
	BAKDIR=${1%\/*}/git_bak/${1##*\/}
	cd $BAKDIR
	ls -F | grep /$ | {
		while read line; do
			echo ${line%/*}
		done
	}
	exit
}

function git_cover() {
	local BAKDIR=''
	BAKDIR=${1%\/*}/git_bak/${1##*\/}/$2
	if [ -d "$BAKDIR" ];then
		cp -rf $BAKDIR/* $1
	else
		echo "NO BAKDIR"
	fi
	exit
}

function git_bak() {

        cd_proj

	local bakdir="$1"
	local file=''
	local dir_t=''
	local line=''
	local num=0

        echo "baking project: $PWD"
        echo -n "to $bakdir ...... "

	if [ -d "$bakdir" ]; then
                rm $bakdir -rf
	fi
        mkdir -p "$bakdir"

        git status -s > .tmp-git-bak
        while read line; do
                sign="$(get_segment_from_line "x$line" 1)"
                file="$(get_segment_from_line "x$line" 2)"
                case "$sign" in
                        "x??" | "xM")
                                [[ "$file" =~ "/" ]] && {
                                        dir_t=${file%/*} && mkdir -p $bakdir/$dir_t
                                        [ ${file:0-1} = "/" ] && cp -rf $file/* $bakdir/$dir_t/ || cp $file $bakdir/$dir_t
                                } || {
                                        [ -e "$file" ] && cp $file $bakdir
                                }
			        num=$[$num+1]
                        ;;
                        "xD")
                        ;;
                esac
        done < .tmp-git-bak
        rm .tmp-git-bak

        echo "cp $num files, finished!"

}

project_uncare=(
external/
)

function skip_check() {
        for i in ${project_uncare[@]}; do
                [[ "$line" =~ "$i" ]] && { echo 1; return; }
        done
        echo 0
}

function repo_bak() {
        local bak_dir="$1"
        local proj_dir="$PWD"
        local proj_dir_name="${proj_dir##*/}"
        local subproj_dir=
        repo status > ~/.tmp/gt-tmp
        while read line; do
                if [ "${line%% *}" == 'project' ]; then
                        if [ $(skip_check "$line") -eq 0 ]; then
                                line=${line#* }
                                subproj_dir=${line%% *}
                                cd $proj_dir/$subproj_dir
                                git_bak "$bak_dir/$proj_dir_name/$subproj_dir"
                        fi
                fi
        done < ~/.tmp/gt-tmp
        rm ~/.tmp/gt-tmp
        # tar -Pzcf "$bak_dir.tar.gz" "$bak_dir"
}

cd_proj

if [ $# -gt 0 ];then
        if [ -d ".repo" ]; then
                case "$1" in
                        'bak')
                                source .project_info
                                [ -n "$customer" ] && repo_bak "/data1/home/wgao/work/project-bak/$customer" "mode0" || echo customer is empty!
                                ;;
                        'co')
                                repo forall -c "git checkout ."
                                ;;
                        'br')
                                repo branch
                                ;;
                        'rst')
                                [ $# -eq 2 ] && repo forall -c "git reset --hard $2"
                                ;;
                        'st')
                                repo status
                                ;;
                        'tag')
                                git --git-dir .repo/manifests/.git/ tag
                                ;;
                        'l')
                                get_project_source_path
                                ;;
                        *)
                                repo "$@"
                                ;;
                esac
        elif [ -d ".git" ]; then
                case "$1" in
                        'push')
		                git_push
                                ;;
                        'baklist')
		                git_bak_list $PWD
                                ;;
                        'cover')
		                [ $# -eq 2 ] && git_cover $PWD $2
                                ;;
                        'tag')
                                git tag | grep ingenic
                                ;;
                        'bak')
                                BAKDIR=${PWD%\/*}/git_bak/${PWD##*\/}/${PWD##*\/}_$(date +%Y%m%d_%H-%M)
                                [ $# -eq 2 ] && BAKDIR=$BAKDIR-$2 || BAKDIR=$BAKDIR-no-up-git-push-file
                                git_bak $BAKDIR
                                ;;
                        *)
                                git "$@"
                                ;;
                esac
        fi
fi

exit
