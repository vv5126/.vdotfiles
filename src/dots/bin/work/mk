#!/bin/bash

# feature #
# 1 add make system.
# 2.check kernel version.
# 3.add creat new project.

source ~/.bin/lib/lib.base
source ~/.bin/lib/lib.work
source ~/.bin/lib/lib.misc

function try_get_obj()
{
    local tmp="$(guess_obj)"
    [ "${tmp%% *}" != "unknown" ] && eval echo "$(jp -e "mk_sub" -e "${tmp%% *}" < $VGL_JSON_FILE)"
}

function checkver()
{
        [ -f 'Makefile' ] && {
                eval $(head 'Makefile' -n 3 | sed 's/ //g')
                echo version = $VERSION'.'$PATCHLEVEL'.'$SUBLEVEL >&2
        }
}

function mkinit()
{
        local dest=$(try_get_obj)
        rm -rf .pro && mkdir .pro

        # only for mozart now
        [ "$dest" == 'mzt.sh' -a -d "mozart" ] && cd mozart

        local project_list="$(jp -e mk_sub -k < $VGL_JSON_FILE)"
        [ -z "$dest" ] && dest=$(user_select 'what project type do you want init' "${project_list[@]}")

	if [ ! -f ".pro/.$dest" ]; then
                cp "$VGLD_MKDATA/$dest" ".pro/.$dest"
                ./.pro/".$dest" init
        else
                return 1
        fi
}

function mkn()
{
	local tmp=

        [ 'x'$(cat $HOME/work/hub/.working_state) == 'x1' ] && { echo 'project syncing! Please wait little time~' >&2; exit; }

        (cd $HOME/work/hub; ls_dir 1 > .project_dir_have)

        local dest=$(showlist_with_value "$HOME/work/hub/.project_dir_have" "Please chosen one project:")
	if [ -n "$dest" ]; then
                tmp=$dest\_$(date +%Y%m%d_%H%M)
                echo -n "copying ......"
                cp -arpdl $HOME/work/hub/$dest $tmp
                echo " done."
                cd $tmp && mk
        fi
}

function tagbuild() {
    find . -name '*.cc' -o -name '*.h' -o -name '*.c' > '/tmp/.cs_db'
    cscope -bkq -i '/tmp/.cs_db'
    # find . -name '*.cc' -o -name '*.h' -o -name '*.c' > 'cscope.files'
    # cscope -bkq
    # echo gen cscope done!
    # ctags -L /tmp/.cs_db
    [ -f 'tags' ] || ctags -R --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q
    # echo gen tag done!
}

function mkmain() {
        # try find the a.sh and run.
        local A_DIR="$(getdir a.sh)"
        [ -f "$A_DIR/a.sh" ] && { cd $A_DIR && chmod +x a.sh && ./a.sh; return 0; }

        # try find the Build.mk and run mma.
        local BUILD_DIR="$(getdir Build.mk)"
        [ -d "$BUILD_DIR" ] && { cd $BUILD_DIR && mma1; return 0; }

        # goto project root directory if possible.
        cd_proj

        # creat new project
        get_param '-c' $@
        [ $? -eq 0 ] && { mkn; return 0; }

        # creat tag
        get_param '-t' $@
        [ $? -eq 0 ] && { tagbuild; return 0; }

        # check kernel version.
        get_param '-v' $@
        [ $? -eq 0 ] && { checkver; return 0; }

        # project init a make system.
	[ ! -f ".pro/project_info" ] && { mkinit && echo "init ok" >&2; return 0; }

        value=$(find .pro -name '.*.sh')
	if [ -n "value" ]; then
		# echo "this's maybe a $key project" >&2
		./$value $@
		return 0
	else
		echo "NO PROJECT DIR" >&2
		return 1
	fi
}

mkmain $@
