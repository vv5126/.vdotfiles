#!/bin/bash

# feature #
# 1 add make system.
# 2.check kernel version.
# 3.add creat new project.

source ~/.bin/lib/lib.base
source ~/.bin/lib/lib.work
source ~/.bin/lib/lib.misc

function try_get_obj()
{
        source $1
        # kernel
        [ -d "arch" -a -d "kernel" ] && { echo $kernel; return; }
        # uboot
        [ -d "arch" -a -d "spl" ] && { echo $uboot; return; }
        # mozart
        [ -d "mozart" ] && { echo $mozart; return; }

        if [ -d ".git" ]; then
            # mozart
            [ -n "$(git remote -v | grep -io 'mozart')" ] && { echo $mozart; return; }
        fi

        if [ -d ".repo" ]; then
                cd .repo/manifests
        # manhattan
                [ -n "$(git remote -v | grep -io 'manhattan')" ] && { echo $manhattan; return; }
        fi
}

function checkver()
{
        [ -f 'Makefile' ] && {
                eval $(head 'Makefile' -n 3 | sed 's/ //g')
                echo version = $VERSION'.'$PATCHLEVEL'.'$SUBLEVEL >&2
        }
}

function mkinit()
{
        DEST=$(try_get_obj "$VGLD_MKDATA/cfg")
        [ -z "$DEST" ] && DEST=$(showlist_with_value "$VGLD_MKDATA/cfg" "what project type do you want init")
	if [ ! -f ".$DEST" ]; then
                cp "$VGLD_MKDATA/$DEST" ".$DEST"
                ./".$DEST" init
        else
                return 1
        fi
}

function mkn()
{
	local tmp=

        [ 'x'$(cat $HOME/work/hub/.working_state) == 'x1' ] && { echo 'project syncing! Please wait little time~' >&2; exit; }

        (cd $HOME/work/hub; ls_dir 1 > .project_dir_have)

        DEST=$(showlist_with_value "$HOME/work/hub/.project_dir_have" "Please chosen one project:")
	if [ -n "$DEST" ]; then
                tmp=$DEST\_$(date +%Y%m%d_%H%M)
                echo -n "copying ......"
                cp -arpdl $HOME/work/hub/$DEST $tmp
                echo " done."
                cd $tmp && mk
        fi
}

function mkmain() {
        # goto project root directory if possible.
        cd_proj

        # creat new project
        get_param '-c' $@
        [ $? -eq 0 ] && { mkn; return 0; }

        # check kernel version.
        get_param '-v' $@
        [ $? -eq 0 ] && { checkver; return 0; }

        # project init a make system.
	[ ! -f ".project_info" ] && { mkinit && echo "init ok" >&2; return 0; }

	local value=
	local key=
	while read line; do
		if [ -f ".${line#*=}" ]; then
			value=".${line#*=}"
			key=${line%%=*}
			break
		fi
	done < "$VGLD_MKDATA/cfg"

	if [ -n "value" ]; then
		# echo "this's maybe a $key project" >&2
		./$value $@
		return 0
	else
		echo "NO PROJECT DIR" >&2
		return 1
	fi
}

mkmain $@
