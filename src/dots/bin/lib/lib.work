#!/bin/bash

source ~/.bin/lib/lib.list

function get_c_from_gcc() {
    grep -oP '\b[^ ,]*\.c\b' $1 >&1
}

function get_h_from_gcc() {
    grep -oP '\b[^ ]*\.h\b' $1 >&1
}

function get_h_from_include() {
    cat $1 | xargs find - >&1
}

function get_include_from_gcc() {
    grep -oP '(?<=-I)[^ ]*\b' $1 | sed 's/\"//g' >&1
}

function get_h_from_c() {
    sed -n '/.c$/p;' $1 | while read line; do
        # dir="${line%/*}"
        sed -n '/^#inc.*\"$/s/#include "//p;' $line | sed 's/.$//g' | sed 's?.*?'${line%/*}'/&?' >&1
    done
}

function guess_obj()
{
        # kernel
        [ -d "arch" -a -d "kernel" ] && { echo "kernel"; return; }
        # uboot
        [ -d "arch" -a -d "spl" ] && { echo "uboot"; return; }

        if [ -d ".repo" ]; then
                cd .repo/manifests
        # manhattan
                [ -n "$(git remote -v | grep -io 'manhattan')" ] && { echo "manhattan"; return; }
        # android
                [ -n "$(git remote -v | grep -io 'mipsia/platform')" ] && { echo "android"; return; }
        fi
}

function get_project_base_info(){
        local task_type_list="
                fix_bug
                add_new
                customer
        "
        local customer_list="$(cd $HOME/work/customer; ls_dir 1)"

        task_type=$(user_select 'project type is' "$task_type_list")

        if [ "$task_type" == 'customer' ]; then
                customer="$(user_select 'have we got the customer ??' "$customer_list" 1)"
        fi

        echo -n "what\'s the feature:  >>> "
        read feature
        feature="$feature"_"$(date +%Y%m%d_%H%M)"
}

function mktag(){
	local TARGET=
	TARGET=$(getdir .git)
	[ -n "$TARGET" ] && cd $TARGET
	[ $# -eq 1 ] && [ $1 == "up" ] && {
		ctags -R * #-exclude "arm"
		return
	}
	[ -f "tags" ] && {
		echo 
		echo -e " \e[40;33m"found TAGS : $PROJECT_DIR/tags"\033[0m"
		echo 
	} || {
		ctags -R * #-exclude "arm"
		return
	}
}

function mklist(){
	local DIR=
	local LISTFILE='list'
	local BAKDIR=`pwd`
	local line=''
	local NUM=0

	[ $# -eq 1 ] && [ -f $1 ] && LISTFILE=$1
	[ -f "$LISTFILE" ] || { echo no listfile; echo 'listdir=xxx' > $LISTFILE; echo '#put the opposite dir' >> $LISTFILE; return; }
	read line < $LISTFILE
	[[ $line =~ "=" ]] && [ -d "${line##*=}" ] && BAKDIR=${line##*=} || echo "${line##*=}"
	#BAKDIR=_$(date +%Y-%m-%d_%H-%M)
	echo BAKDIR = $BAKDIR
	echo LISTFILE = $LISTFILE

	while read line; do
		if [ "${line:0:1}" = "#" ]; then
			echo "jump ${line:1}"
		elif [ -d "$line" ]; then
			mkdir -p $BAKDIR/$line
			cp -r $line/* $BAKDIR/$line/
			NUM=$[$NUM+1]
		elif [ -f "$line" ]; then
			mkdir -p $BAKDIR/${line%/*}
			cp $line $BAKDIR/${line%/*}/
			NUM=$[$NUM+1]
		fi
	done < "$LISTFILE"
	echo "list mk done! total $NUM. "
}

function getdir_project(){

local COMP_DIR=~/
local BASE_DIR=$PWD
local DIR=$BASE_DIR
local PROJECT_DIR_NAME=
local PROJECT_DIR=

while [ "$COMP_DIR" != "$DIR/" ];do
	if [ -f "$DIR/.k.sh" ]; then
		PROJECT_DIR_NAME='KERNEL_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.u.sh" ]; then
		PROJECT_DIR_NAME='UBOOT_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.a.sh" ]; then
		PROJECT_DIR_NAME='ANDROID_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.t.sh" ]; then
		PROJECT_DIR_NAME='TIZEN_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.m.sh" ]; then
		PROJECT_DIR_NAME='MODELE_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.app.sh" ]; then
		PROJECT_DIR_NAME='NORMAL_DIR'
		PROJECT_DIR=$DIR
		break
	else
		PROJECT_DIR_NAME=
		PROJECT_DIR=
	fi
	DIR=${DIR%\/*}
done

echo "$PROJECT_DIR_NAME $PROJECT_DIR"

}


############# will export ##############

# case $(ps -q $$ -o comm=) in
#     'zsh')
#         ;;
#     *)
#         export -f mktag
#         export -f mklist
#         export -f getdir_project
#         ;;
# esac

########### will export end ############
