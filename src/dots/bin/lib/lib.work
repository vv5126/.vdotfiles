#!/bin/bash

source ~/.bin/lib/lib.list

function mm1 {
    unalias mm
    type mm >/dev/null 2>&1
    [ "$?" -eq 0 ] && mm | tee /tmp/.mk_tmp || {
        cd_repo
        source build/envsetup.sh >/dev/null 2>&1
        [ -f ".pro/project_info" ] && source .pro/project_info
        if [ -n "$lunch_num" ]; then
            echo $lunch_num > .pro/.lunch
            lunch < .pro/.lunch
            rm .pro/.lunch
        else
            lunch
        fi
        cd -
        cddir Build.mk
        [ "$?" -eq 0 ] && mm | tee /tmp/.mk_tmp
        cd -
    }
    alias mm='mm1'
    # local str="$(grep 'make completed successfully' /tmp/.mk_tmp)"
    # [ -n "$str" ] && str="$(sed -n '')"
}

function mma1 {
    unalias mma
    type mma >/dev/null 2>&1
    [ "$?" -eq 0 ] && mma || {
        cd_repo
        source build/envsetup.sh >/dev/null 2>&1
        [ -f ".pro/project_info" ] && source .pro/project_info
        if [ -n "$lunch_num" ]; then
            echo $lunch_num > .pro/.lunch
            lunch < .pro/.lunch
            rm .pro/.lunch
        else
            lunch
        fi
        cd -
        cddir Build.mk
        [ "$?" -eq 0 ] && mma | tee /tmp/.mk_tmp
        cd -
    }
    alias mma='mma1'
}

function get_c_from_gcc() {
    grep -oP '\b[^ ,]*\.c\b' $1 >&1
}

function get_h_from_gcc() {
    grep -oP '\b[^ ]*\.h\b' $1 >&1
}

function get_h_from_include() {
    cat $1 | xargs find - >&1
}

function get_include_from_gcc() {
    grep -oP '(?<=-I)[^ ]*\b' $1 | sed 's/\"//g' >&1
}

function get_h_from_c() {
    sed -n '/.c$/p;' $1 | while read line; do
        # dir="${line%/*}"
        sed -n '/^#inc.*\"$/s/#include "//p;' $line | sed 's/.$//g' | sed 's?.*?'${line%/*}'/&?' >&1
    done
}

function guess_obj() {
    local project_type project_path
    source ~/.bin/lib/lib.base

    # other: have a.sh
    local dir=$(getdir a.sh)
    [ -n "$dir" ] && { project_type="other"; project_path="$dir"; }

    if [ -z "$project_type" ]; then
        cd_proj
        if [ $? -eq 0 ]; then

            if [ -z "$project_type" -a -d ".git" ]; then
                # rootfs

                # mozart
                [ -z "$project_type" -a -n "$(git remote -v | grep -io 'mozart')" ] && project_type="mozart"

                # kernel
                [ -z "$project_type" -a -d "arch" -a -d "kernel" ] && project_type="kernel"

                # uboot
                [ -z "$project_type" -a -d "arch" -a -d "spl" ] && project_type="uboot"
            fi

            if [ -z "$project_type" -a -d ".repo" ]; then
                cd .repo/manifests

                # manhattan
                [ -z "$project_type" -a -n "$(git remote -v | grep -io 'manhattan')" ] && project_type="manhattan"

                # android
                [ -z "$project_type" -a -n "$(git remote -v | grep -io 'mipsia/platform')" ] && project_type="android"
            fi

            [ -n "$project_type" ] && project_path="$PWD"
        fi
    fi

    # unknown
    [ -z "$project_type" ] && project_type="unknown"

    [ "x$1" == "x-a" ] && echo "$project_type $project_path" || echo "$project_type"

    [ "$project_type" == "unknown" ] && return -1 || return 0
}

function get_project_base_info() {
        local task_type_list="
                fix_bug
                add_new
                customer
        "
        local customer_list="$(cd $HOME/work/customer; ls_dir 1)"

        task_type=$(user_select 'project type is' "$task_type_list")

        if [ "$task_type" == 'customer' ]; then
                customer="$(user_select 'have we got the customer ??' "$customer_list" 1)"
        fi

        echo -n "what\'s the feature:  >>> "
        read feature
        # feature="$feature"_"$(date +%Y%m%d_%H%M)"
}

function mktag() {
	local TARGET=
	TARGET=$(getdir .git)
	[ -n "$TARGET" ] && cd $TARGET
	[ $# -eq 1 ] && [ $1 == "up" ] && {
		ctags -R * #-exclude "arm"
		return
	}
	[ -f "tags" ] && {
		echo 
		echo -e " \e[40;33m"found TAGS : $PROJECT_DIR/tags"\033[0m"
		echo 
	} || {
		ctags -R * #-exclude "arm"
		return
	}
}

############# will export ##############

# case $(ps -q $$ -o comm=) in
#     'zsh')
#         ;;
#     *)
#         export -f mktag
#         ;;
# esac

########### will export end ############

[[ "${0##*/}" =~ "lib.work" ]] && $@
