# shell文本数据库操作
# shdb_add shdb_name $para
# para: -a add; -g get the key line; -d delete;

source ~/.bin/lib/lib.misc
source ~/.bin/lib/lib.base

debug=0

function key_name() {
    local tmp
    tmp="${1%%=*}"
    echo "${tmp##* }"
}

function shdb_format() {
    local file="$1"
    local line_num=''
    local num=0
    local buf1='buf1'
    local buf2='buf2'
    local buf3='buf3'

    sed 's/[^\ ]*=[^\ ]*/&\n/g' -i $file #有=即换行
    sed -nr 'H;${g;s/\n{3,}/\n\n/g;p;q}' -i $file # 去多换行
    # sed -nr '/[^\ ]=[^\ ]/{x;/[^ ]=[^ ]/a\n;}' test

    while read line; do
        ((num+=1))
        buf3="$buf2"; buf2="$buf1"; buf1="$line"
        [ -z "$(key_name "$buf2")" -a "$(key_name "$buf1")" == "$(key_name "$buf3")" ] && sed "$((num-=1))d" -i $file
    done < $file
    sed -e '1d' -e '$d' -i $file
}

function get_session_start() {
        local file="$1"
        local session_name="$2"
        local session_line=''

        session_line="$(sed -n "/^# \["$session_name"/=" "$file")"
        [ -z "$session_line" ] && echo 'new_session' || echo $session_line
}

function get_session_end() {
        local file="$1"
        local session_name="$2"
        local session_line_start="$(get_session_start "$file" "$session_name")"
        local session_lines="$(sed -n '/^# \[/=' "$file")"
        local got_line=0
        local tmp

        for tmp in ${session_lines[@]}; do
            [ "$got_line" -eq 1 ] && { echo $(($tmp-1)); return 0; }
            [ "$session_line_start" == "$tmp" ] && got_line=1
        done
        echo "$(wc -l $file | awk '{print $1}')"
        return 0
}

function get_session_context {
    local file="$1"
    local session_name="$2"
    local session_start_location=$(get_session_start "$file" "$session_name")
    local session_end_location=$(get_session_end "$file" "$session_name")
    echo "$(sed -n ""$session_start_location","$session_end_location"p" $file)"
}

function get_key_location {
        local file="$1"
        local session_name="$2"
        local key_name="$3"
        local key_lines="$(sed -n "/$key_name\=/=" "$file")"
        local session_start_location=$(get_session_start "$file" "$session_name")
        local session_end_location=$(get_session_end "$file" "$session_name")
        local tmp
        local ret=''

        [ "$session_start_location" == "new_session" ] && return
        for tmp in $key_lines; do
            if [ "$tmp" -gt "$session_start_location" -a "$tmp" -lt "$session_end_location" ]; then
                ret="$ret $tmp"
            fi
        done
        echo "${ret:1}"
}

function get_key_frist_location {
        local file="$1"
        local session_name="$2"
        local key_name="$3"
        local lines="$(get_key_location "$file" "$session_name" "$key_name")"
        [ -n "$lines" ] && echo "${lines%% *}"
}

function get_key_last_location {
        local file="$1"
        local session_name="$2"
        local key_name="$3"
        local lines="$(get_key_location "$file" "$session_name" "$key_name")"
        [ -n "$lines" ] && echo "${lines##* }"
}

function shdb_add() {
    local current_line=0
    local lines=0

    local session_name=''
    local new_session_buffer=''
    local old_session_buffer=''
    local session_start_location=0

    local line=""
    local session_end_location=0
    local notes=""
    local line_num=
    local key=
    local num=0
    local key_line_num=
    local shdb="$1"
    local str="$2"
    [ $# -eq 3 ] && line_num=$3

    lines="$(echo "$str" | tr -cd '\n' | wc -c)"

    echo "$str" | while read line; do

        ((current_line+=1))

        [ "$line" == "" -a "$current_line" == 1 ] && continue

        if [ "${line:0:3}" == '# [' ]; then
            session_name="${line##*\[}"
            session_name="${session_name%%\]*}"
            session_start_location=$(get_session_start "$shdb" "$session_name")
            session_end_location=$(get_session_end "$shdb" "$session_name")
            debug echo session_name "$session_name" , start $session_start_location, end $session_end_location.

            if [ -n "$new_session_buffer" ]; then
                sed "$session_end_location i$new_session_buffer" -i $shdb
                new_session_buffer=''
            fi

            if [ "$session_start_location" == "new_session" ]; then
                new_session_buffer="$line\n"
            fi
        else
            if [ "$session_start_location" == "new_session" ]; then
                [ "$line" == "" ] && new_session_buffer="$new_session_buffer\n" || new_session_buffer="$new_session_buffer$line\n"
            else
                if [[ ("$line" =~ '=') && (! "$line" =~ ' =') && (! "$line" =~ '= ') ]]; then
                    session_end_location=$(get_session_end "$shdb" "$session_name")
                    debug echo "key $line"
                    key_name="${line%%=*}"
                    key_name="${key_name##* }"
                    key_value="${line##*=}"

                    if [ -n "$(get_key_location "$shdb" "$session_name" "$key_name")" ]; then
                        # had key
                        local key_frist_location="$(get_key_frist_location "$shdb" "$session_name" "$key_name")"
                        local key_last_location="$(get_key_last_location "$shdb" "$session_name" "$key_name")"

                        if [[ "$(get_session_context $shdb $session_name)" =~ "$key_name=$key_value" ]]; then
                            sed "$session_start_location,$session_end_location s/$key_name=$key_value/$line/" -i $shdb
                        else
                            if [ ${line:0:1} != '#' ]; then
                                # annotation all key
                                sed "$session_start_location,$session_end_location s/^$key_name=/# $key_name=/" -i $shdb
                                sed ""$key_last_location" "a$line"" -i $shdb
                            else
                                sed ""$key_frist_location" "i$line"" -i $shdb
                            fi
                        fi

                        if [ -n "$old_session_buffer" ]; then
                            # debug echo old_session_buffer = $old_session_buffer
                            sed "$key_frist_location i$old_session_buffer" -i $shdb
                        fi
                        # if [ -n "$(sed -n ""$session_start_location","$session_end_location"p" $shdb | grep ^${line%%=*}= -)" ]; then
                        #     sed "$session_start_location,$session_end_location s/${line%%=*}=.*/$old_session_buffer$line/" -i $shdb
                        # fi
                    else
                        debug echo new key
                        sed "$session_end_location a$old_session_buffer$line\n" -i $shdb
                    fi
                    old_session_buffer=''
                else
                    debug echo unkey $line
                    if [ -n "$old_session_buffer" ]; then
                        if [ -n "$line" ]; then
                            old_session_buffer="$old_session_buffer\n$line"
                        else
                            old_session_buffer="$old_session_buffer\n"
                        fi
                    elif [ -n "$line" ]; then
                            old_session_buffer="$line"
                    fi
                fi
            fi
        fi

        if [ "$current_line" -eq "$lines" ]; then
            if [ -n "$old_session_buffer" ]; then
                sed "$ a$old_session_buffer" -i $shdb
                old_session_buffer=''
            fi
            if [ -n "$new_session_buffer" ]; then
                sed "$ a$new_session_buffer" -i $shdb
                new_session_buffer=''
            fi
        fi
    done
    return 0
}

function shdb_del() {
    local file="$1"
    local session_name="$2"
    local key="$3"
    local line=
    local session_start_location=$(get_session_start "$file" "$session_name")
    local session_end_location=$(get_session_end "$file" "$session_name")

    if [ $# -eq 2 ]; then
       [ "$session_start_location" != "new_session" ] && sed "$session_start_location,$session_end_location d" -i $file
    else
        sed "$session_start_location,$session_end_location {/$key=/d}" -i $file
    fi
    shdb_format $file

    return 0
}

function shdb() {
    [ $# -eq 0 ] && { echo "need param"; return -1; }

    shdb="$(get_param '-f' "$@")" # file

    if [ ! -f "$shdb" ]; then
        [[ "$shdb" =~ '/' ]] && mkdir -p "${shdb%%/*}"
        echo "" > $shdb
    fi

    str="$(get_param '-a' "$@")" # add
    if [ $? -gt 0 -a $? -lt 100 ]; then
        line=$(get_param '-l' $@)
        if [ $? -gt 0 -a $? -lt 100 ]; then
            shdb_add "$shdb" "$str" "$line"
         return $?
        else
            shdb_add "$shdb" "$str"
         return $?
        fi
    fi

    str="$(get_param '-g' "$@")" # get the line
    [ $? -gt 0 -a $? -lt 100 ] && { get_session_start "$shdb" "$str"; return $?; }

    str="$(get_param '-d' "$@")" # del
    [ $? -gt 0 -a $? -lt 100 ] && { shdb_del "$shdb" $str; return $?; }

}
