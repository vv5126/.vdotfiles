#!/bin/bash

# 反转上一次操作
function ccd(){
        for i in {1..3}; do
                local try_old_dir="$(history | tail -n $((i+1)) | head -1)"
                local para1=$(echo $try_old_dir | awk '{print $2}')
                local para2=$(echo $try_old_dir | awk '{print $3}')
                local para3=$(echo $try_old_dir | awk '{print $4}')
                [ -n "$para2" -a -n "$para3" ] && { $para1 $para3 $para2; return; }
		# only mv ??
        done
}

# cd的增强版
function quickcd() {
    local tmp dir=''
    for i in 1; do
        if [ "$#" -eq 0 ]; then
            local try_old_dir="$(history | tail -n 2 | head -1)"
            try_old_dir="${try_old_dir##* }"
            [[ "${try_old_dir:0:1}" == '~' ]] && try_old_dir="$HOME${try_old_dir:1}"
            if [ -d "$try_old_dir" ]; then
                dir="$try_old_dir"
            else
                dir="${WORKSPACE:-$HOME}"
            fi
        elif [ -d "$1" ]; then
            dir="$1"
        else
            [ -d "${1%\/*}" ] && { dir="${1%\/*}"; continue; }
            [[ "$1" =~ ":~" ]] && { dir=$HOME"${1##*:~}"; continue; }
            [[ "$1" =~ ":" ]] && { dir="${1##*:}"; continue; }
            [ $1 = "-" ] && { dir=$OLDPWD; continue; }
            [ $1 = "clean" ] && { > $VTMP/cdlist; continue; }
            tmp="$VTMP/cdlist.tmp"
            [ $# -eq 2 ] && [ $1 = "add" ] && { echo "$2 `pwd`" > "$tmp"; cat "$VTMP/cdlist" >> "$tmp"; mv "$tmp" "$VTMP/cdlist"; continue; }
            [ $# -eq 1 -a -f "$VTMP/cdlist" ] && {
                while read line; do
                    [ $1 = "${line% *}" ] && { dir=${line#* }; continue 2; }
                done < "$VTMP/cdlist"
            }
            tmp="$(find -maxdepth 1 -type d -name "$1*")"; [ $? -eq 0 -a -d "$tmp" ] && { dir="$tmp"; continue; }
        fi
    done

    if [ -n "$dir" ]; then
        alias cd='cd'
        cd "$dir"
        alias cd='quickcd'
    fi
}

# vim的增强版
function svi(){
    local STR FILE LINE
    if [ $# -ne 0 ]; then
        STR=$1
        FILE=${STR%%:*}
        LINE=${STR#*:}
        LINE=${LINE%%:*}

        expr $LINE + 0 &>/dev/null
        [ $? -eq 0 ] && LINE="+$LINE" || LINE=''

        STR=''
        [ ! -f "$FILE" -a "$PWD" != "$HOME" ] && STR="$(fd $FILE)"
        [ -n "$STR" ] && FILE="$STR"

        [ -f "$FILE" ] && vim $FILE ${LINE:+$LINE}
    fi
    # printf "\e[?2004l"
}

# find的增强版
function find1(){
    set +f
    if [ $# -ne 0 ]; then
        STR=${1%%:*}
        FILE=${STR##*/}
        eval find "${2:+\"$2\" }"-name \""$FILE"\"
    fi
}

# .., 智能目录回退
function vcd(){
	include $VLIBS/lib.base

	local DIR=~
	local TARGET=
	[ -d "$DIR/$1" ] && TARGET=$1
	[ -f "$DIR/$1" ] && TARGET=${1%/*}
	[ -z "$1" ] && { TARGET=$(getdir .git); [ -z "$TARGET" ] && TARGET=$(getdir .repo); }
	[ -z "$TARGET" -a -n "$1" ] && { TARGET=$[${#1}+1]; TARGET=$(seq -s "../" $TARGET); TARGET=${TARGET//[0-9]/}; }
	[ -n $TARGET ] && cd $TARGET
}

# ev = 'environment variables'
# 删除环境变量
function clean_ev() {
    local tmp
    eval tmp=\$"$1"
    tmp="$(echo ${tmp//$2/} | sed 's/:\{1,\}/:/g')"
    export $1="$tmp"
}

# 添加环境变量
function add_ev() {
    clean_ev "$1" "$2"
    local tmp
    eval tmp=\$"$1"
    export $1="$2${tmp:+:$tmp}"
}

# 删除环境变量PATH
function clean_path() {
    clean_ev PATH "$1"
}

# 添加环境变量PATH
function add_path() {
    [ -d "$1" ] && { clean_ev PATH "$1"; add_ev PATH "$1"; }
}

# 在当前目录创建指定文件的链接
function lnn() {
    include $VLIBS/lib.base

    local lnfile="$1"
    local searchdir="$HOME/.bin"
    local target="$lnfile"
    local tmp

    [ -z "$1" ] && return 1

    if [ -n "$2" ]; then
        eval tmp="$2"
        tmp="$(clean_last_symbol $tmp)"
        [ -d "$tmp" -o -d "$PWD/$tmp" ] && searchdir="$tmp" || target="$tmp"
    fi
    if [ -n "$3" ]; then
        eval tmp="$3"
        tmp="$(clean_last_symbol $tmp)"
        [ -d "$tmp" -o -d "$PWD/$tmp" ] && searchdir="$tmp" || target="$tmp"
    fi

    [ -f "$lnfile"  ] && rm "$lnfile"

    local d="$(find "$searchdir/" -name "$lnfile" | head -1)"
    if [ -n "$d" ]; then
        [ -f "$target" ] && rm "$target"
        [[ $d =~ "$HOME" ]] && ln -sfr "$d" "$target" || ln -sf "$d" "$target"
    fi
}

# 在当前目录创建指定文件列表的所有链接
function lnn_file() {
    local line
    while read line; do
        [ -n "$line" -a "${line:0:1}" != '#' ] && lnn $line
    done < $1
}

function check_sudo() {
    user="$(whoami)"
    local ret=0 val
    val="$(cat /etc/group | sed -n '/^sudo:/p;' -)"
    val=${val##*:}
    val="$(cat /etc/group | sed -n '/^root:/p;' -),$val"
    val=${val##*:}
    [[ "$val" =~ "$user" ]] && ret=$(($ret|1))
    echo $ret
}

# 删除失效的链接文件
function clean_invalid_ln() {
    local file
    for file in $(find $1 -type l); do
        [ ! -e $file ] && rm -f $file
    done
}

complete_for_lib() {
    local cur prev tmp
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    # _get_comp_words_by_ref cur

    tmp="$(sed -n -r 's/^function\ (.*)\(.*/\1/p;' $HOME/.bin/lib/$1)"
    if [[ "$tmp" =~ "$prev" ]]; then
        _filedir
    else
        COMPREPLY=( $( compgen -W "$tmp" -- "$cur" ) )
    fi
}

function add_server() { # NAME HOST ID IP HOME
    local NAME=$1 HOST=$2 ID=$3 IP=$4 HOME=$5
    # eval export "$NAME"_HOST="$HOST"
    eval export "$NAME"_ID="$ID@$HOST"
    # eval export "$NAME"_IP="$IP"
    eval export "$NAME"_SSH="$ID@$IP"
    eval export "$NAME"_HOME="$HOME"
}

function ci() {
	include $VLIBS/lib.list

	showlist_with_input $VGL_DATA/go.vconf "dest" "copy ID to where ??" $@
	[ -n "$dest" ] && ssh-copy-id $dest
}

############# export ##############
alias cd='quickcd'
alias vi='svi'
alias fd='set -f; find1'
alias ..='vcd'
alias ...='cd_repo'
alias vvsync="rsync -url 'wgao@192.168.4.15:\$HOME/.vdotfiles' $HOME"

# if [ -n "$ZSH" ]; then
# fi

########### export end ############
