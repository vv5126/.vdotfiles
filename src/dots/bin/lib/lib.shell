#!/bin/bash

include ~/.bin/lib/lib.base

# 反转上一次操作
function ccd(){
        for i in {1..3}; do
                local try_old_dir="$(history | tail -n $((i+1)) | head -1)"
                local para1=$(echo $try_old_dir | awk '{print $2}')
                local para2=$(echo $try_old_dir | awk '{print $3}')
                local para3=$(echo $try_old_dir | awk '{print $4}')
                [ -n "$para2" -a -n "$para3" ] && { $para1 $para3 $para2; return; }
        done
}

# cd的增强版
function quickcd() {
    alias cd='cd'
    local tmp
    for i in 1; do
        if [ "$#" -eq 0 ]; then
            local try_old_dir="$(history | tail -n 2 | head -1)"
            try_old_dir="${try_old_dir##* }"
            [[ "${try_old_dir:0:1}" == '~' ]] && try_old_dir="$HOME${try_old_dir:1}"
            if [ -d "$try_old_dir" ]; then
                cd "$try_old_dir"
            else
                cd ~
            fi
        elif [ -d "$1" ]; then
            cd "$1"
        else
            [ -d "${1%\/*}" ] && { cd "${1%\/*}"; continue; }
            [[ "$1" =~ ":~" ]] && { cd $HOME"${1##*:~}"; continue; }
            [[ "$1" =~ ":" ]] && { cd "${1##*:}"; continue; }
            [ $1 = "-" ] && { cd $OLDPWD; continue; }
            [ $1 = "clean" ] && { > ~/.cdlist; continue; }
            [ $# -eq 2 ] && [ $1 = "add" ] && { echo "$2 `pwd`" >> ~/.cdlist; continue; }
            [ $# -eq 1 -a -f "$HOME/.cdlist" ] && {
            while read line; do
                [ $1 = "${line% *}" ] && { cd ${line#* }; continue 2; }
                done < ~/.cdlist
            }
            tmp="$(find -maxdepth 1 -type d -name "$1*")"; [ $? -eq 0 -a -d "$tmp" ] && { cd "$tmp"; continue; }
        fi
    done
    alias cd='quickcd'
}

# vim的增强版
function svi(){
    local STR FILE LINE
    if [ $# -ne 0 ]; then
        STR=$1
        FILE=${STR%%:*}
        LINE=${STR#*:}
        LINE=${LINE%%:*}

        expr $LINE + 0 &>/dev/null
        [ $? -eq 0 ] && LINE="+$LINE" || LINE=''

        STR=''
        [ ! -f $FILE -a $PWD != "$HOME" ] && STR="$(fd $FILE)"
        [ -n "$STR" ] && FILE="$STR"

        [ -f "$FILE" ] && vim $FILE ${LINE:+$LINE}
    fi
}

# find的增强版
function find1(){
	if [ $# -ne 0 ]; then
		STR=${1%%:*}
		FILE=${STR##*/}
                eval find "${2:+\"$2\" }"-name \""$FILE"\"
	fi
}

# .., 智能目录回退
function vcd(){
	local DIR=~
	local TARGET=
	[ -d "$DIR/$1" ] && TARGET=$1
	[ -f "$DIR/$1" ] && TARGET=${1%/*}
	[ -z "$1" ] && { TARGET=$(getdir .git); [ -z "$TARGET" ] && TARGET=$(getdir .repo); }
	[ -z "$TARGET" -a -n "$1" ] && { TARGET=$[${#1}+1]; TARGET=$(seq -s "../" $TARGET); TARGET=${TARGET//[0-9]/}; }
	[ -n $TARGET ] && cd $TARGET
}

# ev = 'environment variables'
# 删除环境变量
function clean_ev() {
    local tmp
    eval tmp=\$"$1"
    tmp="$(echo ${tmp//$2/} | sed 's/:\{1,\}/:/g')"
    export $1="$tmp"
}

# 添加环境变量
function add_ev() {
    clean_ev "$1" "$2"
    local tmp
    eval tmp=\$"$1"
    export $1="$2${tmp:+:$tmp}"
}

# 删除环境变量PATH
function clean_path() {
    clean_ev PATH "$1"
}

# 添加环境变量PATH
function add_path() {
    [ -d "$1" ] && { clean_ev PATH "$1"; add_ev PATH "$1"; }
}

# 在当前目录创建指定文件的链接
function lnn() {
    local lnfile="$1"
    local searchdir="$HOME/.bin"
    local target="$lnfile"
    local tmp

    [ -z "$1" ] && return 1

    if [ -n "$2" ]; then
        eval tmp="$2"
        tmp="$(clean_last_symbol $tmp)"
        [ -d "$tmp" -o -d "$PWD/$tmp" ] && searchdir="$tmp" || target="$tmp"
    fi
    if [ -n "$3" ]; then
        eval tmp="$3"
        tmp="$(clean_last_symbol $tmp)"
        [ -d "$tmp" -o -d "$PWD/$tmp" ] && searchdir="$tmp" || target="$tmp"
    fi

    [ -f "$lnfile"  ] && rm "$lnfile"

    local d="$(find "$searchdir/" -name "$lnfile" | head -1)"
    if [ -n "$d" ]; then
        [ -f "$target" ] && rm "$target"
        [[ $d =~ "$HOME" ]] && ln -sfr "$d" "$target" || ln -sf "$d" "$target"
    fi
}

# 在当前目录创建指定文件列表的所有链接
function lnn_file() {
    local line
    while read line; do
        [ -n "$line" -a "${line:0:1}" != '#' ] && lnn $line
    done < $1
}

function check_sudo() {
    user="$(whoami)"
    local ret=0 val
    val="$(cat /etc/group | sed -n '/^sudo:/p;' -)"
    val=${val##*:}
    val="$(cat /etc/group | sed -n '/^root:/p;' -),$val"
    val=${val##*:}
    [[ "$val" =~ "$user" ]] && ret=$(($ret|1))
    echo $ret
}

# 删除失效的链接文件
function clean_invalid_ln() {
    local file
    for file in $(find $1 -type l); do
        [ ! -e $file ] && rm -f $file
    done
}

############# will export ##############
alias cd='quickcd'
alias vi='svi'
alias fd='set -f; find1'
alias ..='vcd'
alias ...='cd_repo'

case $(ps -p $$ -o comm=) in
    'zsh')
        export ZSH_EXPORTED_FUNCTIONS="$(functions \
            change_toolchain \
            )"
        ;;
    *)
        ;;
esac

########### will export end ############
