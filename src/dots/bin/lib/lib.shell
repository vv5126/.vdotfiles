#!/bin/bash

# cd的增强版
function quickcd() {
    local tmp dir='' list="$VTMP/.cdlist"

    for i in 1; do
        if [ "$#" -eq 0 ]; then
            local try_old_dir="$(history | tail -n 2 | head -1)"
            try_old_dir="${try_old_dir##* }"
            [[ "${try_old_dir:0:1}" == '~' ]] && try_old_dir="$HOME${try_old_dir:1}"
            if [ -d "$try_old_dir" ]; then
                dir="$try_old_dir"
            else
                dir="${WORKSPACE:-$HOME}"
		if [ "$dir" == "$HOME" -a -f $VTMP/.lastdir ]; then
		    dir=$(cat $VTMP/.lastdir)
		    rm $VTMP/.lastdir
		    continue
		fi
            fi
	    [ -f $VTMP/.lastdir ] && rm $VTMP/.lastdir
        elif [ "$1" == '.' ]; then
	    if [ -f "$VTMP/.trydir" ]; then
		dir="$(cat $VTMP/.trydir)"
		rm $VTMP/.trydir
	    else
		echo $PWD > $VTMP/.trydir
	    fi
        elif [ -d "$1" ]; then
            dir="$1"
        else
            [ -d "${1%\/*}" ] && { dir="${1%\/*}"; continue; }
            [[ "$1" =~ ":~" ]] && { dir=$HOME"${1##*:~}"; continue; }
            [[ "$1" =~ ":" ]] && { dir="${1##*:}"; continue; }
            [ $1 = "-" ] && { dir=$OLDPWD; continue; }
            [ $1 = "clean" ] && { > $list; continue; }
            tmp="/tmp/cdlist.tmp"
            [ $# -eq 2 ] && [ $1 = "add" ] && { echo "$2 `pwd`" > "$tmp"; cat "$list" >> "$tmp"; mv "$tmp" "$list"; continue; }
            [ $# -eq 1 -a -f "$list" ] && {
                while read line; do
                    [ $1 = "${line% *}" ] && { dir=${line#* }; continue 2; }
                done < "$list"
            }
            tmp="$(find -maxdepth 1 -type d -name "$1*")"; [ $? -eq 0 -a -d "$tmp" ] && { dir="$tmp"; continue; }
        fi
    done

    if [ -n "$dir" ]; then
        alias cd='cd'
        cd "$dir"
        alias cd='quickcd'
    fi
}

# .., 智能目录回退
function vcd(){
	include $VLIBS/lib.base

	local DIR=~
	local TARGET=
	[ -d "$DIR/$1" ] && TARGET=$1
	[ -f "$DIR/$1" ] && TARGET=${1%/*}
	[ -z "$1" ] && { TARGET=$(getdir .git); [ -z "$TARGET" ] && TARGET=$(getdir .repo); }
	[ -z "$TARGET" -a -n "$1" ] && { TARGET=$[${#1}+1]; TARGET=$(seq -s "../" $TARGET); TARGET=${TARGET//[0-9]/}; }
	[ -n $TARGET ] && cd $TARGET
}

# ev = 'environment variables'
# 删除环境变量
function clean_ev() {
    local tmp
    eval tmp=\$"$1"
    tmp="$(echo ${tmp//$2/} | sed 's/:\{1,\}/:/g')"
    export $1="$tmp"
}

# 添加环境变量
function add_ev() {
    clean_ev "$1" "$2"
    local tmp
    eval tmp=\$"$1"
    export $1="$2${tmp:+:$tmp}"
}

# 删除环境变量PATH
function clean_path() {
    clean_ev PATH "$1"
}

# 添加环境变量PATH
function add_path() {
    [ -d "$1" ] && add_ev PATH "$1"
}

# 工具链切换
function change_toolchain(){
    include ~/.bin/lib/lib.list

    showlist_with_input $VUSER_DATA/toolchains.vconf "toolchain_version" "go where ??" $@
    eval add_path "$toolchain_path"
}

complete_for_lib() {
    local cur prev tmp
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    # _get_comp_words_by_ref cur

    tmp="$(sed -n -r 's/^function\ (.*)\(.*/\1/p;' $HOME/.bin/lib/$1)"
    if [[ "$tmp" =~ "$prev" ]]; then
        _filedir
    else
        COMPREPLY=( $( compgen -W "$tmp" -- "$cur" ) )
    fi
}

function add_server() { # NAME HOST ID IP HOME
    local NAME=$1 HOST=$2 ID=$3 IP=$4 HOME=$5
    # eval export "$NAME"_HOST="$HOST"
    eval export "$NAME"_ID="$ID@$HOST"
    # eval export "$NAME"_IP="$IP"
    eval export "$NAME"_SSH="$ID@$IP"
    eval export "$NAME"_HOME="$HOME"
}
