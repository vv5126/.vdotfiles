#!/bin/bash

source ~/.bin/lib/lib.base
source ~/.bin/lib/lib.work

# 反转上一次操作
function ccd(){
        for i in {1..3}; do
                local try_old_dir="$(history | tail -n $((i+1)) | head -1)"
                local para1=$(echo $try_old_dir | awk '{print $2}')
                local para2=$(echo $try_old_dir | awk '{print $3}')
                local para3=$(echo $try_old_dir | awk '{print $4}')
                [ -n "$para2" -a -n "$para3" ] && { $para1 $para3 $para2; return; }
        done
}

# cd的增强版
function quickcd() {
    alias cd='cd'
    local tmp
    for i in 1; do
        if [ "$#" -eq 0 ]; then
            local try_old_dir="$(history | tail -n 2 | head -1)"
            try_old_dir="${try_old_dir##* }"
            [[ "${try_old_dir:0:1}" == '~' ]] && try_old_dir="$HOME${try_old_dir:1}"
            if [ -d "$try_old_dir" ]; then
                cd "$try_old_dir"
            else
                cd ~
            fi
        elif [ -d "$1" ]; then
            cd "$1"
        else
            [ -d "${1%\/*}" ] && { cd "${1%\/*}"; continue; }
            [[ "$1" =~ ":~" ]] && { cd $HOME"${1##*:~}"; continue; }
            [[ "$1" =~ ":" ]] && { cd "${1##*:}"; continue; }
            [ $1 = "-" ] && { cd $OLDPWD; continue; }
            [ $1 = "clean" ] && { > ~/.cdlist; continue; }
            [ $# -eq 2 ] && [ $1 = "add" ] && { echo "$2 `pwd`" >> ~/.cdlist; continue; }
            [ $# -eq 1 -a -f "$HOME/.cdlist" ] && {
            while read line; do
                [ $1 = "${line% *}" ] && { cd ${line#* }; continue; }
                done < ~/.cdlist
            }
            tmp="$(find -maxdepth 1 -type d -name "$1*")"; [ $? -eq 0 -a -d "$tmp" ] && { cd "$tmp"; continue; }
        fi
    done
    alias cd='quickcd'
}

# vim的增强版
function svi(){
	if [ $# -ne 0 ]; then
		STR=$1
		FILE=${STR%%:*}
		LINE=${STR#*:}
		LINE=${LINE%%:*}
		expr $LINE + 0 &>/dev/null
		if [ $? -eq 0 ]; then
                    [ -f "$FILE" ] && vim $FILE +$LINE
                else
                    vim $FILE
                fi
	fi
}

# find的增强版
function find1(){
	if [ $# -ne 0 ]; then
		STR=${1%%:*}
		FILE=${STR##*/}
                eval find "${2:+\"$2\" }"-name \""$FILE"\"
	fi
}

# .., 智能目录回退
function vcd(){
	local DIR=~
	local TARGET=
	[ -d "$DIR/$1" ] && TARGET=$1
	[ -f "$DIR/$1" ] && TARGET=${1%/*}
	[ -z "$1" ] && { TARGET=$(getdir .git); [ -z "$TARGET" ] && TARGET=$(getdir .repo); }
	[ -z "$TARGET" -a -n "$1" ] && { TARGET=$[${#1}+1]; TARGET=$(seq -s "../" $TARGET); TARGET=${TARGET//[0-9]/}; }
	[ -n $TARGET ] && cd $TARGET
}

function clean_path() {
    if [[ "$PATH" =~ ":$1:" ]]; then
        tmp="${PATH//:$1:/:}"
    elif [[ "$PATH" =~ ":$1" ]]; then
        tmp="${PATH//:$1/}"
    elif [[ "$PATH" =~ "$1:" ]]; then
        tmp="${PATH//$1:/}"
    else
        tmp="$PATH"
    fi
    PATH=$tmp
}

# 添加环境变量
function add_path() {
    clean_path "$1"
    [ -d "$1" ] && PATH="$1":"$PATH"
}

# 工具链切换
function change_toolchain(){

    paths="
    # GCC for Android
    # /data1/home/wgao/tools/toolchains/mipsel-linux-android-4.7/bin
    # /data1/home/wgao/tools/toolchains/mips64el-linux-android-4.9/bin
    # debug for thync
    # /data1/home/wgao/thync/mips-gcc472-glibc216/bin
    # export CROSS_COMPILE=mips-linux-gnu-gcc-4.7.2
    # export CROSS_COMPILE=mips64el-linux-android- # for android
    /pdev/chains/mips-gcc472-glibc216/bin
    /pdev/chains/mips-gcc520-glibc222/bin
    /pdev/chains/mips-linux-gnu/bin
    /data1/home/wgao/tools/toolchains/mipsel-gcc472-glibc216-mips32/bin
    # mozart
    /data1/home/wgao/tools/toolchains/mipseltools-gcc412-glibc261/bin"

    OLD_IFS="$IFS"
    IFS=$'\n'

    select var in $(echo "$paths" | sed -n "/^\ \+\#/!p;" | sed -n "s/^\ \+//p;"); do
        break
    done

    IFS="$OLD_IFS"

    add_path "$var"
}

function lnn() {
    local lnfile="$1"
    local searchdir="${2:-"$HOME/.bin"}"
    local d="$(find "$searchdir/" -name "$lnfile" | head -1)"
    [ -n "$d" ] && ln -sf "$d" "$lnfile"
}

############# will export ##############
alias cd='quickcd'
alias mm='mm1'
alias mma='mma1'
alias vi='svi'
alias fd='find1'
alias ..='vcd'
alias ...='cd_repo'

case $(ps -p $$ -o comm=) in
    'zsh')
        export ZSH_EXPORTED_FUNCTIONS="$(functions \
            change_toolchain \
            )"
        ;;
    *)
        export -f change_toolchain
        ;;
esac

########### will export end ############
