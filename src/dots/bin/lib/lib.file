#!/bin/bash

include $VLIBS/lib.base
# NF=14
# awk '{$NF="'$PWD/'"$NF; print}' $1

# 如果行有中文,则注释

# done start
# 文件

function find_file__by_suffix() {
	local path="$1" suffix="$2" tmp i
	for i in $suffix; do
		tmp="$tmp"'|\.'"$i"'\'
	done
	find "$path" -iregex ".*\(${tmp:1})$"
}
# function find_files__by_type() { }
# function find_files__by_executable() { }
# function find_files__by_attr() { }

# 文件夹

function find_dirs__empty() {
	local dir=$1
	find $dir -type d -empty
}

# function find_subdir_by_dir() { }

# 拷贝文件，根据列表文件，并保持目录结构
function cp_files__by_listfile_with_arch() {
	local file="$1" dst="$2" line line1 path
	while read line; do
		[ -z "$line" ] && continue
		[ -f "$line" -o -d "$line" ] || continue
		line1=./$(clean_last_symbol "$line")
		path=${line1%/*}
		mkdir -p "$dst/$path"
		cp -rf "$line1" "$dst/$path"
	done < "$file"
}

# 生成目录结构，根据列表文件
function gen_arch__by_listfile() {
	local file="$1" dst="$2" line line1 path
	while read line; do
		[ -z "$line" ] && continue
		line1=./$(clean_last_symbol "$line")
		path=${line1%/*}
		mkdir -p "$dst/$path"
	done < "$file"
}

# done end

# 单目录到文件
function dir_to_list() {
	local dir="$1"
	local target_file="$2"
	local tmp_file=.lib.file.tmp

	NF=14
	tree -pif | awk '{$NF="'$PWD'"$NF; print}' > $tmp_file
	# tree -pif >> $tmp_file
	# local files="$(tree -pif)"
	# rm wrong line
}

function del_file_in_list() {
	local list_file="$1"
	local target_dir="$2"

}


# 常用类型到文件
# 指定配置到文件? json?

# 剔除类型到文件
# 剔除文件中目录
# 剔除无效文件 路径

# 插入目录到文件
# 合并文件

# 删除所有子目录指定类型文件
function del_file_zero() {
	find "$1" -type f -size 0c | xargs -i rm -r {}
}

function del_dir_zero() {
	find "$1" -type d -empty | xargs -i rm -r {}
}

# 统计文件个数
# 统计文件夹个数
# 统计空文件夹个数

# 文件->目录

# 根据文件或者正则表达式进行匹配
# find_all_file_by_type "*.cpp *.c *.h"
# find_all_file_by_c 

# 列出当前目录及子目录下所有文件和文件夹

function get_line_from_file() {
	local file="$1" line="$2"
	echo $(sed -n "$line,$line {/.*/p;}" "$flie")
}

function get_lines_from_file() {
	local file="$1" line_start="$2" line_end="$3"
	echo $(sed -n "$line_start,$line_end {/.*/p;}" "$flie")
}

function find_all_in_list() {
	local para tmp
	for i in $@; do
		para="$para -o -name *.$i"
	done
	tmp="$(rm_left "$para" " -o")"
	local para="$(find . \( $tmp \))"
	echo "$para"
}

# 在/home目录下查找以.txt结尾的文件名
# find /home -name "*.txt"
# 同上，但忽略大小写
# find /home -iname "*.txt"
# 当前目录及子目录下查找所有以.txt和.pdf结尾的文件
# find . \( -name "*.txt" -o -name "*.pdf" \) 或 find . -name "*.txt" -o -name "*.pdf" 
# 匹配文件路径或者文件
# find /usr/ -path "*local*"
# 基于正则表达式匹配文件路径
# find . -regex ".*\(\.txt\|\.pdf\)$"
# 同上，但忽略大小写
# find . -iregex ".*\(\.txt\|\.pdf\)$"
# 找出/home下不是以.txt结尾的文件
# find /home ! -name "*.txt"
# 向下最大深度限制为3
# find . -maxdepth 3 -type f
# 搜索出深度距离当前目录至少2个子目录的所有文件
# find . -mindepth 2 -type f
# 根据文件时间戳进行搜索
# find . -type f 时间戳
# UNIX/Linux文件系统每个文件都有三种时间戳：
# 访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。
# 修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。
# 变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。
# 搜索最近七天内被访问过的所有文件
# find . -type f -atime -7
# 搜索恰好在七天前被访问过的所有文件
# find . -type f -atime 7
# 搜索超过七天内被访问过的所有文件
# find . -type f -atime +7
# 搜索访问时间超过10分钟的所有文件
# find . -type f -amin +10
# 找出比file.log修改时间更长的所有文件
# find . -type f -newer file.log
# 搜索大于10KB的文件
# find . -type f -size +10k
# 搜索小于10KB的文件
# find . -type f -size -10k
# 搜索等于10KB的文件
# find . -type f -size 10k
# 删除当前目录下所有.txt文件
# find . -type f -name "*.txt" -delete
# 根据文件权限/所有权进行匹配
# 当前目录下搜索出权限为777的文件
# find . -type f -perm 777
# 找出当前目录下权限不是644的php文件
# find . -type f -name "*.php" ! -perm 644
# 找出当前目录用户tom拥有的所有文件
# find . -type f -user tom
# 找出当前目录用户组sunk拥有的所有文件
# find . -type f -group sunk
# 借助-exec选项与其他命令结合使用
# 找出当前目录下所有root的文件，并把所有权更改为用户tom
# find .-type f -user root -exec chown tom {} \;
# 上例中，{} 用于与-exec选项结合使用来匹配所有文件，然后会被替换为相应的文件名。
# 找出自己家目录下所有的.txt文件并删除
# find $HOME/. -name "*.txt" -ok rm {} \;
# 上例中，-ok和-exec行为一样，不过它会给出提示，是否执行相应的操作。
# 查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中
# find . -type f -name "*.txt" -exec cat {} \;> all.txt
# 将30天前的.log文件移动到old目录中
# find . -type f -mtime +30 -name "*.log" -exec cp {} old \;
# 找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来
# find . -type f -name "*.txt" -exec printf "File: %s\n" {} \;
# 因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令
# -exec ./text.sh {} \;
# 搜索但跳出指定的目录
# 查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk
# find . -path "./sk" -prune -o -name "*.txt" -print
# # find其他技巧收集
# # 要列出所有长度为零的文件
# find . -empty
# 找出在/home/user中的所有空子目录:
# find /home/user -maxdepth 1 -type d -empty

# 将文件名中含有txt的所有文件移动到/home/user:
# find -iname "*txt*" -exec mv -v {} /home/user \;

# 找出文件中带有末尾空格的文件:
# find . -type f -exec egrep -l " +$" "{}" \;
# 找出用tab缩进的文件:
# find . -type f -exec egrep -l $'\t' "{}" \;

# 根据文件类型进行搜索
# find . -type 类型参数
# 类型参数列表：
# f 普通文件
# l 符号连接
# d 目录
# c 字符设备
# b 块设备
# s 套接字
# p Fifo

# 根据文件大小进行匹配
# find . -type f -size 文件大小单元
# 文件大小单元：
# b —— 块（512字节）
# c —— 字节
# w —— 字（2字节）
# k —— 千字节
# M —— 兆字节
# G —— 吉字节
[[ "${0##*/}" =~ "lib.file" ]] && $@
