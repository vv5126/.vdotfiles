# 分隔符有bug!!!
function vconf_filter() {
    include misc

    # echo @ \"$@\" >&2
    local c=$(get_param -s $@)
    # echo c \"$c\" >&2
    local separator=${c:+-F$c}
    c=${c:= }
    # c="\ "
    local mode=$(get_param -m $@)
    local in_f=$(get_param '' $@)
    # local out_f=$(get_param -out $@)
    # echo separator "$separator" >&2

    case "$mode" in
        '0') # vconf_filter_mode0 不过滤
            ;;
        '1') # vconf_filter_mode1 只滤行
            cat $in_f \
                | sed -n -e '1 p' -e '/^#/!p;' \
                >&1
            # > $out_f
            ;;
        '2') # vconf_filter_mode2 只滤列
            cat $in_f \
                | sed '1 s/^#/ /' \
                | sed '/^$/d;' \
                | sed 's/^#\ /_/' \
                | sed 's/[^_]/+ &/' \
		| awk $separator '{for(i=1;i<=NR;i++){if(NF>m){m=NF}}for(i=1;i<=m;i++){if(NR==1){a[i]=$i}else{a[i]=a[i]'\""$c"\"'$i}}}END{for(i=1;a[i]!="";i++){print a[i]}}' \
                | sed -n '/^#/!p;' \
		| awk $separator '{for(i=1;i<=NR;i++){if(NF>m){m=NF}}for(i=1;i<=m;i++){if(NR==1){a[i]=$i}else{a[i]=a[i]'\""$c"\"'$i}}}END{for(i=1;a[i]!="";i++){print a[i]}}' \
                | sed 's/^+//' \
                | sed 's/^_+/#/' \
                | sed '1 s/^/#/' \
                | sed 's/^\ *//' \
                >&1
            ;;
        '3') # vconf_filter_mode3 行列都滤
	    cat $in_f \
		| sed '1 s/^#//' \
		| sed 's/^[ ]*//' \
		| sed '/^$/d;' \
		| sed -n '/^ *#/!p;' \
		| awk $separator '{for(i=1;i<=NR;i++){if(NF>m){m=NF}}for(i=1;i<=m;i++){if(NR==1){a[i]=$i}else{a[i]=a[i]'\""$c"\"'$i}}}END{for(i=1;a[i]!="";i++){print a[i]}}' \
		| sed -n '/^ *#/!p;' \
		| awk $separator '{for(i=1;i<=NR;i++){if(NF>m){m=NF}}for(i=1;i<=m;i++){if(NR==1){a[i]=$i}else{a[i]=a[i]'\""$c"\"'$i}}}END{for(i=1;a[i]!="";i++){print a[i]}}' \
		| sed '1 s/^/# /' \
		>&1
            # > $out_f
            ;;
        '4') # vconf_filter_mode4 只滤列 分隔符为非空格
            ;;
        '5') # vconf_filter_mode5 行列都滤 分隔符为非空格
            ;;
    esac
}

function vconf_format() {
    trap "set +f" 1 2 3 15; set -f

    include misc

    local c=$(get_param -s $@)
    local separator=${c:+-F$c}
    local file=$(get_param '' $@)

    local tmp_file=.tmp_$(cat /dev/urandom | LC_CTYPE=C tr -dc '0-9a-zA-Z' | fold -w 6 | head -n 1)
    sed -i 's/^#\ /__/g' $file

    local max_num num new_line line column row=1
    column=$(sed -n 1p $file | awk $separator '{print NF}')

    for num in $(seq 1 $column); do
        max_num=1
        for i in $(cat "$file" | awk $separator "{print \$$num}"); do
            [ "${#i}" -gt "$max_num" ] && max_num="${#i}"
        done
        eval line_$num=$max_num
    done

    > $tmp_file
    while read line; do
        new_line=''
        for num in $(seq 1 $column); do
            tmp=$(echo "$line" | awk $separator "{print \$$num}" | sed 's/^\s*//;s/\s*$//')
            eval space="\$((\$line_$num-${#tmp}))"
            [ "${tmp:0:2}" == '__' -a "$row" != '1' ] && space=$(($space+2))
            if [ "$column" == "$num" -o "$space" == 0 ]; then
                new_line="${new_line:+$new_line $c }$tmp"
            else
                new_line="${new_line:+$new_line $c }$tmp$(printf "%-"$space"s" " ")"
            fi
        done
        echo "${new_line# *}" >> $tmp_file
        ((row+=1))
    done < $file

    mv $tmp_file $file

    # vim -c "1,$(sed -n '$=' "$file")EasyAlign *\ " -c "exit" "$file"
    sed -i 's/^__/#\ /g' $file
}

function vconf_help() {
    echo "
Usage: ls [OPTION]... [FILE]...
List information about the FILEs (the current directory by default).
Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.

Mandatory arguments to long options are mandatory for short options too.
-r           number or row content under specified title.
-c           specified column, (content or number).
-s           specified separator. (todo)
-a           add a line.
-d           del specified line.
-m           mode.
-w           select show way:
                    l: print line.
                    p: print content.
--reset      format vconf file.
--exp      export

-g           get specified value in row.
-rn          row number.
-t           specified title

examples:
    show specified column.                         -c NO.['title']
    show specified row.                         >  -r NO. or -c 'title' -r 'text by title'
    show content at specified column and row.      -r NO. -c NO.['title']

"
}

# vconf文件解析
function vconf() { # 要求：名字必须.vconf结尾，第一行为magic code，#开头; 其他"#"开头为注释，有效行以空格分隔每项。

    [ $# -eq 0 ] && { vconf_help; return; }

    trap "set +f" 1 2 3 15; set -f

    include misc debug
    # debug=

    local vconf_list vconf_var_str vconf_num vconf_title vconf_ret=0 vconf_lines
    local i tmp_file tmp

    local vconf_separator=$(get_param -s "$@")
    local vconf_col=$(get_param -c "$@")
    local vconf_row=$(get_param -r "$@")
    local vconf_mode=$(get_param -m "$@")
    local vconf_exc=$(get_param -except "$@")
    local vconf_exp=$(get_param --exp "$@")
    local vconf_addline=$(get_param -a "$@")
    local vconf_delline=$(get_param -d "$@")
    local vconf_file=$(get_param '' "$@")
    # local rownum=$(get_param -rn "$@")
    # local col1=$(get_param -g "$@")
    # local format=$(get_param --reset "$@")

    [ "${vconf_file: -6}" == '.vconf' -a -f "$vconf_file" ] || { echo "need specified a conf file!" >&2; return -1; }

    # tmp_file=/tmp/vconf_$(cat /dev/urandom | LC_CTYPE=C tr -dc '0-9a-zA-Z' | fold -w 6 | head -n 1)
    tmp_file=/tmp/tmp.vconf

    if [ "$vconf_exp" == "vconf_col" -a -n "$vconf_separator" ]; then
        vconf_filter -m 4 $vconf_file -s $vconf_separator > $tmp_file
    elif [ "$vconf_exp" == "all" -a -n "$vconf_separator" ]; then
        vconf_filter -m 5 $vconf_file -s $vconf_separator > $tmp_file
    elif [ "$vconf_exp" == "none" ]; then
        vconf_filter -m 0 $vconf_file > $tmp_file
    elif [ "$vconf_exp" == "vconf_row" ]; then
        vconf_filter -m 1 $vconf_file > $tmp_file
    elif [ "$vconf_exp" == "vconf_col" ]; then
        vconf_filter -m 2 $vconf_file > $tmp_file
    elif [ "$vconf_exp" == "all" ]; then
        vconf_filter -m 3 $vconf_file > $tmp_file
    else
        vconf_filter -m 3 $vconf_file > $tmp_file
    fi

    vconf_lines=$(sed -n '$=' "$tmp_file")

    # set title to var, E.X. name=1 path=2 ...
    vconf_title="$(head -n 1 $tmp_file)"
    vconf_list="${vconf_title//\#/ }"
    vconf_list=("${vconf_list//$vconf_separator/ }")
    # log vconf_list

    vconf_num=1
    for i in $vconf_list; do
        eval vconf_var_str=\"\$vconf_var_str \${$i:--}\"
        eval $i="$vconf_num"
        ((vconf_num+=1))
    done


    [ "$(is_num $vconf_col)" == 0 ] && eval vconf_col=\$"$vconf_col" # if vconf_col is title, convert to num.

    # processing
    case "$vconf_mode" in
        'add')
            if [ "$(is_num $vconf_row)" == 1 ]; then
                vconf_num=1 tmp=0
                while read vconf_line; do
                    [ "${vconf_line:0:1}" != '#' ] && ((tmp+=1))
                    [ "$tmp" == "$vconf_row" ] && break
                    ((vconf_num+=1))
                done < $vconf_file

                sed "$vconf_num"'a'"$vconf_addline" -i $vconf_file
            else
                sed '$a'"$vconf_addline" -i $vconf_file
            fi
            ;;
        'del')
            if [ "$(is_num $vconf_row)" == 1 ]; then
                vconf_num=1 tmp=0
                while read vconf_line; do
                    [ "${vconf_line:0:1}" != '#' ] && ((tmp+=1))
                    [ "$tmp" == "$vconf_row" ] && break
                    ((vconf_num+=1))
                done < $vconf_file
                sed "$(($vconf_num))"'s/^/# /' -i $vconf_file # 注释
                # sed "$(($vconf_delline+1))"'d;' -i $vconf_file # 删除
                # eval sed "$(($num-1))"'a'\"$var_str\" -i $file
            fi
            ;;
        'show-column')
            echo "$(cat $tmp_file | sed -n 1'!p;' | awk "{print \$$vconf_col}")"
            ;;
        'show-row')
            if [ "$(is_num $vconf_row)" == 1 ]; then
                vconf_num=$vconf_row
            else
                vconf_num=1
                for i in $(cat $tmp_file | sed -n 1'!p;' | awk "{print \$$vconf_col}"); do
                    if [ "$i" == "$vconf_row" ]; then
                        break
                    fi
                    ((vconf_num+=1))
                done
            fi
            [ "$vconf_lines" -ge "$vconf_num" ] && row_ctx="$(cat $tmp_file | sed -n "$(($vconf_num+1))"'p;')"
            if [ -n "$vconf_exp" ]; then
                for i in $vconf_list; do
                    eval tmp=\$$i
                    eval $i=\'$(echo "$row_ctx" | awk "{print \$$tmp}")\'
                done
            fi
            ;;
        'show-value')
            vconf_num=1
            for i in $(cat $tmp_file | sed -n 1'!p;' | awk "{print \$$vconf_col}"); do
                if [ "$i" == "$vconf_row" ]; then
                    break
                fi
                ((vconf_num+=1))
            done
            echo "$(cat $tmp_file | sed -n "$(($vconf_row+1))"'p;' | awk "{print \$$vconf_col}")"
            ;;
        '1')
            vconf_num=0
            for i in $(cat $tmp_file | sed -n $(($rownum+1))'p;'); do
                eval ${vconf_list[$vconf_num]}="\$i"
                ((vconf_num+=1))
            done
            [ "$vconf_lines" -ge "$rownum" ] && vconf_exp=1
            ;;
        'format')
            vconf_format $vconf_file
            ;;
        *)
            echo "unsupport!"
            ;;
    esac

    rm $tmp_file

    if [ -z "$vconf_exp" ]; then
        for i in $vconf_list; do
            eval unset $i
        done
    fi

    return $vconf_ret

    # num=1
    # for i in $(cat $tmp_file | sed -n 1'!p;' | awk "{print \$$col}"); do
    #     echo i $i $row >&2
    #     if [ "$i" == "$row" ]; then
    #         rownum=$num
    #         break
    #     fi
    #     ((num+=1))
    # done

    # elif [ "$(is_num $col1)" == 1 -a "$(is_num $rownum)" == 1 ]; then
    # echo "$(cat $tmp_file | sed -n "$(($rownum+1))"'p;' || awk "{print \$$col1}")"

    # if [ "$mode" == 'l' ]; then
    #     echo "$rownum"
    # elif [ "$mode" == 'p' ]; then
    #     echo "$(cat $tmp_file | sed -n $(($rownum+1))'p;')"

    # num=0
    # for i in $(cat $tmp_file | sed -n $(($rownum+1))'p;'); do
    #     eval ${list[$num]}="\$i"
    #     ((num+=1))
    # done
}

[[ "${0##*/}" =~ "lib.vconf" ]] && "$@"
