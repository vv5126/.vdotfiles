# cat << ►_◄ > /dev/null

# Back to indentation          ^
# Bottom of history            G
# Clear selection              Escape
# Copy selection               Enter
# Cursor down                  j
# Cursor left                  h
# Cursor right                 l
# Cursor to bottom line        L
# Cursor to middle line        M
# Cursor to top line           H
# Cursor up                    k
# Delete entire line           d
# Delete/Copy to end of line   D
# End of line                  $
# Go to line                   :
# Half page down               C-d
# Half page up                 C-u
# Jump forward                 f
# Jump to forward              t
# Jump backward                F
# Jump to backward             T
# Jump again                   ;
# Jump again in reverse        ,
# Next page                    C-f
# Next space                   W
# Next space, end of word      E
# Next word                    w
# Next word end                e
# Other end of selection       o
# Paste buffer                 p
# Previous page                C-b
# Previous word                b
# Previous space               B
# Quit mode                    q
# Rectangle toggle             v
# Scroll down                  C-Down or C-e
# Scroll up                    C-Up or C-y
# Search again                 n
# Search again in reverse      N
# Search backward              ?
# Search forward               /
# Start of line                0
# Start selection              Space
# Top of history               g

# prefix ? 显示快捷键帮助
# prefix C-o 调换窗口位置，类似与vim 里的C-w
# prefix 空格键 采用下一个内置布局
# prefix ! 把当前窗口变为新窗口
# prefix q 显示分隔窗口的编号
# prefix o 跳到下一个分隔窗口
# prefix 上下键 上一个及下一个分隔窗口
# prefix C-方向键 调整分隔窗口大小
# prefix c 创建新窗口
# prefix l 切换到最后使用的窗口
# prefix w 以菜单方式显示及选择窗口
# prefix ; 切换到最后一个使用的面板
# prefix x 关闭面板
# prefix & 关闭窗口
# prefix s 以菜单方式显示和选择会话
# prefix d 退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话
# set == set-option
# setw == set-window-option
# bind == bind-key
# unbind ==unbind-key
# C-c == ^c
# run == run-shell

# -- general -------------------------------------------------------------------
# set -g default-shell /usr/bin/zsh

unbind C-l # do not clear history.

# rebind prefix
unbind C-b
set -g prefix C-q
bind C-q send-prefix

set-option -g allow-rename off
# reload configuration
unbind r
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'
bind C-r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'
bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

bind-key ^D detach-client

# 24 hour clock
setw -g clock-mode-style 2
set-window-option -g clock-mode-colour colour64 #green

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

setw -g xterm-keys on
set -sg repeat-time 600                   # increase repeat timeout
set -s quiet on                           # disable various messages

# over 2.1 (tmux -V)
set-option -g mouse on

# Create splits and vertical splits
unbind s
unbind '"'
unbind %

# parameter -h, -p %, -l width, -v, -c path.
bind-key v  split-window -h -p 50
bind-key ^V split-window -h -p 50
bind-key s  split-window -p 50
bind-key ^S split-window -p 50

bind C-c new-window

# sends input to all panes in a given window.
# bind e setw synchronize-panes on
# bind E setw synchronize-panes off

# re layout
# bind-key h select-layout even-horizontal
# bind-key v select-layout even-vertical

# -- display -------------------------------------------------------------------

set -g base-index 1         # start windows numbering at 1
setw -g pane-base-index 1   # make pane numbering consistent with windows

setw -g automatic-rename on # rename window to reflect current program
set -g renumber-windows on # renumber windows when a window is closed

set -g display-panes-time 1000 # slightly longer pane indicators display time
# -- navigation ----------------------------------------------------------------

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
# Change active window
# bind-key -r C-h select-window -t :-
# bind-key -r C-l select-window -t :+

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# pane resizing
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
#bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
#bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
#bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
#bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
#bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"
# -- list choice ---------------------------------------------------------------

bind -t vi-choice h tree-collapse
bind -t vi-choice l tree-expand
run 'tmux bind -t vi-choice K start-of-list 2> /dev/null'
run 'tmux bind -t vi-choice J end-of-list 2> /dev/null'
bind -t vi-choice H tree-collapse-all
bind -t vi-choice L tree-expand-all
bind -t vi-choice Escape cancel

# -- edit mode -----------------------------------------------------------------

bind -ct vi-edit H start-of-line
bind -ct vi-edit L end-of-line
bind -ct vi-edit q cancel
bind -ct vi-edit Escape cancel

# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode
bind b list-buffers  # list paster buffers
bind p paste-buffer  # paste from the top pate buffer
bind P choose-buffer # choose which buffer to paste from
bind ^p pasteb

unbind-key -t vi-copy Enter
bind -t vi-copy V select-line
bind -t vi-copy v begin-selection
bind -t vi-copy C-v rectangle-toggle
bind -t vi-copy y copy-selection
bind -t vi-copy Escape cancel
bind -t vi-copy H start-of-line
bind -t vi-copy L end-of-line

#bind-key -t vi-copy Escape clear-selection
#bind-key -t vi-copy C-c cancel
#bind-key -t vi-copy C-a start-of-line
#bind-key -t vi-copy C-e end-of-line
#bind-key -t vi-copy w next-word
#bind-key -t vi-copy e next-word-end
#bind-key -t vi-copy b previous-word
#bind-key -t vi-copy g top-line
#bind-key -t vi-copy G bottom-line
#bind-key -t vi-copy Space next-space
#bind-key -t vi-copy W next-space
#bind-key -t vi-copy / search-forward
#bind-key -t vi-copy ? search-backward
#bind-key -t vi-copy C-n page-up
#bind-key -t vi-copy C-f page-down
#bind-key -t vi-copy C-u scroll-up
#bind-key -t vi-copy    C-y scroll-up
#bind-key -t vi-copy      K scroll-up
#bind-key -t vi-copy   C-Up scroll-up
#bind-key -t vi-copy C-d scroll-down

#bind-key -t vi-copy Y copy-line
#bind-key -t vi-copy V copy-end-of-line

#bind-key -t vi-copy    C-h cursor-left
#bind-key -t vi-copy  Enter copy-selection
#bind-key -t vi-copy  Space begin-selection
#bind-key -t vi-copy      $ end-of-line
#bind-key -t vi-copy      , jump-reverse
#bind-key -t vi-copy      1 start-number-prefix
#bind-key -t vi-copy      2 start-number-prefix
#bind-key -t vi-copy      3 start-number-prefix
#bind-key -t vi-copy      4 start-number-prefix
#bind-key -t vi-copy      5 start-number-prefix
#bind-key -t vi-copy      6 start-number-prefix
#bind-key -t vi-copy      7 start-number-prefix
#bind-key -t vi-copy      8 start-number-prefix
#bind-key -t vi-copy      9 start-number-prefix
#bind-key -t vi-copy      : goto-line
#bind-key -t vi-copy     \; jump-again
#bind-key -t vi-copy      B previous-space
#bind-key -t vi-copy      D copy-end-of-line
#bind-key -t vi-copy      F jump-backward
#bind-key -t vi-copy      G history-bottom
#bind-key -t vi-copy      M middle-line
#bind-key -t vi-copy      N search-reverse
#bind-key -t vi-copy      T jump-to-backward
#bind-key -t vi-copy      E next-space-end
#bind-key -t vi-copy      ^ back-to-indentation
#bind-key -t vi-copy      f jump-forward
#bind-key -t vi-copy      g history-top
#bind-key -t vi-copy      h cursor-left
#bind-key -t vi-copy      j cursor-down
#bind-key -t vi-copy      k cursor-up
#bind-key -t vi-copy     Up cursor-up
#bind-key -t vi-copy      l cursor-right
#bind-key -t vi-copy      n search-again
#bind-key -t vi-copy      t jump-to-forward
#bind-key -t vi-copy BSpace cursor-left
#bind-key -t vi-copy  NPage page-down
#bind-key -t vi-copy  PPage page-up
#bind-key -t vi-copy   Down cursor-down
#bind-key -t vi-copy   Left cursor-left
#bind-key -t vi-copy  Right cursor-right

# Pane border
# set -g pane-border-bg colour234
# set -g pane-border-fg colour234
# set -g pane-active-border-bg colour232
# set -g pane-active-border-fg colour232

# -- general end ---------------------------------------------------------------

# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# -- statusbar -----------------------------------------------------------------
set -g status on
# set -g status-attr dim
set -g status-justify centre
set -g status-fg white
set -g status-bg colour234

# Default window title colors
set-window-option -g window-status-fg colour244 #base0
set-window-option -g window-status-bg default
set-window-option -g window-status-attr dim

# set -g status-left-attr bright
# set -g status-left-length 60
# set -g status-left "#[default]» #[fg=colour187]#S #[default]• #[fg=colour187]w#I.p#P#[default]"
set -g status-left '#[fg=colour235,bg=colour252,bold] ❐ #S #H #[fg=colour252,bg=colour238,nobold]⮀#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]⮀'
# set -g status-left “#(/home/user/.vim/bundle/tmux-powerline/powerline.sh left)”

# set -g status-right-attr bright
# set -g status-right-length 90
set -g status-right "#[fg=yellow,bright][ #[fg=cyan]#W #[fg=yellow] ]#[default] #[fg=magenta]%a #[fg=yellow,bright]- %Y.%m.%d #[fg=green]%H:%M #[default]"
# set -g status-right "#(home/user/.vim/bundle/tmux-powerline/powerline.sh right)"

# setw -g window-status-alert-attr bold
# setw -g window-status-alert-fg colour255
# setw -g window-status-alert-bg colour160

# set -g window-status-format "#[fg=colour235,bg=colour252,bold] #I #W "
# setw -g window-status-format '#[fg=blue,bold]#I #T#[default] '

# setw -g window-status-current-attr bright
# setw -g window-status-current-fg yellow
# setw -g window-status-current-bg black
# setw -g window-status-current-format '#[fg=blue,bold,reverse]#I #T#[default] '
set -g window-status-current-format "#[fg=colour234,bg=colour39]⮀#[fg=black,bg=colour39,noreverse,bold] #I: #W #[fg=colour39,bg=colour234,nobold]⮀"

# set -g pane-border-fg colour245
# set -g pane-active-border-fg colour39

# Message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange

# Pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange

# message
# set -g message-attr dim
# set -g message-fg black
# set -g message-bg blue

# modes
setw -g mode-attr bold
setw -g mode-fg blue
setw -g mode-bg black

# titles
set -g set-titles on                        # set terminal title
set -g set-titles-string '#h ❐ #S ● #I #W'

# ------------------------------------------------------------------------------
# deal

# zoom pane <-> window
#http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/tmux-zoom.sh
# bind z run "/home/user/.bin/base/tmux-zoom"

set -g set-clipboard on
bind y run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"
# move x clipboard into tmux paste buffer
bind C-p run "tmux set-buffer \"$(xclip -o -sel clipbaord)\"; tmux paste-buffer"
# move tmux copy buffer into x clipboard
bind C-y run "tmux show-buffer | xclip -i -sel clipbaord"

bind-key m command-prompt -p "Man:" "split-window 'man %%'"
# Enable clipboard
#set-option -g default-command \
#'which reattach-to-user-namespace >/dev/null 2>&1 && \
#reattach-to-user-namespace -l bash || bash'

# find session
# bind C-f command-prompt -p find-session 'switch-client -t %%'

#new -s work # 新建名为 work 的会话
#neww rtorrent # 启动 rtorrent
#selectw -t 3 # 默认选择标号为 3 的窗口

# bind m command-prompt "splitw 'exec man %%'"
# bind @ command-prompt "splitw 'exec perldoc -t -f %%'"
# bind '~' splitw htop
# bind ! splitw ncmpcpp

# activity

# Enable visual notification
set-window-option -g monitor-activity on

# Enable visual notification
set-option -g visual-activity on

# Status-position to move the status line to the top of the screen
set-option -g status-position top

set -g terminal-overrides "*88col*:colors=88,*256col*:colors=256,xterm*:colors=256"
# bind C-[ run '~/.vim/bundle/tmux-powerline/mute_powerline.sh left' # Mute left statusbar.

# ------------------------------------------------------------------------------
# unused
# bind-key z kill-session
# bind e lastp
# bind q killp
# bind ^a last-window        # move to last active window
# bind ^q killw

# clear both screen and history
# bind -n C-l send-keys C-l \; run 'tmux clear-history'

# ------------------------------------------------------------------------------
# have repeated
# set -g status-utf8 on                     # expect UTF-8
# setw -g utf8 on
# set -g history-limit 10000                 # boost history
# set -g status-interval 10     # redraw status line every 10 seconds
# set -g default-terminal "screen-256color" # colors!
# set -g default-command /usr/bin/zsh
# set -sg escape-time 0                      # fastest command sequences
# set -g display-time 500      # slightly longer status messages display time
# ------------------------------------------------------------------------------
# bad
# Ring the bell if any background window rang a bell
# set -g bell-action any

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Misc

# ------------------------------------------------------------------------------
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# ------------------------------------------------------------------------------

# # Other examples:
# # set -g @plugin 'github_username/plugin_name'

# # set -g @plugin 'git@github.com/user/plugin'
# # set -g @plugin 'git@bitbucket.com/user/plugin'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
set -g @plugin 'tmux-plugins/tmux-resurrect'

set -g @plugin 'tmux-plugins/tmux-battery'
set -g status-right '#{battery_status_bg} Batt: #{battery_icon} #{battery_percentage} | %a %h-%d %H:%M '

# ------------------------------------------------------------------------------
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
# ------------------------------------------------------------------------------
