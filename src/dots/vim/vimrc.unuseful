" vim: set filetype=vim sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" need 将当前不用的buffer移动到win
" buffer 交换
" nnoremap <buffer> <nowait> <Leader>w w
"---------------------------------------------------
"python 插件
if v:version < 704
    Bundle 'Python-mode-klen'
endif
python_calltips
Bundle 'Pydiction' "补全提示+
let g:pydiction_menu_height = 20
let g:pydiction_location = '.vim/pydiction-1.2/complete-dict'
pythoncomplete  vim自带的python补全提示
VimPdb          调试Python程序+
Bundle 'pyflakes' "Python代码检查+
Bundle 'pytest'
Bundle 'pep8'
Bundle 'pyclewn'
jang
Bundle 'django_templates.vim'
Bundle 'Django-Projects'
Bundle 'djangojump'
Bundle 'hdima/python-syntax'
Bundle 'hynek/vim-python-pep8-indent'
Bundle 'kevinw/pyflakes-vim'
""""""""""""""""""""""""""""""
" => JavaScript section
"""""""""""""""""""""""""""""""
au FileType javascript call JavaScriptFold()
au FileType javascript setl fen
au FileType javascript setl nocindent

au FileType javascript imap <c-t> AJS.log();<esc>hi
au FileType javascript imap <c-a> alert();<esc>hi

au FileType javascript inoremap <buffer> $r return
au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi

function! JavaScriptFold()
    setl foldmethod=syntax
set foldmethod=marker
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

""""""""""""""""""""""""""""""
" => html section
""""""""""""""""""""""""""""""
"Bundle 'FredKSchott/CoVim'
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

"rkdown to HTML
nmap md :!~/.vim/markdown.pl % > %.html <CR><CR>
nmap fi :!firefox %.html & <CR><CR>
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
au FileType html setlocal dict+=~/.vim/dict/javascript.dict
au FileType html setlocal dict+=~/.vim/dict/css.dict
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig

""""""""""""""""""""""""""""""
" => markdown section
""""""""""""""""""""""""""""""
"markdown配置
au BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn}   set filetype=mkd
au BufRead,BufNewFile *.{go}   set filetype=go
au BufRead,BufNewFile *.{js}   set filetype=javascript

au FileType scale setlocal dict+=~/.vim/dict/scale.dict
au FileType javascript setlocal dict+=~/.vim/dict/javascript.dict
au FileType php setlocal dict+=~/.vim/dict/php_funclist.dict
au FileType css setlocal dict+=~/.vim/dict/css.dict
au FileType css set omnifunc=csscomplete#CompleteCSS
au FileType css setlocal omnifunc=csscomplete#CompleteCSS
au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

""""""""""""""""""""""""""""""
" => syntastic section
""""""""""""""""""""""""""""""
"syntastic相关
" execute pathogen#infect()
let g:syntastic_python_checkers=['pylint']
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"---------------------------------------------------
"---------------------------------------------------
"java 插件
" Bundle 'Javascript-OmniCompletion-with-YUI-and-j'
" Bundle 'JavaScript-Indent'
" Bundle 'Better-Javascript-Indentation'
" Bundle 'jslint.vim'
" Bundle 'pangloss/vim-javascript'
" coffee-scrpit support
" Bundle 'kchmck/vim-coffee-script'
"---------------------------------------------------
" js 推荐：****
" jsbeautify的设置
" Bundle '_jsbeautify'
" nnoremap <leader>_ff :call g:Jsbeautify()<CR>
" Bundle 'JSON.vim'
" Bundle 'jQuery'
"---------------------------------------------------
""""""""""""""""""""""""""""""
" => gui section
""""""""""""""""""""""""""""""
" for gvim
" highlight CursorLine   cterm=NONE ctermbg=black guibg=black
" highlight CursorColumn   cterm=NONE ctermbg=black guibg=black
"设置隐藏gvim的菜单和工具栏 F2切换
"  set guioptions-=m
"  set guioptions-=T
"  map <silent> <F2> :if &guioptions =~# 'T' <Bar>
"         \set guioptions-=T <Bar>
"         \set guioptions-=m <bar>
"     \else <Bar>
"         \set guioptions+=T <Bar>
"         \set guioptions+=m <Bar>
"     \endif<CR>
"GUI界面里的字体，默认有抗锯齿
" set guifont=Inconsolata:h12
" set guifont=Courier_New:h10:cANSI   " 设置字体
" set guifont=YaHei\ Consolas\ Hybrid\ 11.5
" highlight StatusLine guifg=SlateBlue guibg=Yellow
" highlight StatusLineNC guifg=Gray guibg=White
set guitablabel=%t
set go=                     " 不要图形按钮
set langmenu=zh_CN.UTF-8    "菜单使用的语言
" Set font according to system
if (g:iswindows==1)
    set gfn=Bitstream\ Vera\ Sans\ Mono:h10
else
    set gfn=Monospace\ 10
    set shell=/bin/bash
endif


" 禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

"在gvim中高亮当前行
if (g:isGUI)
    hi cursorline guibg=#333333
    hi CursorColumn guibg=#333333
    set guifont=Consolas\ 14
    set guifontwide=Consolas\ 14
endif
" 设置字符集编码，默认使用utf8
" if (g:isWin)
"     let &termencoding=&encoding " 通常win下的encoding为cp936
"     set fileencodings=utf8,cp936,ucs-bom,latin1
" endif
"
"字体的设置
set guifont=Consolas,Bitstream_Vera_Sans_Mono:h9:cANSI "设置gui下的字体
set guifont=Courier_New:h10:cANSI   " 设置字体
set gfw=幼圆:h10:cGB2312

" -------------------gui-----------------

""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
autocmd BufEnter *.py set cc=81 " 打开py文件81行高亮
autocmd BufNewFile,BufRead *.py,*.pyw set filetype=python
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python inoremap <buffer> $r return
au FileType python inoremap <buffer> $i import
au FileType python inoremap <buffer> $p print
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class
au FileType python map <buffer> <leader>2 /def
au FileType python map <buffer> <leader>C ?class
au FileType python map <buffer> <leader>D ?def
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab


autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

"文件类型切换
 nmap <leader>fj :set ft=javascript<CR>

"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

"常用知识
" :noremap 普通，可视和操作符等待模式
" :vnoremap 可视模式
" :nnoremap 普通模式
" :onoremap 操作符等待模式
" :noremap! 插入和命令行模式
" :inoremap 插入模式
" :cnoremap 命令行模式
" :h option-list "查看set项
"
" let 变量名 = 数值
" g: 全局变量（在函数中访问全局变量必须使用该前缀，不加前缀的话则认为是函数内的局部变量）；
" s: 变量名只在当前脚本中有效；

" 配置多语言环境
" 以下列出了和语言编码的相关的设置：
" 环境变量 LANG（使用的语言）；
" 环境变量 LC_CTYPE（使用的内部编码）；
" Vim 选项 encoding(enc)（Vim 的内部编码）；不管文件的编码如何，不管如何显示和输入， Vim 内部使用的编码是 UTF-8；这是国际化支持的基础。
" Vim 选项 termencoding(tenc)（Vim 在与屏幕/键盘交互时使用的编码）；
" Vim 选项 fileencoding(fenc)（Vim 当前编辑的文件在存储时的编码）；
" Vim 选项 fileencodings(fencs)（Vim 打开文件时的尝试使用的编码）；
" Vim 选项 ambiwidth（对“不明宽度”字符的处理方式；Vim 6.1.455 后引入）。

" if has("multi_byte")
"     set termencoding=utf-8
"     set fileencoding=utf-8
"     " set fileencoding=gb18030
"     " set fileencoding=gb2312
"     " set fileencodings=euc-jp,iso-8859-1
"     set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,utf-16,big5,gb2312,chinese
"
"     if v:lang=~? '^\(zh\)\|\(ja\)\|\(ko\)'
"         set ambiwidth=double
"     endif
" endif
" -------------------------------------------------
if 0    " NerdTree的设置
        " o 打开关闭文件或者目录         t 在标签页中打开
        " T 在后台标签页中打开           ! 执行此文件
        " p 到上层目录                   P 到根目录
        " K 到第一个节点                 J 到最后一个节点
        " u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
        " r 递归刷新当前目录             R 递归刷新当前根目录
        let NERDTreeShowFiles=1
        let NERDTreeShowLineNumbers=1
endif
" -------------------------------------------------
" 参考
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
" bufname("")
" let l:pattern = escape(@", '/.*$^~[]')
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
function AddTitle()
	call append(0,"/*=============================================================================")
	normal m'
	execute '/# *Last modified:/s@:.*$@\=strftime(":\t%Y-%m-%d %H:%M")@'
	normal ''
	normal mk
	execute '/# *Filename:/s@:.*$@\=":\t\t".expand("%:t")@'
	execute "noh"
	normal 'k
	echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
	let n=1
	while n < 10
		let line = getline(n)
		if line =~ '^\#\s*\S*Last\smodified:\S*.*$'
			call UpdateTitle()
			return
		endif
		let n = n + 1
	endwhile
	call AddTitle()
    let c = inputlist(['select one:',"1.c","2.py"])
    echo "\n"
    if c == 1
        let l:dir = system("getdir_git_repo")
        let l:dir = matchstr(l:dir, '/.*')
    elseif c == 2
        echon c
    endif
endfunction
" -------------------------------------------------
