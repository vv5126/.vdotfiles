" design by wgao. {{

" spf13 before. {
    set nocompatible        " Must be first line
    "===============================================================================+
    source ~/.vim/bundle/spf13-vim/.vimrc.before
    "===============================================================================+
" }

" add my before config here. {

    " let g:spf13_bundle_groups=['general', 'writing', 'programming', 'python', 'misc',]
    let g:spf13_bundle_groups=['general', 'writing', 'programming', 'youcompleteme', 'python', 'misc',]

" }

" spf13 vundle. {
    "===============================================================================+
    if ! isdirectory($HOME."/.vim/bundle/vundle")
        echo "you should setup vundle frist!"
    else
        source ~/.vim/bundle/spf13-vim/.vimrc.bundles
    "===============================================================================+
" }

" add my bundles here. {

    "==================================================
    "外部库,借用Bundle.
    " -------------------------------------------------
    if ! isdirectory(expand("~/.vim/bundle/oh-my-zsh"))
        Bundle 'robbyrussell/oh-my-zsh.git'
        Bundle 'gpakosz/.tmux.git'
        Bundle 'erikw/tmux-powerline.git'
    endif
    "==================================================

    " Brief help
    " :BundleList          - list configured bundles
    " :BundleInstall(!)    - install(update) bundles
    " :BundleSearch(!) foo - search(or refresh cache first) for foo
    " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

    " 刷新插件
    nmap <F6> :BundleInstall<cr>
    " 更新插件
    nmap <S-F6> :BundleList<cr>

    " -------------------------------------------------
    "  has been integrate into spf13.
    " -------------------------------
    " 允许你在 Vim中按等号、冒号、表格等来对齐文本
    " 'Tabular'
    " ex: :TAb /=
    " -------------------------------
    " 可视化的方式能将相同缩进的代码关联起来
    " 'nathanaelkane/vim-indent-guides'
    " 快捷键 i 开/关缩进可视化
    " :nmap <silent> <Leader>i <Plug>IndentGuidesToggle
    " -------------------------------------------------
    " -------------------------------
    " -------------------------------
    " -------------------------------
    " -------------------------------
    " -------------------------------------------------
    " VimDevIcons - Add Icons to Your Plugins
    Bundle 'ryanoasis/vim-devicons'
    " -------------------------------------------------
    " 查看和自动识别文件的编码格式
    Bundle 'mbbill/fencview'
    let g:fencview_autodetect=1
    " -------------------------------------------------
    " 支持分支的 undo
    Bundle 'sjl/gundo.vim'
    " 调用 gundo 树
    nnoremap <Leader>ud :GundoToggle<CR>
    " -------------------------------------------------
    " 显示缩进对齐线
    Bundle 'Yggdroot/indentLine'
    let g:indentLine_char = '┊'
    map <leader>il :IndentLinesToggle<CR>
    " -------------------------------------------------
    " 显示git diff的插件
    Bundle 'airblade/vim-gitgutter'
    " -------------------------------------------------
    Bundle 'vv5126/wim'
    " -------------------------------------------------
    " vim帮助中文版
    Bundle 'becaning/vimdoccn'
    " -------------------------------------------------
if 0
    " 注释代码用
    Bundle 'tomtom/tcomment_vim'
"对NERD_commenter的设置
" [count],cc 光标以下count行逐行添加注释(7,cc)
" [count],cu 光标以下count行逐行取消注释(7,cu)
" [count],cm 光标以下count行尝试添加块注释(7,cm)
" ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
" 注：count参数可选，无则默认为选中行或当前行
 let NERDSpaceDelims=5       " 让注释符与语句之间留一个空格
 let NERDCompactSexyComs=1   " 多行注释时样子更好看
 let NERDShutUp=1
" 支持单行和多行的选择，//格式
" Toggle单行注释/“性感”注释/注释到行尾/取消注释
map <leader>cc ,c<space>
map <leader>cs ,cs
map cu ;cu
map cs ;c$
endif
    " -------------------------------------------------
    " 在vim里画图
    " Bundle 'DrawIt'
    " -------------------------------------------------
    " 让书签可视化的插件
    " Bundle 'kshenoy/vim-signature'
    " -------------------------------------------------
    " show color, like red yellow #066
    Bundle 'gko/vim-coloresque'
    " -------------------------------------------------
    " 同时高亮多个单词 usage
    Bundle 'Mark--Karkat'
    " <leader>m  mark or unmark the word under (or before) the cursor
    " <leader>r  manually input a regular expression. 用于搜索.
    " <leader>n  clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .
    " <leader>*  当前MarkWord的下一个     <leader>#  当前MarkWord的上一个
    " <leader>/  所有MarkWords的下一个    <leader>?  所有MarkWords的上一个
    " -------------------------------------------------
    " 日历插件,有了它,用vim来写日记很方便
    " Bundle 'itchyny/calendar.vim'
    " let g:calendar_frame = 'default'
    " -------------------------------------------------
    " 任务列表的插件 —— TaskList.vim，方便管理项目中的 TODO、FIXME 等标签.
    " Bundle 'TaskList.vim'
    " nnoremap <leader>v <Plug>TaskList
    " -------------------------------------------------
    " repeat 支持使用.来重复执行一些插件的命令（如speeddating, surround等)
    " Bundle 'repeat.vim'
    " -------------------------------------------------
    " 'jiangmiao/auto-pairs'
    " 给选中的文字加上引号`,选中后,\加上你想要添加的符号,比如选中abc后,\(,得到(abc)
    " Bundle 'Raimondi/delimitMate'
    " -------------------------------------------------
    " 可以在vim和tmux的任何组合间无缝切换
    " Bundle 'christoomey/vim-tmux-navigator'
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
" }

" spf13. {
    "===============================================================================+
    endif
    source ~/.vim/bundle/spf13-vim/.vimrc
    "===============================================================================+
" }

" add my main set here. {

    " Environment {
        filetype off                       " 关闭文件类型侦测
        " syntax enable                      " 开启语法高亮功能
        set nofen
        set nomodeline                     " 不检查模式行
        set timeoutlen=500                 " 毫秒计的等待键码或者映射的键序列完成的时间
        set selection=exclusive            " 对选择区操作不包含光标所在字符
        set lazyredraw                     " 执行宏时不重画
        set ttyfast                        " 表明使用的是快速终端连接
        set linebreak                      " 防止折行时打断单词，将整个词进行折行。
        set display=lastline                "长行显示，解决@@@@的问题
        set numberwidth=4                  " 行号栏的宽度
        set fillchars=vert:\ ,stl:\        " 在被分割的窗口间显示空白，便于阅读,stlnc:\(加了这个wm分割兰有\\\\\\\\\\\\\)
        set cmdheight=1                    " 命令行（在状态行下）的高度，默认为1
        set noeb                           " 去掉输入错误的提示声音
        set noerrorbells                   " 关闭错误信息响铃
        set novisualbell                   " 关闭使用可视响铃代替呼叫
        " set undofile                       " 无限undo
        set t_vb=                          " 置空错误铃声的终端代码
        set showtabline=1                  " 指定何时显示带有标签页标签的行,这里设置为至少有两个以上才显示.
        set confirm                        " 退出、写入等有未保存的改动或文件只读时询问
        set noswapfile                     " 关闭交换文件
        set nobackup                       " 覆盖文件时不备份
        set backupcopy=yes                 " 设置备份时的行为为覆盖
        set nowritebackup                  " 不写入备份文件
        set shell=/bin/bash
        set mousehide                      " 输入文件时隐藏鼠标
        set nospell
        set matchtime=0
        set selectmode=mouse,key
        set bufhidden=hide
        set wildignore+=*.bak,*.o,*.e,*~,*.obj,.git,*.pyc
        set autoread                       " 设置当文件被改动时自动载入
        set completeopt=preview,longest,menuone "代码补全
        " :help digraph-table 特殊字符表
        " set rtp+=xxx/vim                   " 自定义vim目录位置
        " 好用的复制、粘贴
        vmap <C-c> "+y
        imap <C-v> <Esc>"*pa
        "=====================================================
        " tab的设定
        " -------------------------------------------------
        set smarttab                       " 在行和段开始处使用制表符
        set tabstop=8                      " 设置编辑时制表符占用空格数
        " set shiftwidth=8                   " 设置格式化时制表符占用空格数
        " set softtabstop=8                  " 让 vim 把连续数量的空格视为一个制表符, 使得按退格键时可以一次删掉 4 个空格
        " set expandtab                      " 用空格代替制表符
        " set noexpandtab                    " 不要用空格代替制表符
        autocmd FileType sh setlocal shiftwidth=4
        "=====================================================
        " 处理折叠行的左右移动
        noremap j gj
        noremap k gk
        "=====================================================
        " -------------------------------------------------
        " 支持代码折叠
        " -------------------------------------------------
        set foldlevel=1               " 设置折叠层数为
        " set foldenable                     " 允许折叠
        " set foldclose=all                  " 设置为自动关闭折叠
        " set foldmethod=syntax              " 用语法高亮来定义折叠
        " set foldmethod=manual              " 手动折叠
        set foldmethod=marker              " 依标志折叠
        " set foldmethod=indent              " 基于缩进或语法进行代码折叠
        set foldcolumn=0                   " 设置折叠区域的宽度
        " 代码折叠开关
        " nmap <F1> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
        " -------------------------------------------------
        "=====================================================
        " buffer 设置
        "=====================================================
        " buffer缩放
        nmap -- 5<C-w>-
        nmap ++ 5<C-w>+
        nmap >> 5<C-w>>
        nmap << 5<C-w><
        "===================================================
        nnoremap <C-]> g]
        "===================================================

        " Switching between buffers.
        nnoremap <C-h> <C-W>h
        nnoremap <C-j> <C-W>j
        nnoremap <C-k> <C-W>k
        nnoremap <C-l> <C-W>l
        nnoremap <C-x> <c-w>\|<c-w>_
        "inoremap <C-h> <Esc><C-W>h
        "inoremap <C-j> <Esc><C-W>j
        "inoremap <C-k> <Esc><C-W>k
        "inoremap <C-l> <Esc><C-W>l
    " }

    " statusline {
        highlight StatusLine cterm=bold ctermfg=gray ctermbg=black
        highlight LineNr ctermfg=gray ctermbg=black                       " 侧边颜色
        highlight User1 ctermfg=gray
        highlight User2 ctermfg=green
        highlight User3 ctermfg=red
        highlight User4 ctermfg=yellow
        highlight User5 ctermfg=black
        highlight User6 ctermfg=blue
        highlight User7 ctermbg=black
        set statusline=%7*\ %3*%{HasPaste()}%*[file:\ %2*%t%r%h%w%*]%3*%m%*[dir:\ %<%2*%{CurDir()}%*]%=\ \ \ \ \ \ \ \ \ \ %4*[%{&ff}][%{&encoding}]%6*%y%*[Line:%2*%l%*/%2*%L%*,Column:%2*%c%*][%2*%p%%%*]

        function! HasPaste()
            if &paste
                return '[PASTE MODE]'
            else
                return ''
            endif
        endfunction

        function! InsertStatuslineColor(mode)
            if a:mode == 'i'
                hi User7 ctermbg=red
            else
                hi User7 ctermbg=black
            endif
        endfunction

        au InsertEnter * call InsertStatuslineColor('i')
        au InsertLeave * call InsertStatuslineColor('')
    " }

    " leader {
        " let g:spf13_leader=';'
        " let g:spf13_localleader=';'
        let mapleader        = ";"
        let maplocalleader   = ";"
        let g:mapleader      = ";"
        let g:maplocalleader = ";"
    " }

    " something good {
        " 常用缩写
        iab zhushi <c-r>='"====================================================='<cr><cr>" <cr>"=====================================================
        iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>

        " 对选中代码进行匹配
        vnoremap <silent> * :call VisualSearch('f')<CR>
        vnoremap <silent> # :call VisualSearch('b')<CR>
        " When you press gv you vimgrep after the selected text
        " vnoremap <silent> gv :call VisualSearch('gv')<CR>

        "Space to command mode.
        nnoremap <space> :
        vnoremap <space> :

        "光标所在词搜索
        nnoremap <leader>f *
        nnoremap <leader>fa :call SET_ISK()<cr>

        "使用<leader>空格来取消搜索高亮
        nnoremap <silent> <leader><space> :noh<cr>

        "esc的映射
        imap jj <esc>

        "插入模式下移动
        inoremap <c-h> <c-left>
        inoremap <c-j> <left>
        inoremap <c-k> <right>
        inoremap <c-l> <c-right>
        inoremap <C-a> <HOME>
        inoremap <C-e> <END>

        "去空行
        nnoremap <leader>db :g/^\s*$/d<cr>

        "清除末尾空格
        nnoremap <leader>ds :%s/\s\+$//<cr>

        "设置tab宽度
        map <leader>t2 :setlocal shiftwidth=2<cr>
        map <leader>t4 :setlocal shiftwidth=4<cr>
        map <leader>t8 :setlocal shiftwidth=8<cr>

        " Bash like keys for the command line
        cnoremap <C-A> <Home>
        cnoremap <C-E> <End>
        cnoremap <C-K> <C-U>
        cnoremap <C-P> <Up>
        cnoremap <C-N> <Down>

        " 为选中代码加括号啥的
        vnoremap 1 <esc>`>a)<esc>`<i(<esc>
        vnoremap 2 <esc>`>a]<esc>`<i[<esc>
        vnoremap 3 <esc>`>a}<esc>`<i{<esc>
        vnoremap 4 <esc>`>a"<esc>`<i"<esc>
        vnoremap 5 <esc>`>a'<esc>`<i'<esc>

        "比较文件
        nnoremap <leader>df :vert diffsplit 
        nnoremap <leader>dff :diffoff<cr>

        "Tabel
        nnoremap <S-q> :tabprevious<CR>
        nnoremap <S-w> :tabnext<CR>
        nnoremap te :tabedit 
        nnoremap tm :tabmove 
        map <leader>1 1gt
        map <leader>2 2gt
        map <leader>3 3gt

        nmap <Leader>tl <Plug>GitGutterPreviewHunk

        " highlight cursorLine cterm=bold ctermfg=green ctermbg=black
        " highlight cursorColumn cterm=bold ctermfg=green ctermbg=black

        "设置鼠标粘贴模式
        nnoremap <leader>mo :call SET_MOUSE()<cr>

        "使用,v来选择刚刚复制的段落，这样可以用来缩进
        " nnoremap <leader>v v`]

        " 清除前面数字加. exaple 12.aaa-->aaa 不适合代码！！！
        " nnoremap ff :1,$s///g

        "=====================================================
        " 切换目录
        "=====================================================
        noremap <leader>1 :execute "cd" expand("%:h")<CR>:execute 'pwd'<cr>
        noremap <leader>2 :call GO_GIT_DIR()<cr>

        function! GO_GIT_DIR()
                let l:dir = system("getdir_git_repo")
                let l:dir = matchstr(l:dir, '/.*')
                exec 'cd' l:dir
                exec 'pwd'
                " echon 'git dir'
        endfunction
        "=====================================================
        map <leader>e :e! ~/.vimrc<cr>
        "自动载入配置文件不需要重启
        autocmd! bufwritepost .vimrc source %
        "=====================================================
        autocmd WinEnter * if &buftype ==#'quickfix' && winnr('$') == 1 | quit |endif
        "=====================================================
        autocmd BufEnter * :syntax sync fromstart
        autocmd WinLeave * lclose
        "=====================================================
        map <C-]> g]
        " gd 代替 *
        " g] 代替 C-]
        "=====================================================


    " }

    " vmode C {
        if &filetype == 'c'

            " autocmd FileType c,cpp set expandtab
            autocmd BufRead *.h set filetype=c
	    autocmd FileType c,cpp setlocal shiftwidth=8
            " -------------------------------------------------
            " set colorcolumn=37                 " 彩色显示一列，用以规范代码
            " highlight ColorColumn ctermbg=green ctermfg=black
            " -------------------------------------------------
            " 第80列往后加下划线
            "au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 80 . 'v.\+', -1)
            " -------------------------------------------------
            " 屏蔽代码
            vmap <Leader>j0 dO#endif<Esc>PO#if 0<cr>#else<Esc>
            vmap <Leader>jz di /*  <Esc>P
	    " 调试
            vmap <Leader>jd dO#endif<Esc>PO#ifdef DEBUG<Esc>
            " -------------------------------------------------
            "切换到函数头或尾
            nmap <tab> [[
            nmap <S-tab> ]]

            nmap  <F4> :!mk<cr>
            nmap  <S-F4> :!mk ycm_conf &<cr>
            " -------------------------------------------------
            " iab wgao1 <c-r>='printk("wgao (l:%d, f:%s, F:%s, p:%d) %d %s\n", __LINE__, __func__, __FILE__, current->pid, 0, "");'<cr>
            iab wgao1 <c-r>='printk("wgao (l:%d, f:%s, F:%s) %d %s\n", __LINE__, __func__, __FILE__, 0, "");'<cr>
            iab wgao2 <c-r>='printf("wgao (l:%d, f:%s, F:%s, p:%d) %d %s\n", __LINE__, __func__, __FILE__, current->pid, 0, "");'<cr>
            " -------------------------------------------------
            nnoremap <leader>ah :call ADD_H()<cr>

            function! ADD_H()
                    let l:filename = substitute(toupper(expand("%:t")), '\.', "_", "g")
                    call append(0,"#ifndef __".l:filename."__")
                    call append(1,"#define __".l:filename."__")
                    call append(2,"")
                    call append('$',"#endif /* __".l:filename."__ */")
            endfunction
            " -------------------------------------------------
            map <leader>b :vs! ~/.vim/buffer<cr>

        endif

    " }

    " good function {
        function! RunShell(Msg, Shell)
            echo a:Msg . '...'
            call system(a:Shell)
            echon 'done'
        endfunction
        " -------------------------------------------------


        "set magic "改变搜索模式使用的特殊字符
        function! SET_MOUSE()
            if &mouse == 'a'
                set mouse=
                echon 'mouse='
            else
                set mouse=a
                echon 'mouse=a'
            endif
        endfunction
        " -------------------------------------------------

        " 获取当前路径，将$HOME转化为~
        function! CurDir()
            let curdir = substitute(getcwd(), $HOME, "~", "g")
            return curdir
        endfunction
        " -------------------------------------------------

        let g:isk_flag=1
        function! SET_ISK()
            if g:isk_flag == 1
                set iskeyword+=.,_,$,@,%,#,-         " 含有此字符皆属于单词
                let g:isk_flag=0
                echon 'more keyword'
            else
                set iskeyword-=.,_,$,@,%,#,-         " 已此为单词分隔符
                let g:isk_flag=1
                echon 'less keyword'
            endif
        endfunction
        " -------------------------------------------------

        " 对选中代码进行匹配
        " From an idea by Michael Naumann
        function! VisualSearch(direction) range
            let l:saved_reg = @"
            execute "normal! vgvy"

            let l:pattern = escape(@", '\\/.*$^~[]')
            let l:pattern = substitute(l:pattern, "\n$", "", "")

            if a:direction == 'b'
                execute "normal ?" . l:pattern . "^M"
            elseif a:direction == 'gv'
                call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
            elseif a:direction == 'f'
                execute "normal /" . l:pattern . "^M"
            endif

            let @/ = l:pattern
            let @" = l:saved_reg
        endfunction

        function! CmdLine(str)
            exe "menu Foo.Bar :" . a:str
            emenu Foo.Bar
            unmenu Foo
        endfunction
    " }

    " 宏 {
        "宏录制相关
        " q+<register> 开始记录命令, <register> 指用户自己定义的a-z中的一个寄存器
        " q 完成记录，退出记录
        " 执行这个宏可以用命令：         @a
        " 也可以加上执行次数：           10@a 执行10次
        " 当你执行过一次@a之后，你可以用@@来重复执行@a
        " 修改宏
        " 1、找个空白行
        " 2、使用命令"ap会看到寄存器a中的命令宏像文本一样出现在这一行，然后编辑这一行。编编辑结束后回到行首。
        " 3、然后用"ay$将正确内容写到寄存器a中，最后删除这一行即可。
        " 4、当你需要向命令宏寄存器中增加内容时，可以用命令qA来向a寄存器增加内容，之后输入你想增加的内容，再使用q结束。
        " 保存和传递宏
        " 1 先建立一个宏。如上
        " 2 在任意一个文件的空白位置normal状态下，命令"ap 即可以把宏的内容显示出来。比如说我的宏是："ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^["
        " 3 这段内容保存或传递。
        " 4 使用命令：let @a="ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^[" 或者参考修改宏的第三步。
        " 5 其他人用@a命令就可以使用你制作的宏了。
    " }

" my plugin config {

if 1 && isdirectory(expand("~/.vim/bundle/vim-multiple-cursors"))
    let g:multi_cursor_next_key='<C-n>'
    let g:multi_cursor_prev_key='<C-p>'
    let g:multi_cursor_skip_key='<C-x>'
    let g:multi_cursor_quit_key='<Esc>'
endif

" -------------------------------------------------

" EasyMotion设置
if 1 && isdirectory(expand("~/.vim/bundle/vim-easymotion"))
    " nmap t <Plug>(easymotion-t2)
    map  ? <Plug>(easymotion-sn)
    omap ? <Plug>(easymotion-tn)
    " map  n <Plug>(easymotion-next)
    " map  N <Plug>(easymotion-prev)
    map <Leader>l <Plug>(easymotion-lineforward)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    map <Leader>h <Plug>(easymotion-linebackward)
    let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

    let g:EasyMotion_do_mapping = 0 " Disable default mappings
    " Bi-directional find motion
    " Jump to anywhere you want with minimal keystrokes, with just one key
    " binding.
    " `s{char}{label}`
    nmap s <Plug>(easymotion-s)
    " or
    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap s <Plug>(easymotion-s2)
    " Turn on case insensitive feature
    let g:EasyMotion_smartcase = 1
endif

" -------------------------------------------------

" 将代码行最后无效的空格标红
" Bundle 'ShowTrailingWhitespace'
" 清除后面空格
  nmap fk :1,$s/ *$//g<cr>
" nmap fk :1,$s/^.*\.//g<cr>
" nmap  <F4> :%s/ *$//g<cr>

" -------------------------------------------------

"YouCompleteMe
if 1 && isdirectory(expand("~/.vim/bundle/YouCompleteMe"))

"**
" 首次使用步骤:
" 1. 获取 YCM 的依赖包
"    cd ~/.vim/bundle/YouCompleteMe/
"    git submodule update --init --recursive
"    follow the README.md 保证安装好cmake
" 2. ./install.py --clang-completer
" 3. done
" 如果失败就使用下面的方法
" 2. 在 http://llvm.org/releases/download.html 找到最新版 LLVM，在Pre-built Binaries
"    下选择适合你发行套件的最新版预编译二进制文件，下载并解压至 ~/xxx/clang+llvm,这里最好将bin目录添加到环境变量，以后有用。
" 3. mkdir and cd ~/ycm_build
"    cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=~/xxx/clang+llvm/ . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
"    make ycm_support_libs
"    cmake -G "Unix Makefiles" . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
" 4. done
" ------------------>>> may be need install python-dev
"*/

 nnoremap <F1> :YcmForceCompileAndDiagnostics<CR>
 let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_conf/ycm_extra_conf_c.py'
 let g:syntastic_always_populate_loc_list = 1
 let g:ycm_always_populate_location_list =1

" 菜单
highlight Pmenu ctermfg=3 ctermbg=black guifg=#005f87 guibg=#EEE8D5
" 选中项
highlight PmenuSel ctermfg=green ctermbg=black guifg=#AFD700 guibg=#106900
" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1
" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0
" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 引入 C++ 标准库tags
"set tags+=/data/misc/software/misc./vim/stdcpp.tags
" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
"inoremap <leader>; <C-x><C-o>
" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=2
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=0
" 收集所有词条
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" 关闭语法检查
let g:ycm_register_as_syntastic_checker = 0

let g:ycm_auto_trigger = 1
" let g:ycm_semantic_triggers = {}
" let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&']

" let g:ycm_register_as_syntastic_checker = 0
let g:syntastic_enable_highlighting = 0


" nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gl :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F3> :YcmDiags<CR>

endif

" -------------------------------------------------
if 0    " NerdTree的设置
        " plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
        " :NERDtree 打开NERD_tree         :NERDtreeClose    关闭NERD_tree
        " o 打开关闭文件或者目录         t 在标签页中打开
        " T 在后台标签页中打开           ! 执行此文件
        " p 到上层目录                   P 到根目录
        " K 到第一个节点                 J 到最后一个节点
        " u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
        " r 递归刷新当前目录             R 递归刷新当前根目录

        let NERDTreeShowFiles=1
        let NERDTreeShowLineNumbers=1
endif
" -------------------------------------------------
" 'Lokaltog/vim-powerline'
" mkfontscale
" mkfontdir
" fc-cache -vf
" rm ~/.vim/bundle/vim-powerline/*.cache
" https://github.com/eugeii/consolas-powerline-vim.git
" https://github.com/powerline/fonts.git
" set guifont=PowerlineSymbols\ for\ Powerline
" let g:Powerline_symbols = 'fancy'

" -------------------------------------------------
" 'majutsushi/tagbar'
" let tagbar_ctags_bin=ctags
" 设置 tagbar 子窗口的位置出现在主编辑区的左边
let tagbar_left=1
" 设置显示／隐藏标签列表子窗口的快捷键。
" nnoremap <Leader>tl :TagbarToggle<CR>
nmap tb :Tagbar<cr>
" 设置标签子窗口的宽度
let tagbar_width=32
" tagbar 子窗口中不显示冗余帮助信息
let g:tagbar_compact=1
" 设置 ctags 对哪些代码元素生成标签
let g:tagbar_type_cpp = {
  \ 'kinds' : [
    \ 'd:macros:1',
    \ 'g:enums',
    \ 't:typedefs:0:0',
    \ 'e:enumerators:0:0',
    \ 'n:namespaces',
    \ 'c:classes',
    \ 's:structs',
    \ 'u:unions',
    \ 'f:functions',
    \ 'm:members:0:0',
    \ 'v:global:0:0',
    \ 'x:external:0:0',
    \ 'l:local:0:0'
   \ ],
   \ 'sro'      : '::',
   \ 'kind2scope' : {
     \ 'g' : 'enum',
     \ 'n' : 'namespace',
     \ 'c' : 'class',
     \ 's' : 'struct',
     \ 'u' : 'union'
   \ },
   \ 'scope2kind' : {
     \ 'enum'     : 'g',
     \ 'namespace' : 'n',
     \ 'class'   : 'c',
     \ 'struct' : 's',
     \ 'union'   : 'u'
   \ }
\ }

" -------------------------------------------------
" 'vim-airline'
let g:airline_theme="dark"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
if !exists('g:airline_symbols')
      let g:airline_symbols = {}
  endif
  let g:airline_symbols.space = "\ua0"

" -------------------------------------------------
if &filetype == 'c'
" 'scrooloose/syntastic 语法检查'
"  let g:syntastic_check_on_open=0
" let g:syntastic_auto_loc_list = 1
"  let g:syntastic_check_on_wq = 0
" let syntastic_loc_list_height = 5
endif
" ------------------------------------------------
" 重复了
" nnoremap <C-n> :CtrlPFunky<Cr>
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" let g:ctrlp_custom_ignore = '\v\.(exe|so|dll)$'
" ------------------------------------------------

" Ctrlp 和 Ctrlp-funky(,fu)
if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
    let g:ctrlp_working_path_mode = 'ra'
    nnoremap <silent> <D-t> :CtrlP<CR>
    nnoremap <silent> <D-r> :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

    if executable('ag')
        let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    elseif executable('ack-grep')
        let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
    elseif executable('ack')
        let s:ctrlp_fallback = 'ack %s --nocolor -f'
        " On Windows use "dir" as fallback command.
    else
        let s:ctrlp_fallback = 'find %s -type f'
    endif
    if exists("g:ctrlp_user_command")
        unlet g:ctrlp_user_command
    endif
    let g:ctrlp_user_command = {
                \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
                \ }

    if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
        " CtrlP extensions
        let g:ctrlp_extensions = ['funky']
        "funky
        nnoremap <Leader>fu :CtrlPFunky<Cr>
    endif
endif

" -------------------------------------------------
" -------------------------------------------------
" 列出当前打开的buffer,可以很容易的切换到和删除选定的buffer,必备插件之一
" \be 全屏方式查看全部打开的文件列表
" \bv 左右方式查看   \bs 上下方式查看
 Bundle 'jlanzarotta/bufexplorer'
 let g:bufExplorerDefaultHelp=0
 let g:bufExplorerShowRelativePath=1
 let g:bufExplorerSortBy = "name"
 map <leader>o :BufExplorer<cr>

Bundle 'fholgado/minibufexpl.vim'
" 切换缓冲区
let g:miniBufExplorerAutoStart = 0
" let g:miniBufExplBRSplit = 0
let g:miniBufExplVSplit = 20
" let g:miniBufExplSplitBelow=1

" 显示/隐藏 MiniBufExplorer 窗口
map <Leader>bl :MBEToggle<cr>
" buffer 切换快捷键
map <C-Tab> :MBEbn<cr>
map <C-S-Tab> :MBEbp<cr>

" -------------------------------------------------
" -------------------------------------------------
" vim中打开终端的功能+
" Bundle 'Shougo/vimshell.vim'
" Please install vimproc Ver.6.0 or above.
" -------------------------------------------------
" color theme浏览插件,列出所有的vim color theme到一个列表中,选中后按回车即可应用
" Bundle 'sjas/csExplorer'
" -------------------------------------------------
" -------------------------------------------------
" -------------------------------------------------
" -------------------------------------------------
" -------------------------------------------------
" }

" 剩余的bundles {
" -------------------------------------------------
"  seems good
" -------------------------------------------------
" 最大化当前panel.
" Bundle 'troydm/zoomwintab.vim'
Bundle 'ZoomWin'
" -------------------------------------------------
"  Bundle 'jeaye/color_coded'
"  let g:color_coded_enabled = 1
"  let g:color_coded_filetypes = ['c', 'cpp', 'objc']
" -------------------------------------------------
"  Bundle 'kassio/neoterm'
"  Bundle 'wincent/terminus'
" -------------------------------------------------
"  Bundle 'rdnetto/YCM-Generator'
" 需要将clang+llvm加入到PATH中
"nnoremap <leader>hf :YcmGenerateConfig<CR>
" -------------------------------------------------
" -------------------------------------------------
"requires Vim to be compiled with Ruby support
"Bundle 'wincent/command-t'
"let g:CommandTMaxHeight = 15
"noremap <leader>j :CommandT<cr>
"noremap <leader>y :CommandTFlush<cr>
" -------------------------------------------------
" Bundle 'ervandew/supertab'
" -------------------------------------------------
"智能补全
" Bundle 'mbbill/code_complete'
" -------------------------------------------------
"列出最近打开过的文件
" Bundle 'mhinz/vim-startify'
" -------------------------------------------------
"Bundle 'cctree'             " 可以查看function的call tree
" -------------------------------------------------
if has('ack')
" 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project
" ack 后端， 需要ack版本不低于2.0
" 可以键入 p 键，将在右侧子窗口中给出该匹配项的完整代码，而不再仅有前后几行。
" 不想跳至任何匹配项，可以直接键入  q 退出 ctrlsf.vim；如果有钟意的匹配项，
" 光标定位该项后回车，立即跳至新 buffer 中对应位置。
Bundle 'dyng/ctrlsf.vim'
Bundle 'ack.vim'
" nnoremap <Leader>sp :CtrlSF<CR>
endif
" -------------------------------------------------
Bundle 'dkprice/vim-easygrep'
let g:EasyGrepMode = 2     " All:0, Open Buffers:1, TrackExt:2, 
let g:EasyGrepCommand = 0  " Use vimgrep:0, grepprg:1
let g:EasyGrepRecursive  = 1 " Recursive searching
let g:EasyGrepIgnoreCase = 1 " not ignorecase:0
let g:EasyGrepFilesToExclude = "*.bak, *~, cscope.*, *.a, *.o, *.pyc, *.bak"
" -------------------------------------------------
" Syntax highlighting for GLib, Gtk+, Xlib, Gimp, Gstreamer, and more. 
" Bundle 'gtk-vim-syntax'
" -------------------------------------------------
" 工程内查找与替换+
Bundle 'grep.vim'
" -------------------------------------------------
" try
"     call fuf#defineLaunchCommand('FufCWD', 'file', 'fnamemodify(getcwd(), ''%:p:h'')')
"     map <leader>t :FufCWD **/<CR>
" catch
" endtry
" map <F7> :FufTag<cr>
" map <C-F7> :FufTaggedFile<cr>
" -------------------------------------------------
" 扩展了vim的%功能,让%可以匹配的,不再仅仅是括号,支持多种语言.必备插件之一
" 'matchit.zip'
" % 正向匹配      g% 反向匹配
" [% 定位块首     ]% 定位块尾
" -------------------------------------------------
" Switch very quickly between your most recently used buffers
if has("ruby")
Bundle 'LustyJuggler'
endif
" -------------------------------------------------
" 使用菜单和热键来编写和执行BASH脚本
"Bundle 'bash-support.vim'
" -------------------------------------------------
" 结构化数据变成漂亮的表
" Bundle 'Stormherz/tablify'
" -------------------------------------------------
"自动排版，可以少打很多空格
" Bundle 'ywgx/auto.vim'
" -------------------------------------------------
" 检测当光标改变时，执行函数。
" Bundle 'hookcursormoved'
" -------------------------------------------------
"函数提示
" Bundle 'mbbill/echofunc'
" -------------------------------------------------
" Commentary: 快速注释。
" Bundle 'tpope/vim-commentary'
" -------------------------------------------------
" 类似emacs的king ring,给vim的yank也增加缓冲,vim本身只缓冲删除的字符串,不缓冲yank的内容,这个插件可以同时粘贴多个需要的单词等
" Bundle 'YankRing.vim'
" -------------------------------------------------
" c/c++ support,让你用编写c/c++程序时如虎添翼,有很多贴心的功能,每个功能都有快捷键,不过一部分和NERD_comments冲突 如果经常编写一些单文件的c程序,但是不想写makefile,用这个,他帮你完成,F9编译并链接,ctrl-F9运行
Bundle 'c.vim'
" -------------------------------------------------
" Unite可以在一个项目中快速浏览文件。但是它不仅限于文件，其他任何可以列出的东西都可以很好的被显示和搜索。
Bundle 'Shougo/unite-help'
Bundle 'Shougo/unite-outline'
Bundle 'Shougo/unite.vim'
" Bundle 'osyo-manga/unite-quickfix'
" Bundle 'tsukkee/unite-tag'
" -------------------------------------------------
Bundle 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
" -------------------------------------------------
Bundle 'will133/vim-dirdiff'
let g:DirDiffExcludes = "CVS,*.class,*.exe,.*.swp, .*.cmd, *.o, .git"
" -------------------------------------------------
"FuzzyFinder底层依耐+
" Bundle 'l9'
" Bundle 'junegunn/fzf'
" FuzzyFinder缓冲器/文件/命令/标签/等浏览器的模糊匹配 +
" electbuf.vim相比，它少了对多个buf的批量选择和处理
" mru.vim -> fuzzyfinder.vim:FuzzyFinderMruFile
" favex.vim -> fuzzyfinder.vim:FuzzyFinderFavFile
" selectbuf.vim -> fuzzyfinder.vim:FuzzyFinderBuffer
" NERDTree.vim -> fuzzyfinder.vim:FuzzyFinderFile
" -------------------------------------------------
" FavEx : Favorite file and directory explorer ,可以添加目录和文件到收藏夹，可以把经常编辑的文件添加到收藏夹来，在文件打开以后，\ff新增文件到收藏夹，\fd新增目录到收藏夹
" Bundle 'FavEx'
" -------------------------------------------------
" 文本同级文字选取，和文本处理 推荐：****
" Bundle 'kana/vim-textobj-indent'
" Bundle 'kana/vim-textobj-user'
" -------------------------------------------------
" Very small, clean but quick and powerful buffer manager. c.
" qbuf
" -------------------------------------------------
" ShowFunc.vim  <-------- 暂时没有使用
" F2打开ShowFunc TagList窗口，显示C/C++函数原型
" map <F2> <Plug>ShowFunc
" -------------------------------------------------
"添加标记,可以来回跳,但不太好用.
" Bundle 'ShowMarks'
" let showmarks_enable = 1
" let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM"
" Ignore help, quickfix, non-modifiable buffers
" let showmarks_ignore_type = "hqm"
" Hilight lower & upper marks
" let showmarks_hlline_lower = 1
" let showmarks_hlline_upper = 1
" let marksCloseWhenSelected = 0
" -------------------------------------------------
" 快速打开关闭quickfix window
" Bundle '907th/vim-qfix'
" -------------------------------------------------
" 可以对选中的文本块执行ex操作,尤其是visual block模式下,vim自己是不支持的.选中后,:B 加上ex命令
" Bundle 'navicore/vis.vim'
" -------------------------------------------------
" 某些插件会用到的库
" Bundle 'tlib'
" -------------------------------------------------
"让Vim变成所见即所得的MarkDown文件编辑器，可以在编辑时预览最终效果。
" Bundle 'jiazhoulvke/MarkdownView'
" -------------------------------------------------
" 语法高亮 似乎不好用
" Bundle 'plasticboy/vim-markdown'
" let g:vim_markdown_frontmatter=1
" -------------------------------------------------
" Bundle 'vimwiki/vimwiki'
" -------------------------------------------------
" 将语法高亮转成 BBS 上的彩色
" toansi.vim
" -------------------------------------------------
" 让大文件打开快一点
" LargeFile.vim
" -------------------------------------------------
" 给vim增加url的识别功能,但是功能远不只是支持url,还有更多,详情见utl的帮.
" utl.vim
" -------------------------------------------------
" 自制的工程管理插件
" project.vim
" -------------------------------------------------
" Bundle 'vim-utils/vim-man'
" -------------------------------------------------
" array操作库函数，multiselect依赖它
" Bundle 'multvals.vim'
" -------------------------------------------------
" 可以对数字, 日期, 星期, 字母进行序列填充, 方式有升序和降序, 同时可以指定step间隔.
" 给vim增加生成递增或者递减数列的功能,支持十进制,十六进制,日期,星期等,功能强大灵活
" Bundle 'VisIncr'
" -------------------------------------------------
" 一些插件用到的一些库函数
" cecutil.vim
" -------------------------------------------------
" netrw清理工具，经常升级netrw的话，用来删除老版本
" netrwclean.vim
" Bundle 'netrw.vba.gz'
" -------------------------------------------------
" 功能强大的缩写扩展，vim版的TextMate
" snippetsEmu.vim
" -------------------------------------------------
" runs make and shows the test run status with a red or green bar.
" Bundle 'reinh/vim-makegreen'
" -------------------------------------------------
" C++相关
" Bundle 'stl.vim' "stl语法高亮+
" Bundle 'stlrefvim' "stl帮助 +
" -------------------------------------------------
if 0
Bundle 'ccglue'
Bundle 'jsfaint/gen_tags.vim'
Bundle 'PasteBin.vim'
Bundle 'tohtml.vim'
Bundle 'matchparen.vim'
Bundle 'xml.vim'
Bundle 'zipPlugin.vim'
Bundle 'cuteErrorMarker.vim'
Bundle 'tpope/vim-git'
Bundle 'rrhelper.vim'
Bundle 'winfileexplorer.vim'
Bundle 'wintagexplorer.vim'
Bundle 'gtags.vim'
Bundle 'jiazhoulvke/myproject'
Bundle 'chrisbra/csv.vim'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'
Bundle 'python-imports.vim'
Bundle 'CaptureClipboard'
Bundle 'ctrlp-modified.vim'
Bundle 'last_edit_marker.vim'
Bundle 'synmark.vim'
Bundle 'SQLComplete.vim'
endif
" -------------------------------------------------
" }

" 构思一些模式，进行分类，能放在插件中最好" {

"To hex modle
let s:hexModle = "N"
function! ToHexModle()
    if s:hexModle == "Y"
        %!xxd -r
        let s:hexModle = "N"
    else
        %!xxd
        let s:hexModle = "Y"
    endif
endfunction
" map <leader>h :call ToHexModle()<cr>

" }

" maybe unused {
        "折叠html标签 ,fold tag
        "nnoremap <leader>ft vatzf

        " 查找冲突的地方
        "map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

        "Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
        " nmap <leader>t2 mz:m+<cr>`z
        " nmap <A-k> mz:m-2<cr>`z
        " vmap <A-j> :m'>+<cr>`<my`>mzgv`yo`z
        " vmap <A-k> :m'<-2<cr>`>my`<mzgv`yo`z

        "=====================================================
        " 替换增强
        "=====================================================
        " 不确认、非整词
        "  nnoremap <Leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<CR>
        " " 不确认、整词
        "  nnoremap <Leader>rw :call Replace(0, 1, input('Replace '.expand('<cword>').' with: '))<CR>
        " " 确认、非整词
        "  nnoremap <Leader>rr :call Replace(1, 0, input('Replace '.expand('<cword>').' with: '))<CR>
        " " 确认、整词
        "  nnoremap <Leader>rcw :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>

        " 替换函数。参数说明：
        " confirm：是否替换前逐一确认
        " wholeword：是否整词匹配
        " replace：被替换字符串
        " function! Replace(confirm, wholeword, replace)
        "     wa
        "     let flag = ''
        "     if a:confirm
        "         let flag .= 'gec'
        "     else
        "         let flag .= 'ge'
        "     endif
        "     let search = ''
        "     if a:wholeword
        "         let search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
        "     else
        "         let search .= expand('<cword>')
        "     endif
        "     let replace = escape(a:replace, '/\&~')
        "     execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'
        " endfunction
        " -------------------------------------------------
        " 映射vsp这些开启新的buffer,默认目录为当前目录
        " cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
        " map <leader>ew :e %%
        " map <leader>es :sp %%
        " map <leader>ev :vsp %%
        " map <leader>et :tabe %%
        " -------------------------------------------------
        "Remove the Windows ^M - when the encodings gets messed up
        " noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
        " 去掉所有的^M
        " noremap <Leader>ff :%s/\\\$//g<cr>:%s/\\\/ /g<cr>
        " -------------------------------------------------
        "删除行尾的一个^M
        " nmap dm :%s/\r\+$//e<cr>:set ff=unix<cr>
        " -------------------------------------------------
        "以unix格式显示换行符
        " nmap xsm :e ++ff=unix
        "以dos格式显示换行符
        " nmap xsm :e ++ff=dos
        " -------------------------------------------------
        "  map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>
        "在当前目录查找光标词的所有位置
        " nmap  <leader>t2 :vimgrep /<C-R>=expand("<cword>")<cr>/ **/*.c **/*.h<cr><C-o>:cw<cr>
        " ,ff 查找光标后的单词位置，列出选择项
        " nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
        " -------------------------------------------------
        " 配置多语言环境
        " 环境变量 LANG（使用的语言）;
        " 环境变量 LC_CTYPE（使用的内部编码）;
        " Vim 选项 encoding(enc)（Vim 的内部编码；必须是 UTF-8,国际化支持的基础）。
        " Vim 选项 termencoding(tenc)（Vim 与输入输出交互编码）;
        " Vim 选项 fileencoding(fenc)（Vim 存储编码）;
        " Vim 选项 fileencodings(fencs)（Vim 打开时尝试的编码）;
        " Vim 选项 ambiwidth（对“不明宽度”字符的处理方式;Vim 6.1.455 后引入）。

        " if has("multi_byte")
        "     set encoding=utf-8
        "     set termencoding=utf-8
        "     set fileencoding=utf-8
        "     " set fileencoding=gb18030
        "     " set fileencoding=gb2312
        "     " set fileencodings=euc-jp,iso-8859-1
        "     set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,utf-16,big5,gb2312,chinese
        "
        "     if v:lang=~? '^\(zh\)\|\(ja\)\|\(ko\)'
        "         set ambiwidth=double
        "     endif
        " else
        "     echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
        " endif
        " -------------------------------------------------
        " cnoremap $c e <C-\>eCurrentFileDir("e")<cr>
        " func! CurrentFileDir(cmd)
        "    return a:cmd . " " . expand("%:p:h") . "/"
        " endfunc
        " -------------------------------------------------
        " 意义不大
        "set grepprg=/bin/grep\ -nH  "":grep" 使用的程序
        "let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
        "let g:SuperTabRetainCompletionType=2
        "let g:SuperTabDefaultCompletionType="<C-X><C-O>"
        " -------------------------------------------------
        "F6 for uncomment
        " vmap <F6> :s=^\(//\)*==g<cr>:noh<cr>
        " nmap <F6> :s=^\(//\)*==g<cr>:noh<cr>
        " imap <F6> <ESC>:s=^\(//\)*==g<cr>:noh<cr>
        " -------------------------------------------------
        " set mousemodel=extend
        " set mousemodel=popup
        " set switchbuf=usetab
        " -------------------------------------------------
        " set formatoptions=lq            " 控制 Vim 如何对文本进行排版
        " set formatoptions=tcrn2bmMB1j
        " set formatoptions+=mM             "自动对中文换行
        " set cindent                        " 使用C样式的缩进
        " set cinoptions=:0                  " 设置 'cindent' 时如何缩进
        " set smartindent                    " C 程序智能自动缩进
        " -------------------------------------------------
        " Do :help cope if you are unsure what cope is. It's super useful!
        " map <leader>t1 :botright cope<cr>
        " -------------------------------------------------
        " set fileformats=unix,dos,mac       " 自动识别UNIX格式和MS-DOS格式
        " set fileformat=unix                " 以UNIX的换行符格式保存文件，注意是去掉一个^M
        " set fileformat=dos                 " 以dos的换行符格式保存文件, 注意是在行尾变为两个^M
        " -------------------------------------------------
        " -------------------------------------------------
        Bundle 'Valloric/ListToggle'
        let g:lt_location_list_toggle_map = '<leader>ff'
        let g:lt_quickfix_list_toggle_map = '<leader>qq'
        let g:lt_height = 10
        " -------------------------------------------------
" }
" }

" yingxiang paiban {
        "函数内排版
        nmap = =a{

        "清除选中行中所有空格
        nnoremap <leader>dd :s/[ \t]\{1,}//g<cr>:noh<cr>
        vnoremap <leader>dd :s/[ \t]\{1,}//g<cr>:noh<cr>

        "清除选中行中空格,保留一个
        nnoremap <leader>d1 :s/[ \t]\{1,}/ /g<cr>:noh<cr>
        vnoremap <leader>d1 :s/[ \t]\{1,}/ /g<cr>:noh<cr>
" }
