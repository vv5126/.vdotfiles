" design by wgao. {{{

" vim init. {{{
function! Sync_repo(Dir, Remote, Branch)
    if ! isdirectory(a:Dir)
        echo a:Dir
        call system("mkdir -p " . a:Dir)
        call system("git clone -b " . a:Branch . ' ' . a:Remote . ' ' . a:Dir)
    else
        call system("cd " . a:Dir . " && git pull origin " . a:Branch)

    endif
endfunction

function! VIM_init()
   call Sync_repo("$HOME/.vim/bundle/spf13-vim", "https://github.com/spf13/spf13-vim.git", "3.0")
   call Sync_repo("$HOME/.vim/bundle/vundle", "https://github.com/gmarik/vundle.git", "master")
    " vim -u      "$HOME/.vimrc" "+set nomore" "+BundleInstall!" "+qall"
    " vim -u      "$HOME/.vimrc" "+set nomore" "+BundleInstall!" "+BundleClean" "+qall"
endfunction
" }}}

" check vundle. {{{
if ! isdirectory($HOME."/.vim/bundle/vundle")
        echo "setup vundle frist!"
        call VIM_init()
endif
" }}}
"
" spf13 before. {{{
    "===============================================================================+
    set nocompatible        " Must be first line
    source ~/.vim/bundle/spf13-vim/.vimrc.before
    "===============================================================================+
" }}}

" add my before config here. {{{
    "===============================================================================+
    " let g:spf13_bundle_groups=['general', 'writing', 'programming', 'python', 'misc',]
    let g:spf13_bundle_groups=['general', 'writing', 'programming', 'youcompleteme', 'python', 'misc',]
    "===============================================================================+
" }}}

" spf13 vundle. {{{
    "===============================================================================+
    source ~/.vim/bundle/spf13-vim/.vimrc.bundles
    "===============================================================================+
" }}}

" add my bundles here. {{{

    "==================================================
    "外部库,借用Bundle.
    " -------------------------------------------------
    if ! isdirectory(expand("~/.vim/bundle/oh-my-zsh"))
        Bundle 'robbyrussell/oh-my-zsh.git'
        Bundle 'gpakosz/.tmux.git'
        Bundle 'erikw/tmux-powerline.git'
    endif
    "==================================================

    " Brief help
    " :BundleList          - list configured bundles
    " :BundleInstall(!)    - install(update) bundles
    " :BundleSearch(!) foo - search(or refresh cache first) for foo
    " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

    " 刷新插件
    nmap <F6> :BundleInstall<cr>
    " 更新插件
    nmap <S-F6> :BundleList<cr>

    " -------------------------------------------------
    "  has been integrate into spf13.
    " -------------------------------
    " 允许你在 Vim中按等号、冒号、表格等来对齐文本
    " 'Tabular'
    " ex: :TAb /=
    " -------------------------------
    " 扩展了vim的%功能,让%可以匹配的,
    " 不再仅仅是括号,支持多种语言.必备插件之一
    " 'matchit.zip'
    " % 正向匹配      g% 反向匹配
    " [% 定位块首     ]% 定位块尾
    " -------------------------------
    " -------------------------------
    " -------------------------------
    " -------------------------------
    " -------------------------------------------------
    " good.
    " -------------------------------------------------
    " Vim8 异步运行shell
    Bundle 'skywind3000/asyncrun.vim'
    " -------------------------------------------------
    " VimDevIcons - Add Icons to Your Plugins
    Bundle 'ryanoasis/vim-devicons'
    " -------------------------------------------------
    " 查看和自动识别文件的编码格式
    Bundle 'mbbill/fencview'
    let g:fencview_autodetect=1
    " -------------------------------------------------
    " 支持分支的 undo
    " Bundle 'sjl/gundo.vim'
    " 调用 gundo 树
    " nnoremap <Leader>ud :GundoToggle<CR>
    " -------------------------------------------------
    " 显示缩进对齐线
    Bundle 'Yggdroot/indentLine'
    let g:indentLine_char = '┊'
    " map <leader>il :IndentLinesToggle<CR>
    " -------------------------------------------------
    " 显示git diff的插件
    Bundle 'airblade/vim-gitgutter'
    " -------------------------------------------------
    Bundle 'vv5126/wim'
    source ~/.vim/bundle/wim/plugin/vfunc.vim
    " -------------------------------------------------
    " vim帮助中文版
    " Bundle 'becaning/vimdoccn'
    Bundle 'yianwillis/vimcdoc'
    " -------------------------------------------------
    "让Vim变成所见即所得的MarkDown文件编辑器，可以在编辑时预览最终效果。
    Bundle 'iamcco/markdown-preview.vim'
    let g:mkdp_path_to_chrome = "firefox"
    " let g:mkdp_auto_start = 1
    let g:mkdp_auto_open = 1
    let g:mkdp_command_for_global = 1
    " -------------------------------------------------
    " show color, like red yellow #066
    Bundle 'gko/vim-coloresque'
    " -------------------------------------------------
    " 同时高亮多个单词 usage
    Bundle 'Mark--Karkat'
    " <leader>m  mark or unmark the word under (or before) the cursor
    " <leader>r  manually input a regular expression. 用于搜索.
    " <leader>n  clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .
    " <leader>*  当前MarkWord的下一个     <leader>#  当前MarkWord的上一个
    " <leader>/  所有MarkWords的下一个    <leader>?  所有MarkWords的上一个
    " -------------------------------------------------
    " 最大化当前panel.
    Bundle 'troydm/zoomwintab.vim'
    " -------------------------------------------------
    " 另一种对齐方式
    Bundle 'junegunn/vim-easy-align'
    nmap ga <Plug>(EasyAlign)
    xmap ga <Plug>(EasyAlign)
    " -------------------------------------------------
    " 排版
    " Bundle 'Chiel92/vim-autoformat'
    Bundle 'rhysd/vim-clang-format'
    " let g:clang_format#code_style = "chromium"
    let g:clang_format#style_options = {
            \ 'AllowShortIfStatementsOnASingleLine' : 'false',
            \ "BreakBeforeBraces" : "Linux"}
    " -------------------------------------------------
    " end 自动补全
    Bundle 'tpope/vim-endwise'
    " -------------------------------------------------
    " gitk
    Bundle 'gregsexton/gitv'
    " -------------------------------------------------
    " -------------------------------------------------
    " unuseful
    " -------------------------------------------------
    " 日历插件,有了它,用vim来写日记很方便
    " Bundle 'itchyny/calendar.vim'
    " let g:calendar_frame = 'default'
    " -------------------------------------------------
    " View man pages in vim. Grep for the man pages.
    " Bundle 'vim-utils/vim-man'
    " -------------------------------------------------
    " 为小括号加如彩虹效果，但对c貌似没啥意义...
    Bundle 'kien/rainbow_parentheses.vim'
    let g:rbpt_colorpairs = [
		\ ['brown',       'RoyalBlue3'],
		\ ['Darkblue',    'SeaGreen3'],
		\ ['darkgray',    'DarkOrchid3'],
		\ ['darkgreen',   'firebrick3'],
		\ ['darkcyan',    'RoyalBlue3'],
		\ ['darkred',     'SeaGreen3'],
		\ ['darkmagenta', 'DarkOrchid3'],
		\ ['brown',       'firebrick3'],
		\ ['gray',        'RoyalBlue3'],
		\ ['black',       'SeaGreen3'],
		\ ['darkmagenta', 'DarkOrchid3'],
		\ ['Darkblue',    'firebrick3'],
		\ ['darkgreen',   'RoyalBlue3'],
		\ ['darkcyan',    'SeaGreen3'],
		\ ['darkred',     'DarkOrchid3'],
		\ ['red',         'firebrick3'],
		\ ]
    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    " au VimEnter * RainbowParenthesesToggle
    " au Syntax * RainbowParenthesesLoadRound
    " au Syntax * RainbowParenthesesLoadSquare
    " au Syntax * RainbowParenthesesLoadBraces
    " -------------------------------------------------
    " 在vim里画图
    " Bundle 'DrawIt'
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " dealing
    " -------------------------------------------------
    " cscope的vim插件,提供快捷键操纵cscope
    " Bundle 'chazy/cscope_maps'
    " Bundle 'cscope_macros.vim'
    " set cscopetag
    " set cscopeverbose
    " set cscopequickfix=c-,d-,e-,g-,i-,s-,t-
    " set cscopetagorder=1
    " set nocsverb "增加 cscope 数据库时，不给出消息
    " -------------------------------------------------
    " Bundle 'charz/multi-cscope-db'
    " Bundle 'brookhong/cscope.vim'
    " nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
    " nnoremap <leader>l :call ToggleLocationList()<CR>
    " -------------------------------------------------
    " Bundle 'rking/ag.vim'
    " let g:ag_prg="<custom-ag-path-goes-here> --vimgrep"
    " let g:ag_working_path_mode="r"
    " Bundle 'Chun-Yang/vim-action-ag'
    " -------------------------------------------------
    " 让书签可视化的插件
    " Bundle 'kshenoy/vim-signature'
    " -------------------------------------------------
    " 任务列表的插件 —— TaskList.vim，方便管理项目中的 TODO、FIXME 等标签.
    " Bundle 'TaskList.vim'
    " nnoremap <leader>v <Plug>TaskList
    " -------------------------------------------------
    " repeat 支持使用.来重复执行一些插件的命令（如speeddating, surround等)
    " Bundle 'repeat.vim'
    " -------------------------------------------------
    " 可以在vim和tmux的任何组合间无缝切换
    " Bundle 'christoomey/vim-tmux-navigator'
    " -------------------------------------------------
    " have bug.
    " Bundle 'terryma/vim-expand-region'
    " vmap v <Plug>(expand_region_expand)
    " vmap <C-v> <Plug>(expand_region_shrink)
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " 缩进代替
    " Bundle 'tpope/vim-sleuth'
    " -------------------------------------------------
    " 会造成/不好用
    " Bundle 'haya14busa/incsearch.vim'
    " map /  <Plug>(incsearch-forward)
    " -------------------------------------------------
    " color theme浏览插件,列出所有的vim color theme到一个列表中,选中后按回车即可应用
    " Bundle 'sjas/csExplorer'
    " -------------------------------------------------
    " 打开quickfix快捷键
    Bundle 'Valloric/ListToggle'
    " let g:lt_location_list_toggle_map = '<leader>ff'
    let g:lt_quickfix_list_toggle_map = '<leader>qq'
    let g:lt_height = 10
    " -------------------------------------------------
    " vim中打开终端的功能+
    " Bundle 'Shougo/vimshell.vim'
    " Please install vimproc Ver.6.0 or above.
    " Bundle 'Shougo/vimproc'
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " -------------------------------------------------
    " Bundle 'jeaye/color_coded'
    " let g:color_coded_enabled = 1
    " let g:color_coded_filetypes = ['c', 'cpp', 'objc']
    " -------------------------------------------------
    " Bundle 'kassio/neoterm'
    " Bundle 'wincent/terminus'
    " -------------------------------------------------
    " Bundle 'rdnetto/YCM-Generator'
    " 需要将clang+llvm加入到PATH中
    "nnoremap <leader>hf :YcmGenerateConfig<CR>
    " -------------------------------------------------
    " -------------------------------------------------
    "requires Vim to be compiled with Ruby support
    "Bundle 'wincent/command-t'
    "let g:CommandTMaxHeight = 15
    "noremap <leader>j :CommandT<cr>
    "noremap <leader>y :CommandTFlush<cr>
    " -------------------------------------------------
    " 由注释生成文档，并且能够快速生成函数标准注释
    Bundle 'DoxygenToolkit.vim'
    let g:DoxygenToolkit_authorName="wei.gao ingenic"
    let g:DoxygenToolkit_briefTag_funcName="yes"
    map <leader>da :DoxAuthor<CR>
    map <leader>df :Dox<CR>
    " map <leader>db :DoxBlock<CR>
    let g:DoxygenToolkit_licenseTag="My own license\<enter>"
    let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
    let g:DoxygenToolkit_briefTag_pre = "@brief\t"
    let g:DoxygenToolkit_paramTag_pre = "@param\t"
    let g:DoxygenToolkit_returnTag = "@return\t"
    let g:DoxygenToolkit_maxFunctionProtoLines = 30
    " -------------------------------------------------
    "列出最近打开过的文件
    " Bundle 'mhinz/vim-startify'
    " -------------------------------------------------
    "Bundle 'cctree'             " 可以查看function的call tree
    " -------------------------------------------------
    if executable('ack')
        " Bundle 'dyng/ctrlsf.vim'
	" " vmap <C-E>a <Plug>CtrlSFVwordPath
	" let g:ctrlsf_default_root = 'project'
    endif
    " -------------------------------------------------
    " Bundle 'dkprice/vim-easygrep'
    " let g:EasyGrepMode = 2     " All:0, Open Buffers:1, TrackExt:2,
    " let g:EasyGrepCommand = 0  " Use vimgrep:0, grepprg:1
    " let g:EasyGrepRecursive  = 1 " Recursive searching
    " let g:EasyGrepIgnoreCase = 1 " not ignorecase:0
    " let g:EasyGrepFilesToExclude = "*.bak, *~, cscope.*, *.a, *.o, *.pyc, *.bak"
    " -------------------------------------------------
    " 工程内查找与替换+
    " Bundle 'grep.vim'
    " -------------------------------------------------
    " Switch very quickly between your most recently used buffers
    " if has("ruby")
	" Bundle 'LustyJuggler'
    " endif
    " -------------------------------------------------
    " 使用菜单和热键来编写和执行BASH脚本
    " Bundle 'bash-support.vim'
    " -------------------------------------------------
    " 结构化数据变成漂亮的表
    " Bundle 'Stormherz/tablify'
    " -------------------------------------------------
    " -------------------------------------------------
    " 检测当光标改变时，执行函数
    " Bundle 'hookcursormoved'
    " -------------------------------------------------
    " 类似emacs的king ring,给vim的yank也增加缓冲,vim本身只缓冲删除的字符串,不缓冲yank的内容,这个插件可以同时粘贴多个需要的单词等
    " Bundle 'YankRing.vim'
    " -------------------------------------------------
    " c/c++ support,让你用编写c/c++程序时如虎添翼,有很多贴心的功能,每个功能都有快捷键,不过一部分和NERD_comments冲突 如果经常编写一些单文件的c程序,但是不想写makefile,用这个,他帮你完成,F9编译并链接,ctrl-F9运行
    Bundle 'c.vim'
    " let g:C_Ctrl_j = 'off'
    " -------------------------------------------------
    " Unite可以在一个项目中快速浏览文件。但是它不仅限于文件，其他任何可以列出的东西都可以很好的被显示和搜索。
    Bundle 'Shougo/unite-help'
    Bundle 'Shougo/unite-outline'
    Bundle 'Shougo/unite.vim'
    " Bundle 'osyo-manga/unite-quickfix'
    " Bundle 'tsukkee/unite-tag'
    " -------------------------------------------------
    " Bundle 'will133/vim-dirdiff'
    " let g:DirDiffExcludes = "CVS,*.class,*.exe,.*.swp, .*.cmd, *.o, .git"
    " -------------------------------------------------
    " FavEx : Favorite file and directory explorer ,可以添加目录和文件到收藏夹，可以把经常编辑的文件添加到收藏夹来，在文件打开以后，\ff新增文件到收藏夹，\fd新增目录到收藏夹
    " Bundle 'FavEx'
    " -------------------------------------------------
    " 文本同级文字选取，和文本处理 推荐：****
    " Bundle 'kana/vim-textobj-indent'
    " Bundle 'kana/vim-textobj-user'
    " -------------------------------------------------
    " 可以对选中的文本块执行ex操作,尤其是visual block模式下,vim自己是不支持的.选中后,:B 加上ex命令
    " Bundle 'navicore/vis.vim'
    " -------------------------------------------------
    " 折叠
    Bundle 'lambdalisue/vim-foldround'
    nmap <Leader>xf <Plug>(foldround-forward)
    nmap <Leader>fb <Plug>(foldround-backward)

    Bundle 'Konfekt/FastFold'
    nmap zuz <Plug>(FastFoldUpdate)
    let g:fastfold_savehook = 1
    let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
    let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

    Bundle 'tmhedberg/SimpylFold'

    Bundle 'tweekmonster/braceless.vim'

    setlocal foldlevel=1               " 设置折叠层数为
    set nofoldenable                   " 启动 vim 时关闭折叠代码
    set foldcolumn=1                   " 设置折叠区域的宽度
    " -------------------------------------------------
    " 语法高亮 似乎不好用
    " Bundle 'plasticboy/vim-markdown'
    " let g:vim_markdown_frontmatter=1
    " -------------------------------------------------
    " Bundle 'vimwiki/vimwiki'
    " -------------------------------------------------
    " -------------------------------------------------
    " 给vim增加url的识别功能,但是功能远不只是支持url,还有更多,详情见utl的帮.
    " utl.vim
    " -------------------------------------------------
    " array操作库函数，multiselect依赖它
    " Bundle 'multvals.vim'
    " -------------------------------------------------
    " 可以对数字, 日期, 星期, 字母进行序列填充, 方式有升序和降序, 同时可以指定step间隔.
    " 给vim增加生成递增或者递减数列的功能,支持十进制,十六进制,日期,星期等,功能强大灵活
    " Bundle 'VisIncr'
    " -------------------------------------------------
    " -------------------------------------------------
    " runs make and shows the test run status with a red or green bar.
    " Bundle 'reinh/vim-makegreen'
    " -------------------------------------------------
    " C++相关
    " Bundle 'stl.vim' "stl语法高亮+
    " Bundle 'stlrefvim' "stl帮助 +
    " -------------------------------------------------
    " Bundle 'Wildog/airline-weather.vim'
    " let g:weather#area = 'newyorkcity,us'
    " let g:weather#unit = 'metric'
    " -------------------------------------------------
    "FuzzyFinder底层依耐+
    " Bundle 'l9'
    " Bundle 'junegunn/fzf'
    " FuzzyFinder缓冲器/文件/命令/标签/等浏览器的模糊匹配 +
    " electbuf.vim相比，它少了对多个buf的批量选择和处理
    " mru.vim -> fuzzyfinder.vim:FuzzyFinderMruFile
    " favex.vim -> fuzzyfinder.vim:FuzzyFinderFavFile
    " selectbuf.vim -> fuzzyfinder.vim:FuzzyFinderBuffer
    " NERDTree.vim -> fuzzyfinder.vim:FuzzyFinderFile
    " -------------------------------------------------
    " 列出当前打开的buffer,可以很容易的切换到和删除选定的buffer,必备插件之一
    " \be 全屏方式查看全部打开的文件列表
    " \bv 左右方式查看   \bs 上下方式查看
    Bundle 'jlanzarotta/bufexplorer'
    let g:bufExplorerDefaultHelp=0
    let g:bufExplorerShowRelativePath=1
    let g:bufExplorerSortBy = "name"
    map <leader>o :BufExplorer<cr>

    Bundle 'fholgado/minibufexpl.vim'
    " 切换缓冲区
    let g:miniBufExplorerAutoStart = 0
    " let g:miniBufExplBRSplit = 0
    let g:miniBufExplVSplit = 20
    " let g:miniBufExplSplitBelow=1

    " minibufexpl插件的一般设置
    " let g:miniBufExplMapWindowNavVim = 1
    " let g:miniBufExplMapWindowNavArrows = 1
    " let g:miniBufExplMapCTabSwitchBufs = 1
    " let g:miniBufExplModSelTarget = 1
    " let g:miniBufExplorerMoreThanOne = 1 "自动打开
    " autocmd BufRead,BufNew :call UMiniBufExplorer
    " let g:miniBufExplUseSingleClick = 1

    " 显示/隐藏 MiniBufExplorer 窗口
    " map <Leader>bl :MBEToggle<cr>
    " buffer 切换快捷键
    " map <C-Tab> :MBEbn<cr>
    " map <C-S-Tab> :MBEbp<cr>
    " -------------------------------------------------
    " 异步语法检查
    " Bundle 'w0rp/ale'
    " -------------------------------------------------
    " Very small, clean but quick and powerful buffer manager. c.
    " qbuf
    " -------------------------------------------------
    " Bundle 'jsfaint/gen_tags.vim'
    " Bundle 'gtags.vim'
    " Bundle 'matchparen/'
    " Bundle 'xml.vim'
    " Bundle 'tpope/vim-git'
    " Bundle 'winfileexplorer.vim'
    " Bundle 'wintagexplorer.vim'
    " Bundle 'chrisbra/csv.vim'
    " Bundle 'CaptureClipboard'
    " Bundle 'ctrlp-modified.vim'
    " -------------------------------------------------
" }}}

" spf13. {{{
    "===============================================================================+
    source ~/.vim/bundle/spf13-vim/.vimrc
    "===============================================================================+
    " config spf13's plugin should after source spf13-vim/.vimrc.

    " vim-multiple-cursors设置 {{{
        if 1 && isdirectory(expand("~/.vim/bundle/vim-multiple-cursors"))
            let g:multi_cursor_next_key='<C-n>'
            let g:multi_cursor_prev_key='<C-p>'
            let g:multi_cursor_skip_key='<C-x>'
            let g:multi_cursor_quit_key='<Esc>'
        endif
    " }}}

    " EasyMotion设置 {{{
        if 1 && isdirectory(expand("~/.vim/bundle/vim-easymotion"))
            " nmap t <Plug>(easymotion-t2)
            map  ? <Plug>(easymotion-sn)
            omap ? <Plug>(easymotion-tn)
            " map  n <Plug>(easymotion-next)
            " map  N <Plug>(easymotion-prev)
            map <Leader>l <Plug>(easymotion-lineforward)
            map <Leader>j <Plug>(easymotion-j)
            map <Leader>k <Plug>(easymotion-k)
            map <Leader>h <Plug>(easymotion-linebackward)
            let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

            let g:EasyMotion_do_mapping = 0 " Disable default mappings
            " Bi-directional find motion
            " Jump to anywhere you want with minimal keystrokes, with just one key
            " binding.
            " `s{char}{label}`
            nmap s <Plug>(easymotion-s)
            " or
            " `s{char}{char}{label}`
            " Need one more keystroke, but on average, it may be more comfortable.
            nmap s <Plug>(easymotion-s2)
            " Turn on case insensitive feature
            let g:EasyMotion_smartcase = 1
        endif
    " }}}

    " YouCompleteMe {{{
        if 1 && isdirectory(expand("~/.vim/bundle/YouCompleteMe"))
            "**
            " 首次使用步骤:
            " 1. 获取 YCM 的依赖包
            "    cd ~/.vim/bundle/YouCompleteMe/
            "    git submodule update --init --recursive
            "    follow the README.md 保证安装好cmake
            " 2. ./install.py --clang-completer
            " 3. done
            " 如果失败就使用下面的方法
            " 2. 在 http://llvm.org/releases/download.html 找到最新版 LLVM，在Pre-built Binaries
            "    下选择适合你发行套件的最新版预编译二进制文件，下载并解压至 ~/xxx/clang+llvm,这里最好将bin目录添加到环境变量，以后有用。
            " 3. mkdir and cd ~/ycm_build
            "    cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=~/xxx/clang+llvm/ . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
            "    make ycm_support_libs
            "    cmake -G "Unix Makefiles" . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp
            " 4. done
            " ------------------>>> may be need install python-dev
            "*/

            nnoremap <F1> :YcmForceCompileAndDiagnostics<CR>
            let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_conf/ycm_extra_conf_c.py'
            " ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py
            let g:syntastic_always_populate_loc_list = 1
            let g:ycm_always_populate_location_list =1

            " 菜单
            highlight Pmenu ctermfg=3 ctermbg=black guifg=#005f87 guibg=#EEE8D5
            " 选中项
            highlight PmenuSel ctermfg=green ctermbg=black guifg=#AFD700 guibg=#106900
            " 补全功能在注释中同样有效
            let g:ycm_complete_in_comments=1
            " 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
            let g:ycm_confirm_extra_conf=0
            " 开启 YCM 标签补全引擎
            let g:ycm_collect_identifiers_from_tags_files=1
            " 引入 C++ 标准库tags
            "set tags+=/data/misc/software/misc./vim/stdcpp.tags
            " YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
            "inoremap <leader>; <C-x><C-o>
            " 补全内容不以分割子窗口形式出现，只显示补全列表
            set completeopt-=preview
            " 从第一个键入字符就开始罗列匹配项
            let g:ycm_min_num_of_chars_for_completion=2
            " 禁止缓存匹配项，每次都重新生成匹配项
            let g:ycm_cache_omnifunc=0
            " 语法关键字补全
            let g:ycm_seed_identifiers_with_syntax=0
            " 收集所有词条
            let g:ycm_collect_identifiers_from_comments_and_strings = 1
            " 关闭语法检查
            let g:ycm_register_as_syntastic_checker = 0

            let g:ycm_auto_trigger = 1
            " let g:ycm_semantic_triggers = {}
            " let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&']

            " let g:ycm_register_as_syntastic_checker = 0
            let g:syntastic_enable_highlighting = 0

            " nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
            nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
            nnoremap <leader>gl :YcmCompleter GoToDefinitionElseDeclaration<CR>
            " nmap <F3> :YcmDiags<CR>

            " let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/bundle/wim/UltiSnips']

            " 影响回车
            let g:UltiSnipsExpandTrigger="<TAB>"
            let g:UltiSnipsJumpForwardTrigger="<c-j>"
            let g:UltiSnipsJumpBackwardTrigger="<c-k>"
            au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
            au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
        endif
    " }}}

    " tagbar {{{
        if 1 && isdirectory(expand("~/.vim/bundle/tagbar"))
            " let tagbar_ctags_bin=ctags
            " 设置 tagbar 子窗口的位置出现在主编辑区的左边
            let tagbar_left=1
            " 设置显示／隐藏标签列表子窗口的快捷键。
            " nnoremap <Leader>tl :TagbarToggle<CR>
            nmap tb :Tagbar<cr>
            " 设置标签子窗口的宽度
            let tagbar_width=32
            " tagbar 子窗口中不显示冗余帮助信息
            let g:tagbar_compact=1
            " 设置 ctags 对哪些代码元素生成标签
            let g:tagbar_type_cpp = {
                        \ 'kinds' : [
                        \ 'd:macros:1',
                        \ 'g:enums',
                        \ 't:typedefs:0:0',
                        \ 'e:enumerators:0:0',
                        \ 'n:namespaces',
                        \ 'c:classes',
                        \ 's:structs',
                        \ 'u:unions',
                        \ 'f:functions',
                        \ 'm:members:0:0',
                        \ 'v:global:0:0',
                        \ 'x:external:0:0',
                        \ 'l:local:0:0'
                        \ ],
                        \ 'sro'      : '::',
                        \ 'kind2scope' : {
                        \ 'g' : 'enum',
                        \ 'n' : 'namespace',
                        \ 'c' : 'class',
                        \ 's' : 'struct',
                        \ 'u' : 'union'
                        \ },
                        \ 'scope2kind' : {
                        \ 'enum'     : 'g',
                        \ 'namespace' : 'n',
                        \ 'class'   : 'c',
                        \ 'struct' : 's',
                        \ 'union'   : 'u'
                        \ }
                        \ }
        endif
    " }}}

    " vim-airline {{{
        if 1 && isdirectory(expand("~/.vim/bundle/vim-airline"))
            let g:airline_theme="dark"
            let g:airline_powerline_fonts = 1
            let g:airline#extensions#tabline#buffer_nr_show = 1
            let g:airline#extensions#tabline#enabled = 1
            let g:airline#extensions#tabline#left_sep = ' '
            let g:airline#extensions#tabline#left_alt_sep = '|'
            if !exists('g:airline_symbols')
                let g:airline_symbols = {}
            endif
            let g:airline_symbols.space = "\ua0"
        endif
    " }}}

    " Ctrlp 和 Ctrlp-funky(,fu) {{{
        if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
            let g:ctrlp_working_path_mode = 'ra'
            let g:ctrlp_custom_ignore = {
                        \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                        \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

            if executable('ag')
                let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
            elseif executable('ack-grep')
                let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
            elseif executable('ack')
                let s:ctrlp_fallback = 'ack %s --nocolor -f'
                " On Windows use "dir" as fallback command.
            else
                let s:ctrlp_fallback = 'find %s -type f'
            endif
            if exists("g:ctrlp_user_command")
                unlet g:ctrlp_user_command
            endif
            let g:ctrlp_user_command = {
                        \ 'types': {
                        \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                        \ },
                        \ 'fallback': s:ctrlp_fallback
                        \ }

            if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
                " CtrlP extensions
                let g:ctrlp_extensions = ['funky']
                nnoremap <Leader>fu :CtrlPFunky<Cr>
                nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
            endif
        endif
    " }}}

    " vim-powerline {{{
        if isdirectory(expand("~/.vim/bundle/vim-powerline/"))
            " mkfontscale
            " mkfontdir
            " fc-cache -vf
            " rm ~/.vim/bundle/vim-powerline/*.cache
            " https://github.com/eugeii/consolas-powerline-vim.git
            " https://github.com/powerline/fonts.git
            " set guifont=PowerlineSymbols\ for\ Powerline
            " let g:Powerline_symbols = 'fancy'
        endif
    " }}}
    "===============================================================================+
" }}}

" add my main set here. {{{

    " Environment {{{
        filetype off                       " 关闭文件类型侦测
        " syntax enable                      " 开启语法高亮功能
        set nofen
        set nomodeline                     " 不检查模式行
        set timeoutlen=500                 " 毫秒计的等待键码或者映射的键序列完成的时间
        set selection=exclusive            " 对选择区操作不包含光标所在字符
        set lazyredraw                     " 执行宏时不重画
        set ttyfast                        " 表明使用的是快速终端连接
        set linebreak                      " 防止折行时打断单词，将整个词进行折行。
        set display=lastline               " 长行显示，解决@@@@的问题
        set numberwidth=4                  " 行号栏的宽度
        set fillchars=vert:\ ,stl:\        " 在被分割的窗口间显示空白，便于阅读,stlnc:\(加了这个wm分割兰有\\\\\\\\\\\\\)
        set cmdheight=1                    " 命令行（在状态行下）的高度，默认为1
        " set noeb                           " 去掉输入错误的提示声音
        " set noerrorbells                   " 关闭错误信息响铃
        " set novisualbell                   " 关闭使用可视响铃代替呼叫
        " set undofile                     " 无限undo
        " set t_vb=                          " 置空错误铃声的终端代码
        set showtabline=1                  " 指定何时显示带有标签页标签的行,这里设置为至少有两个以上才显示.
        set confirm                        " 退出、写入等有未保存的改动或文件只读时询问
        set noswapfile                     " 关闭交换文件
        set nobackup                       " 覆盖文件时不备份
        set backupcopy=yes                 " 设置备份时的行为为覆盖
        set nowritebackup                  " 不写入备份文件
        set shell=/bin/bash
        set mousehide                      " 输入文件时隐藏鼠标
        set nospell
        set matchtime=0			   " 匹配括号高亮的时间（单位是十分之一秒）
        set selectmode=mouse,key
        set bufhidden=hide
        set wildignore+=*.bak,*.o,*.e,*~,*.obj,.git,*.pyc
        set autoread                       " 设置当文件被改动时自动载入
        set completeopt=preview,longest,menuone "代码补全
        " set rtp+=xxx/vim		   " 自定义vim目录位置

        " :help digraph-table 特殊字符表

        " tab的设定
        set smarttab                       " 在行和段开始处使用制表符
        set tabstop=8                      " 设置编辑时制表符占用空格数
        " set shiftwidth=8                 " 设置格式化时制表符占用空格数
        " set softtabstop=8                " 让 vim 把连续数量的空格视为一个制表符, 使得按退格键时可以一次删掉 4 个空格
        " set expandtab                    " 用空格代替制表符
        " set noexpandtab                    " 不要用空格代替制表符
        " autocmd FileType sh setlocal shiftwidth=4

        " 支持代码折叠
        set foldlevel=1               " 设置折叠层数为
        " set foldenable                   " 允许折叠
        " set foldclose=all                " 设置为自动关闭折叠
        " set foldmethod=syntax            " 用语法高亮来定义折叠
        " set foldmethod=manual            " 手动折叠
        set foldmethod=marker              " 依标志折叠
        " set foldmethod=indent            " 基于缩进或语法进行代码折叠
        set foldcolumn=0                   " 设置折叠区域的宽度
        " 代码折叠开关
        " nmap <F1> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

        " leader
        let mapleader        = ";"
        let maplocalleader   = ";"
        let g:mapleader      = ";"
        let g:maplocalleader = ";"
        " let g:spf13_leader=';'
        " let g:spf13_localleader=';'
    " }}}

    " statusline {{{
        highlight StatusLine cterm=bold ctermfg=gray ctermbg=black
        highlight LineNr ctermfg=gray ctermbg=black                       " 侧边颜色
        highlight User1 ctermfg=gray
        highlight User2 ctermfg=green
        highlight User3 ctermfg=red
        highlight User4 ctermfg=yellow
        highlight User5 ctermfg=black
        highlight User6 ctermfg=blue
        highlight User7 ctermbg=black
        set statusline=%7*\ %3*%{HasPaste()}%*[file:\ %2*%t%r%h%w%*]%3*%m%*[dir:\ %<%2*%{CurDir()}%*]%=\ \ \ \ \ \ \ \ \ \ %4*[%{&ff}][%{&encoding}]%6*%y%*[Line:%2*%l%*/%2*%L%*,Column:%2*%c%*][%2*%p%%%*]

        au InsertEnter * call InsertStatuslineColor('i')
        au InsertLeave * call InsertStatuslineColor('')
    " statusline end }}}

    " my map {{{
        "Space to command mode.
        nnoremap <space> :
        vnoremap <space> :

        " GIT
        nnoremap <leader>gd :GitGutterPreviewHunk<cr>
        nnoremap <leader>ga :GitGutterStageHunk<cr>

        " 空格键替换为换行
        " nnoremap <S-k> :s/ \+/\r/g<cr>:noh<cr>
        vnoremap <S-k> :s/ \+/\r/g<cr>:noh<cr>

        "使用<leader>空格来取消搜索高亮
        nnoremap <silent> <leader><space> :noh<cr>

        "去空行
        nnoremap <leader>db :g/^\s*$/d<cr>

        "清除末尾空格
        nnoremap <leader>ds :%s/\s\+$//<cr>

        "函数内排版
        nmap = =a{

        "清除选中行中所有空格
        nnoremap <leader>dd :s/[ \t]\{1,}//g<cr>:noh<cr>
        vnoremap <leader>dd :s/[ \t]\{1,}//g<cr>:noh<cr>

        "清除选中行中空格,保留一个
        nnoremap <leader>d1 :s/[ \t]\{1,}/ /g<cr>:noh<cr>
        vnoremap <leader>d1 :s/[ \t]\{1,}/ /g<cr>:noh<cr>

        " 清除后面空格
        nmap fk :1,$s/ *$//g<cr>
        " nmap fk :1,$s/^.*\.//g<cr>
        " nmap  <F4> :%s/ *$//g<cr>

        " 切换目录
        noremap <leader>1 :execute "cd" expand("%:h")<CR>:execute 'pwd'<cr>
        noremap <leader>2 :call GO_GIT_DIR()<cr>

        "删除行尾的一个^M
        nmap dm :%s/\r\+$//e<cr>:set ff=unix<cr>
        " noremap <Leader>m2 mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
        " noremap <Leader>ff :%s/\\\$//g<cr>:%s/\\\/ /g<cr>

        "esc的映射
        imap jj <esc>
        imap qq <esc>

        " 好用的复制、粘贴
        vmap <C-c> "+y
        imap <C-v> <Esc>"*pa
        vnoremap <silent> y y`]
        vnoremap <silent> p p`]
        nnoremap <silent> p p`]

        " 使用tab键来代替%进行匹配跳转
        nnoremap <tab> %
        vnoremap <tab> %

        " 处理折叠行的左右移动
        noremap j gj
        noremap k gk



        " Switching between buffers.
        nnoremap <C-h> <C-W>h
        nnoremap <C-j> <C-W>j
        nnoremap <C-k> <C-W>k
        nnoremap <C-l> <C-W>l
        nnoremap <C-x> <c-w>\|<c-w>_
        "inoremap <C-h> <Esc><C-W>h
        "inoremap <C-j> <Esc><C-W>j
        "inoremap <C-k> <Esc><C-W>k
        "inoremap <C-l> <Esc><C-W>l

        " buffer缩放
        nmap -- 5<C-w>-
        nmap ++ 5<C-w>+
        nmap >> 5<C-w>>
        nmap << 5<C-w><

        " 为选中代码加括号啥的
        vnoremap 1 h<esc>`>a)<esc>`<i(<esc>
        " vnoremap 2 h<esc>`>a]<esc>`<i[<esc> 'bug for vv'
        vnoremap 3 h<esc>`>a}<esc>`<i{<esc>
        vnoremap 4 h<esc>`>a"<esc>`<i"<esc>
        vnoremap 5 h<esc>`>a'<esc>`<i'<esc>

        " 常用缩写
        iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>

        " 对选中代码进行匹配
        vnoremap <silent> * :call VisualSearch('f')<CR>
        vnoremap <silent> # :call VisualSearch('b')<CR>
        " When you press gv you vimgrep after the selected text
        " vnoremap <silent> gv :call VisualSearch('gv')<CR>

        "光标所在词搜索
        nnoremap <leader>f *
        nnoremap <leader>fa :call SET_ISK()<cr>

        " 窗口自动半边排版
        nnoremap <silent> <leader>; :call VZOOM()<cr>

        "插入模式下移动
        inoremap <c-h> <C-o><S-Left>
        inoremap <c-j> <C-o><left>
        inoremap <c-k> <C-o><right>
        inoremap <c-l> <C-o><c-right>
        inoremap <C-a> <C-o><HOME>
        inoremap <C-e> <C-o><END>
        inoremap <C-b> <S-Left>
        " inoremap <C-h> <left>
        " inoremap <C-j> <down>
        " inoremap <C-k> <up>
        " inoremap <C-l> <right>

        "设置tab宽度
        map <leader>t2 :setlocal shiftwidth=2<cr>
        map <leader>t4 :setlocal shiftwidth=4<cr>
        map <leader>t8 :setlocal shiftwidth=8<cr>

        " Bash like keys for the command line
        cnoremap <C-A> <Home>
        cnoremap <C-E> <End>
        cnoremap <C-K> <C-U>
        cnoremap <C-P> <Up>
        cnoremap <C-N> <Down>

        " 比较文件
        nnoremap <leader>df :vert diffsplit 
        nnoremap <leader>dff :diffoff<cr>

        "Esc 键不让光标左移
        " imap <Esc> <C-o>:stopinsert<CR>

        " i/a 技巧: di da vi va ya yi...
        " 快速选择段中串
        map <leader>u vi"

        " Markdown
        map <leader>md :MarkdownPreview<cr>

        "Tabel
        nnoremap <S-q> :tabprevious<CR>
        nnoremap <S-w> :tabnext<CR>
        nnoremap te :tabedit 
        nnoremap tm :tabmove 
        nnoremap 1 1gt
        nnoremap 2 2gt
        nnoremap 3 3gt

        " 独立的剪贴板
        " vmap <silent> <expr> p <sid>Repl()

        " set colorcolumn=100
        " set cursorcolumn                   "高亮显示当前列
        " set colorcolumn=37                 " 彩色显示一列，用以规范代码
        " set nocul
        " set nocuc
        " autocmd InsertLeave * set nocul    " 用浅色高亮当前行
        " autocmd InsertEnter * set cul      " 用浅色高亮当前行
        " highlight cursorLine cterm=bold ctermfg=green ctermbg=blue
        " highlight cursorColumn cterm=bold ctermfg=green ctermbg=yellow
        " highlight cursorColumn ctermbg=green ctermfg=green

        nmap <A-j> mz:m+<cr>`z
        " dot 文件生成并预览
        " :autocmd BufRead,BufNewFile *.dot map <F5> :w<CR>:!dot -Tjpg -o %<.jpg % && eog %<.jpg  <CR><CR> && exec "redr!"

        " 没sudo却想保存
        cmap w!! w !sudo tee % >/dev/null

        "设置鼠标粘贴模式
        nnoremap <leader>mo :call SET_MOUSE()<cr>

        "使用,v来选择刚刚复制的段落，这样可以用来缩进
        " nnoremap <leader>v v`]

        " 清除前面数字加. exaple 12.aaa-->aaa 不适合代码！！！
        " nnoremap ff :1,$s///g

        "=====================================================
        map <leader>e :e! ~/.vimrc<cr>
        nnoremap <C-]> g]
        map <C-]> g]
        " gd 代替 *
        " g] 代替 C-]
        "=====================================================
        " 查找冲突的地方
        " ========>>> ...
        map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>
        "=====================================================
    " my map end }}}

    " autocmd {{{
        "自动载入配置文件不需要重启
        autocmd! bufwritepost .vimrc source %
        "=====================================================
        autocmd WinEnter * if &buftype ==#'quickfix' && winnr('$') == 1 | quit |endif
        "=====================================================
        autocmd BufEnter * :syntax sync fromstart
        autocmd WinLeave * lclose
        "=====================================================
        autocmd BufEnter * call CHECK_FILETYPE()
        autocmd BufRead *.h set filetype=c
        autocmd BufRead *.help set filetype=markdown
        "=====================================================
    " autocmd end }}}

    " 宏 {{{
        "宏录制相关
        " q+<register> 开始记录命令, <register> 指用户自己定义的a-z中的一个寄存器
        " q 完成记录，退出记录
        " 执行这个宏可以用命令：         @a
        " 也可以加上执行次数：           10@a 执行10次
        " 当你执行过一次@a之后，你可以用@@来重复执行@a
        " 修改宏
        " 1、找个空白行
        " 2、使用命令"ap会看到寄存器a中的命令宏像文本一样出现在这一行，然后编辑这一行。编编辑结束后回到行首。
        " 3、然后用"ay$将正确内容写到寄存器a中，最后删除这一行即可。
        " 4、当你需要向命令宏寄存器中增加内容时，可以用命令qA来向a寄存器增加内容，之后输入你想增加的内容，再使用q结束。
        " 保存和传递宏
        " 1 先建立一个宏。如上
        " 2 在任意一个文件的空白位置normal状态下，命令"ap 即可以把宏的内容显示出来。比如说我的宏是："ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^["
        " 3 这段内容保存或传递。
        " 4 使用命令：let @a="ohello th id<80>kb<80>kb<80>kbis is a a<80>kba<80>kbmaco of vim.^[" 或者参考修改宏的第三步。
        " 5 其他人用@a命令就可以使用你制作的宏了。
    " 宏 end }}}

" }}}

" {{{
    " s: Find this C symbol 0或者s   —— 查找这个C符号
    nmap <C-\>s :call GO_GIT_DIR()<cr>:cs find s <C-R>=expand("<cword>")<CR><CR>
    " g: Find this definition 1或者g  —— 查找这个定义
    nmap <C-\>g :call GO_GIT_DIR()<cr>:cs find g <C-R>=expand("<cword>")<CR><CR>
    " c: Find functions calling this function 3或者c  —— 查找调用这个函数的函数（们）
    nmap <C-\>c :call GO_GIT_DIR()<cr>:cs find c <C-R>=expand("<cword>")<CR><CR>
    " t: Find this text string 4或者t   —— 查找这个字符串
    nmap <C-\>t :call GO_GIT_DIR()<cr>:cs find t <C-R>=expand("<cword>")<CR><CR>
    " e: Find this egrep pattern 6或者e  —— 查找这个egrep匹配模式
    nmap <C-\>e :call GO_GIT_DIR()<cr>:cs find e <C-R>=expand("<cword>")<CR><CR>
    " f: Find this file 7或者f   —— 查找这个文件
    nmap <C-\>f :call GO_GIT_DIR()<cr>:cs find f <C-R>=expand("<cfile>")<CR><CR>
    " i: Find files #including this file 8或者i   —— 查找#include这个文件的文件（们）
    nmap <C-\>i :call GO_GIT_DIR()<cr>:cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    " d: Find functions called by this function 2或者d  —— 查找被这个函数调用的函数（们）
    nmap <C-\>d :call GO_GIT_DIR()<cr>:cs find d <C-R>=expand("<cword>")<CR><CR>
    set cst
    set cspc=3

    nmap <F2> :set ic<cr>/
    nmap <S-C> :stj <C-R>=expand("<cword>")<CR><CR>
    " nmap ff :1,$s///g<LEFT><LEFT><LEFT>
    " imap <C-u> <esc>d0i
    " imap <C-k> <esc>d$i " 与自动补全中的绑定冲突

    set modelines=1                   " set项的检查数量??
    try
        call fuf#defineLaunchCommand('FufCWD', 'file', 'fnamemodify(getcwd(), ''%:p:h'')')
        map <leader>t :FufCWD **/<CR>
    catch
    endtry

    " -------------------------------------------------
    " 排版
    " set formatoptions=rqnl
    " set formatoptions=rqntc            " 控制 Vim 如何对文本进行排版
    " set formatoptions=tcrn2bmMB1j
    " set formatoptions+=mM             "自动对中文换行
    " set formatoptions+=mB
    " set cindent                        " 使用C样式的缩进
    " set cinoptions=:0                  " 设置 'cindent' 时如何缩进
    " set smartindent                    " C 程序智能自动缩进
    " set fileformats=unix,dos,mac       " 自动识别UNIX格式和MS-DOS格式     参与自动检测的 'fileformat' 的格式
    " set fileformat=unix                " 以UNIX的换行符格式保存文件，注意是去掉一个^M
    " -------------------------------------------------
" }}}
" }}}
