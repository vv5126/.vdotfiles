#!/bin/bash

function make_info_file(){
	echo "#!/bin/bash"                           > .project_info
	echo                                        >> .project_info
	echo '# [base]'                             >> .project_info
	echo                                        >> .project_info
	echo "summary="                             >> .project_info
	echo                                        >> .project_info
	echo "customer=$customer"                   >> .project_info
	echo                                        >> .project_info
	echo "forOS=$forOS"                         >> .project_info
	echo                                        >> .project_info
	echo "forBOARD=$forBOARD"                   >> .project_info
	echo                                        >> .project_info
	echo "project_type=$project_type"           >> .project_info
	echo                                        >> .project_info
	echo "the_image=$the_image"                 >> .project_info
	echo                                        >> .project_info
	echo "lcd_name=$lcd_name"                   >> .project_info
	echo                                        >> .project_info
	echo "board_config=$board_config"           >> .project_info
	echo                                        >> .project_info
	echo '# [opt]'                              >> .project_info
	echo                                        >> .project_info
	echo "needclean=$needclean"                 >> .project_info
	echo                                        >> .project_info
	echo "addtime=$addtime"                     >> .project_info
	echo                                        >> .project_info
	echo "note=$note"                           >> .project_info
	echo                                        >> .project_info
	echo '# [out]'                              >> .project_info
	echo                                        >> .project_info
	echo "target_dir=$target_dir"               >> .project_info
	echo                                        >> .project_info
	echo "target_name=$target_name"             >> .project_info
	echo                                        >> .project_info
	echo "project_name=$project_name"           >> .project_info
	echo                                        >> .project_info
	echo '# [unuse]'                            >> .project_info
	echo                                        >> .project_info
	echo "platfrom_name=$platfrom_name"         >> .project_info
	echo                                        >> .project_info
	echo "repositories_type=$repositories_type" >> .project_info
	echo                                        >> .project_info
	echo "git_remote=$git_remote"               >> .project_info
	echo                                        >> .project_info
	echo "git_branch=$git_branch"               >> .project_info

	case "$project_name" in
		'kernel'*)
			;;
		'uboot'*)
			;;
		'*')
			;;
	esac
}



function svi(){
	if [ $# -ne 0 ]; then
		STR=$1
		FILE=${STR%%:*}
		LINE=${STR#*:}
		LINE=${LINE%%:*}
		expr $LINE + 0 &>/dev/null
		[ $? -eq 0 ] && vim $FILE +$LINE || vim $FILE
	fi
}

function getdir(){
	local TARGET=$1
	local PROJECT_DIR=''
	local BASE_DIR=~/
	local DIR=$PWD

	while [ "$BASE_DIR" != "$DIR/" ];do
		[ -f "$DIR/$TARGET" -o -d "$DIR/$TARGET" ] && { PROJECT_DIR=$DIR; break; } || PROJECT_DIR=
		DIR=${DIR%\/*}
	done
	[ -n "$PROJECT_DIR" ] && echo "$PROJECT_DIR"
}

function vcd(){
	local DIR=~
	local TARGET=
	[ -d "$DIR/$1" ] && TARGET=$1
	[ -f "$DIR/$1" ] && TARGET=${1%/*}
	[ -z "$1" ] && { TARGET=$(getdir .git); [ -z "$TARGET" ] && TARGET=$(getdir .repo); }
	[ -z "$TARGET" -a -n "$1" ] && { TARGET=$[${#1}+1]; TARGET=$(seq -s "../" $TARGET); TARGET=${TARGET//[0-9]/}; }
	[ -n $TARGET ] && cd $TARGET
}

function cd_proj(){
	local TARGET=
	TARGET=$(getdir .git)
	[ -n "$TARGET" ] && { cd $TARGET; return; }
	TARGET=$(getdir .repo)
	[ -n "$TARGET" ] && { cd $TARGET; return; }
}

function cd_repo(){
	local TARGET=
	TARGET=$(getdir .repo)
	[ -n $TARGET ] && cd $TARGET
}

function mktag(){
	local TARGET=
	TARGET=$(getdir .git)
	[ -n "$TARGET" ] && cd $TARGET
	[ $# -eq 1 ] && [ $1 == "up" ] && {
		ctags -R * #-exclude "arm"
		return
	}
	[ -f "tags" ] && {
		echo 
		echo -e " \e[40;33m"found TAGS : $PROJECT_DIR/tags"\033[0m"
		echo 
	} || {
		ctags -R * #-exclude "arm"
		return
	}
}

function mklist(){
	local DIR=
	local LISTFILE='list'
	local BAKDIR=`pwd`
	local line=''
	local NUM=0

	[ $# -eq 1 ] && [ -f $1 ] && LISTFILE=$1
	[ -f "$LISTFILE" ] || { echo no listfile; echo 'listdir=xxx' > $LISTFILE; echo '#put the opposite dir' >> $LISTFILE; return; }
	read line < $LISTFILE
	[[ $line =~ "=" ]] && [ -d "${line##*=}" ] && BAKDIR=${line##*=} || echo "${line##*=}"
	#BAKDIR=_$(date +%Y-%m-%d_%H-%M)
	echo BAKDIR = $BAKDIR
	echo LISTFILE = $LISTFILE

	while read line; do
		if [ "${line:0:1}" = "#" ]; then
			echo "jump ${line:1}"
		elif [ -d "$line" ]; then
			mkdir -p $BAKDIR/$line
			cp -r $line/* $BAKDIR/$line/
			NUM=$[$NUM+1]
		elif [ -f "$line" ]; then
			mkdir -p $BAKDIR/${line%/*}
			cp $line $BAKDIR/${line%/*}/
			NUM=$[$NUM+1]
		fi
	done < "$LISTFILE"
	echo "list mk done! total $NUM. "
}

function getdir_project(){

local COMP_DIR=~/
local BASE_DIR=$PWD
local DIR=$BASE_DIR
local PROJECT_DIR_NAME=
local PROJECT_DIR=

while [ "$COMP_DIR" != "$DIR/" ];do
	if [ -f "$DIR/.k.sh" ]; then
		PROJECT_DIR_NAME='KERNEL_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.u.sh" ]; then
		PROJECT_DIR_NAME='UBOOT_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.a.sh" ]; then
		PROJECT_DIR_NAME='ANDROID_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.t.sh" ]; then
		PROJECT_DIR_NAME='TIZEN_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.m.sh" ]; then
		PROJECT_DIR_NAME='MODELE_DIR'
		PROJECT_DIR=$DIR
		break
	elif [ -f "$DIR/.app.sh" ]; then
		PROJECT_DIR_NAME='NORMAL_DIR'
		PROJECT_DIR=$DIR
		break
	else
		PROJECT_DIR_NAME=
		PROJECT_DIR=
	fi
	DIR=${DIR%\/*}
done

echo "$PROJECT_DIR_NAME $PROJECT_DIR"

}


function getdir_git_repo(){

local COMP_DIR=~/
local DIR=$PWD
local DIR_NAME=''
local FINIAL_DIR=''

while [ "$COMP_DIR" != "$DIR/" ];do
	if [ -d "$DIR/.git" ]; then
		DIR_NAME='GIT_DIR'
		FINIAL_DIR=$DIR
		break
	elif [ -d "$DIR/.repo" ]; then
		DIR_NAME='REPO_DIR'
		FINIAL_DIR=$DIR
		break
	fi
	DIR=${DIR%\/*}
done

echo "$DIR_NAME $FINIAL_DIR"
return 0
}

############# will export ##############

export -f svi
alias vi='svi'

export -f getdir

export -f vcd
alias ..='vcd'

export -f cd_proj
export -f cd_repo
alias ...='cd_repo'

export -f mktag
export -f mklist
export -f getdir_project
export -f getdir_git_repo
export -f make_info_file

########### will export end ############
