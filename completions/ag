# ag -g <File Name> 类似于 find . -name <File Name>
# ag -i PATTERN： 忽略大小写搜索含PATTERN文本
# ag -A PATTERN：搜索含PATTERN文本，并显示匹配内容之后的n行文本，例如：ag -A 5  abc会显示搜索到的包含abc的行以及它之后5行的文本信息。
# ag -B PATTERN：搜索含PATTERN文本，并显示匹配内容之前的n行文本
# ag -C PATTERN：搜索含PATTERN文本，并同时显示匹配内容以及它前后各n行文本的内容。
# ag --ignore-dir <Dir Name>：忽略某些文件目录进行搜索。
# ag --word-regexp PATTERN： 全匹配搜索，只搜索与所搜内容完全匹配的文本。
# ag --java PATTERN： 在java文件中搜索含PATTERN的文本。
# ag --xml PATTERN：在XML文件中搜索含PATTERN的文本。

# Output Options:
# --ackmate            Print results in AckMate-parseable format
# -A --after [LINES]      Print lines after match (Default: 2)
# -B --before [LINES]     Print lines before match (Default: 2)
# --[no]break          Print newlines between matches in different files (Enabled by default)
# -c --count              Only print the number of matches in each file. (This often differs from the number of matching lines)
# --[no]color          Print color codes in results (Enabled by default)
# --color-line-number  Color codes for line numbers (Default: 1;33)
# --color-match        Color codes for result match numbers (Default: 30;43)
# --color-path         Color codes for path names (Default: 1;32)
# --column             Print column numbers in results
# --[no]filename       Print file names (Enabled unless searching a single file)
# -H --[no]heading        Print file names before each file's matches (Enabled by default)
# -C --context [LINES]    Print lines before and after matches (Default: 2)
# --[no]group          Same as --[no]break --[no]heading
# -g PATTERN              Print filenames matching PATTERN
# -l --files-with-matches Only print filenames that contain matches (don't print the matching lines)
# -L --files-without-matches Only print filenames that don't contain matches
# --[no]numbers        Print line numbers. Default is to omit line numbers when searching streams
# -o --only-matching      Prints only the matching part of the lines
# --print-long-lines   Print matches on very long lines (Default: >2k characters)
# --passthrough        When searching a stream, print all lines even if they don't match
# --silent             Suppress all log messages, including errors
# --stats              Print stats (files scanned, time taken, etc.)
# --vimgrep            Print results like vim's :vimgrep /pattern/g would (it reports every match on the line)
# -0 --null --print0      Separate filenames with null (for 'xargs -0')

# Search Options:
# -a --all-types          Search all files (doesn't include hidden files or patterns from ignore files)
# -D --debug              Ridiculous debugging (probably not useful)
# --depth NUM          Search up to NUM directories deep (Default: 25)
# -f --follow             Follow symlinks
# -F --fixed-strings      Alias for --literal for compatibility with grep
# -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN
# --hidden             Search hidden files (obeys .*ignore files)
# -i --ignore-case        Match case insensitively
# --ignore PATTERN     Ignore files/directories matching PATTERN (literal file/directory names also allowed)
# --ignore-dir NAME    Alias for --ignore for compatibility with ack.
# -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)
# --one-device         Don't follow links to other devices.
# -p --path-to-agignore STRING Use .agignore file at STRING
# -Q --literal            Don't parse PATTERN as a regular expression
# -s --case-sensitive     Match case sensitively
# -S --smart-case         Match case insensitively unless PATTERN contains uppercase characters (Enabled by default)
# --search-binary      Search binary files for matches
# -t --all-text           Search all text files (doesn't include hidden files)
# -u --unrestricted       Search all files (ignore .agignore, .gitignore, etc.; searches binary and hidden files as well)
# -U --skip-vcs-ignores   Ignore VCS ignore files (.gitignore, .hgignore, .svnignore; still obey .agignore)
# -v --invert-match
# -w --word-regexp        Only match whole words

# ag is aliased to `ag --hidden --ignore tags -p $HOME/.v/.agignore --noheading --smart-case -t'
# --ignore-dir -g -i -A -B -C
# ag --list-file-types | sed -n '/^--/p;'

function _ag()
{
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "--version activate deactivate search create remove update info config list install env -h" -- ${cur}) )

    case "${COMP_WORDS[1]}" in
        '--version'|'search'|'deactivate')
            COMPREPLY=()
            ;;
        'activate')
            [ "$COMP_CWORD" -gt 2 ] && COMPREPLY=() || COMPREPLY=( $(compgen -W "$(get_envs)" -- ${cur}) )
            ;;
        'create')
            COMPREPLY=( $(compgen -W '--name --clone python=2.7 python=3.6' -- ${cur}) )
            ;;
        'update')
            [ "$COMP_CWORD" -gt 2 ] && COMPREPLY=() || COMPREPLY=('conda')
            ;;
        'remove')
            [ "$COMP_CWORD" -gt 2 ] && COMPREPLY=() || COMPREPLY=( $(compgen -W '--name --all' -- ${cur}) )
            ;;
        'info')
            [ "$COMP_CWORD" -gt 2 ] && COMPREPLY=() || COMPREPLY=( $(compgen -W '--all --base --envs --system --unsafe-channels --help' -- ${cur}) )
            ;;
        'config')
            [ "$COMP_CWORD" -gt 2 ] && COMPREPLY=() || COMPREPLY=( $(compgen -W '--help' -- ${cur}) )
            ;;
        'list')
            [ "$COMP_CWORD" -gt 2 ] && COMPREPLY=() || COMPREPLY=( $(compgen -W '--help' -- ${cur}) )
            ;;
        'install')
            [ "$COMP_CWORD" -gt 3 ] && COMPREPLY=() || COMPREPLY=( $(compgen -W '--name --channel --help' -- ${cur}) )
            ;;
        'env')
            [ "$COMP_CWORD" -gt 2 ] && COMPREPLY=() || COMPREPLY=( $(compgen -W 'create export list remove update config' -- ${cur}) )
            ;;
        *)
            ;;
    esac

}

complete -F _ag ag
