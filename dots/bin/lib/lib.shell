# 工具链切换
function change_toolchain(){
    eval add_path "$(
	include list
	showlist_with_input $VUSER_DATA/toolchains.vconf "toolchain_version" "use which one??" $@
	echo $toolchain_path
    )"
}

# cd的增强版
function quickcd() {
    local cd_state='' cd_cache="$VTMP/.cd_cache" cd_list="$VTMP/.cd_list"
    local cd_quicklist="$VTMP/.cd_quicklist"
    local tmp dir='' cache=''

    for i in 1; do
        if [ "$#" -eq 0 ]; then
            local try_old_dir="$(history | tail -n 2 | head -1)"
            try_old_dir="${try_old_dir##* }"
            [[ "${try_old_dir:0:1}" == '~' ]] && try_old_dir="$HOME${try_old_dir:1}"
            if [ -d "$try_old_dir" ]; then
                dir="$try_old_dir"
            else
                dir="${WORKSPACE:-$HOME}"
            fi
        elif [ "$1" == '.' ]; then
            # tmp="$(cat $cd_list | awk '$1="      " $0' | fzy)"
            tmp="$(cat $cd_list | fzy)"
            [ -d "${tmp:7}" ] && dir="${tmp:7}"
        elif [ -d "$1" ]; then
            dir="$1"
        elif [ $# -eq 2 -a $1 = "add" ]; then
            printf "%-6s %s\n" "|[$2]" "$PWD" >> $cd_quicklist
            dir="$PWD"
        else
            [ -d "${1%\/*}" ] && { dir="${1%\/*}"; continue; }
            [[ "$1" =~ ":~" ]] && { dir=$HOME"${1##*:~}"; continue; }
            [[ "$1" =~ ":" ]] && { dir="${1##*:}"; continue; }
            [ $1 = "-" ] && { dir=$OLDPWD; continue; }
            [ $1 = "clean" ] && { > $list; continue; }
            [ $# -eq 1 -a -f "$cd_quicklist" ] && {
                while read line; do
                    [ "|[$1]" = ${line%% *} ] && { cache="$line"; dir="${line#* }"; continue 2; }
                done < "$cd_quicklist"
            }
        tmp="$(find -maxdepth 1 -type d -name "$1*")"; [ $? -eq 0 -a -d "$tmp" ] && { dir="$tmp"; continue; }
        fi
    done

    if [ -n "$dir" ]; then
        builtin cd $dir
        [ -z "$cache" ] && echo "|      $PWD" >> "$cd_cache" || echo "$cache" >> "$cd_cache"
        [ $((CD_COUNT+=1)) -ge 2 ] && { CD_COUNT=0; echo "quickcd_clean" | at now >/dev/null 2>&1; }
    fi

    # if [ "$cd_state" == 'success' ]; then
    # fi
}

# .., 智能目录回退
function vcd(){
    local DIR=~
    local TARGET=
    [ "$1" != ".." -a -d "$DIR/$1" ] && TARGET=$1
    [ -f "$DIR/$1" ] && TARGET=${1%/*}
    [ -z "$1" ] && { TARGET=$($VLIBS/lib.base getdir .git); [ -z "$TARGET" ] && TARGET=$($VLIBS/lib.base getdir .repo); }
    [ -z "$TARGET" -a -n "$1" ] && { TARGET=$[${#1}+1]; TARGET=$(seq -s "../" $TARGET); TARGET=${TARGET//[0-9]/}; }
    [ -n $TARGET ] && builtin cd $TARGET
}

# ev = 'environment variables'
# 删除环境变量
function clean_ev() {
    local tmp
    eval tmp=\$"$1"
    tmp="$(echo ${tmp//$2/} | sed 's/:\{1,\}/:/g')"
    export $1="$tmp"
}

# 添加环境变量
function add_ev() {
    clean_ev "$1" "$2"
    local tmp
    eval tmp=\$"$1"
    export $1="$2${tmp:+:$tmp}"
}

# 删除环境变量PATH
function clean_path() {
    clean_ev PATH "$1"
}

# 添加环境变量PATH
function add_path() {
    [ -d "$1" ] && add_ev PATH "$1"
}

complete_for_lib() {
    local cur prev tmp
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    # _get_comp_words_by_ref cur

    tmp="$(sed -n -r 's/^function\ (.*)\(.*/\1/p;' $HOME/.bin/lib/$1)"
    if [[ "$tmp" =~ "$prev" ]]; then
        _filedir
    else
        COMPREPLY=( $( compgen -W "$tmp" -- "$cur" ) )
    fi
}

function add_server() { # NAME HOST ID IP HOME
    local NAME=$1 HOST=$2 ID=$3 IP=$4 HOME=$5
    # eval export "$NAME"_HOST="$HOST"
    eval export "$NAME"_ID="$ID@$HOST"
    # eval export "$NAME"_IP="$IP"
    eval export "$NAME"_SSH="$ID@$IP"
    eval export "$NAME"_HOME="$HOME"
}

function genCRlist() {
    cat $VTMP/.bash_history
    cat $VTMP/.vim_list | awk '$0="vi "$0'
    cat $VTMP/.cd_list | sed -n 's/^ \{6\}/ /p;' | awk '$0="cd"$0'
    cat $HISTFILE
}
