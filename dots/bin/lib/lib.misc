#!/bin/bash

# 是否为数字
function is_num() {
    [ -z $1 ] && return 1
    expr $1 + 0 &>/dev/null
    [ $? -eq 0 ] && { echo 1; return 0; } || { echo 0; return 1; }
}

# 是否为合法IP
function is_ip() {
    echo $1 | grep -oP "^(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\.(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\.(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\.(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)$" >/dev/null
    [ "$?" -eq 0 ] && return 0 || return -1
}

# 检查是否为有效变量
function check_var() {
    local quit var

    quit=${2:+1}
    for val in $@; do
        eval var=\$"$val"
        if [ -z $var ]; then
            echo "some vars doesn't unset!!!" >&2
            [ 'x'$quit == 'x' ] && return 2 || exit 2
        fi
    done
    return 0
}

# 删除文件中重复行
function clean_duplicate_lines() {
    [ $# -eq 1 ] && {
        cp $1 .clean_dup && cat .clean_dup | sort | uniq > $1
    }
}

# 字符串任意抽取, 空格为分隔符。
function get_segment_from_line() {
        [ $# -ne 2 ] && return 1;

        local line="$1"
        local range="$2"
        local count=0
        local ret i j
        [[ "$2" =~ "-" ]] && range="$(seq -s ' ' ${2%%-*} ${2##*-})"

        for i in $line; do
            ((count+=1))

            for j in $range; do
                [ $count -eq $j ] && ret="$ret $i"
            done
        done
        echo "${ret# *}"
}

# 获取指定参数的值
function get_param() {
        [ $# -lt 2 ] && return -1;

        local got=0
        local keyword="$1"
        local p para
        shift

        local keypair=0

        for p in "$@"; do
                if [ "${p:0:2}" == '--' ]; then
                        if [ "$p" == "$keyword" ]; then
                                para="true"
                                break
                        fi
                elif [ "$got" == 0 -a "${p:0:1}" == '-' ]; then
                        keypair=1
                        [ "$p" == "$keyword" ] && got=1
                elif [ "$got" == 1 ]; then
                        [ "${p:0:1}" != '-' -a "${p:0:2}" != '--' ] && para="$p" || para="no_set"
                        break
                elif [ "$keypair" == 1 ]; then
                        keypair=0
                elif [ "$keyword" == "" ]; then
                        para="$p"
                        break
                fi
        done
        [ "$got" == 1 ] && para=${para:-no_set}

        [ -n "$para" ] && { echo "$para"; return 0; }
        return -1
}

# 获取当前执行脚本的真实路径
function get_script_dir() {
    SOURCE="$0"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$SOURCE"   )" && pwd   )"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /*   ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    DIR="$( cd -P "$( dirname "$SOURCE"   )" && pwd   )"
    echo DIR = $DIR
}

# 系统休眠
function mem() {
	echo mem > /sys/power/state
}

function set_local_compile_envrionment() {
    add_ev LD_LIBRARY_PATH "$HOME/.local/lib"
    add_ev LD_LIBRARY_PATH "$HOME/.local/usr/local/lib"
    add_ev LD_LIBRARY_PATH "$HOME/.local/usr/lib64"
    add_ev C_INCLUDE_PATH "$HOME/.local/include"
}

function read_key() {
	local key=$1
	local table=$2

	if [ -f "$table" ]; then
		while read line; do
			if [ "$key" = "${line%=*}" ]; then
				echo "${line#*=}"
				break
			fi
		done < "$table"
	fi
}

nicemount() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2=$4="";1') | column -t; }

# 显示指定深度的所有文件
function ls_file()
{
    local level=$1
    find . -maxdepth $level -type f | sed 's/^\.\///g' >&1
}

# 显示指定深度的所有文件夹
function ls_dir()
{
    local level=$1
    find . -maxdepth $level -type d | sed '1d;s/^\.\///g' >&1
}

# 调试时,设置debug宏,即执行后面的指令
function debug()
{
    [ "$debug" == '1' ] && $*
}

# 从格式化输出里提取一列
function col()
{
      awk -v col=$1 '{print $col}'
}

# 计算元素数量
function element_count() {
	local num=0
        for i in $1; do
            num=$((num+=1))
        done
	echo $num
}

# 获得当前路径深度
function get_path_depth() {
    pwd | grep -o '/' | wc -l
}

# 生成指定目录下所有脚本功能信息
function gen_lib_info() {
    local func_name func_desc line lines i j lib_dir files
    lib_dir="$1"
    rm $lib_dir/ReadMe >/dev/null
    files="$(find "$lib_dir" -name "lib.*")"
    for i in $files; do
        if [ -f "$i" ]; then
            lines="$(sed -n "/^func/=;" "$i")"
            echo "--- ${i##*/} ---" >> $lib_dir/ReadMe
            for j in $lines; do
                line=$((j-1>0?j-1:0))
                func_name="$(sed -n "$j,$j p;" "$i" | awk '{print $2}')"
                func_desc="$(sed -n "$line,$line p;" "$i")"
                [ "${func_desc:0:1}" == '#' ] || func_desc=''
                echo -e "$func_name: $func_desc" >> $lib_dir/ReadMe
            done
            echo '' >> $lib_dir/ReadMe
        fi
    done

    # 排版
    vim -c "1,$(sed -n '$=' "$lib_dir/ReadMe")EasyAlign :" "$lib_dir/ReadMe"
}

function win2shdb() {
    sed 's/^\[/# [/g' -i $1 # ... [] to # []
    sed 's/\ *=\ */=/g' -i $1 # ... ' ' = ' ' to ' '=' '
}

function shdb2win() {
    sed 's/^# *\[/[/g' -i $1 # ... [] to []
}

function time_sync() {
    include $VINIS/ini.ingenic
    real_time="$(ssh $WORK_SERVER_SSH date)"

    if [ $? = 0 ]; then
        real_time="$(echo $real_time | awk '{print $4}')"
        echo 'user' | sudo  -S date -s "$real_time" >/dev/null 2>&1
        echo time sync $real_time OK!
    else
        echo time sync FAIL!
    fi
}

# 数据编码
function vec() {
    echo "$1" | base64 -i
}

# 数据解码
function vdc() {
    echo "$1" | base64 -d
}

# 得到快速的文件特征值
function md1sum() {
    IFS=
    local md1="$(stat "$@" | grep -E 'Size:|Modify:' | tr "\n" " " | awk '{print $2,$(NF-1)}' | sed 's/\ .*\.//g')"
    printf "%s%0$((32-${#md1}))d  %s\n" "$md1" '' "$1"
}

# 计算耗时
function timepass() {
    # 参数由date +%s.%N获得
    start=$1
    end=$2
    # echo $start
    # echo $end

    start_s=`echo $start | cut -d '.' -f 1`
    start_ns=`echo $start | cut -d '.' -f 2`
    end_s=`echo $end | cut -d '.' -f 1`
    end_ns=`echo $end | cut -d '.' -f 2`

    time_micro=$(( (10#$end_s-10#$start_s)*1000000 + (10#$end_ns/1000 - 10#$start_ns/1000) ))
    time_ms=`expr $time_micro/1000  | bc `

    echo "$time_micro microseconds"
    echo "$time_ms ms"
}

ask() {
  while true; do
    read -p "$1 ([y]/n) " -r
    REPLY=${REPLY:-"y"}
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 1
    elif [[ $REPLY =~ ^[Nn]$ ]]; then
      return 0
    fi
  done
}

# 在当前目录创建指定文件的链接
function lnn() {
    include base

    local lnfile="$1"
    local searchdir="$HOME/.bin"
    local target="$lnfile"
    local tmp
    local platform="$(uname -i)" # ELF 64-bit

    [ -z "$1" ] && return 1

    if [ -n "$2" ]; then
        eval tmp="$2"
        tmp="$(clean_last_symbol $tmp)"
        [ -d "$tmp" -o -d "$PWD/$tmp" ] && searchdir="$tmp" || target="$tmp"
    fi
    if [ -n "$3" ]; then
        eval tmp="$3"
        tmp="$(clean_last_symbol $tmp)"
        [ -d "$tmp" -o -d "$PWD/$tmp" ] && searchdir="$tmp" || target="$tmp"
    fi

    [ -f "$lnfile"  ] && rm "$lnfile"

    local d="$(find "$searchdir/" -type f -perm -111 -name "$lnfile" | head -1)"
    if [ -n "$d" ]; then
        [ -f "$target" ] && rm "$target"
        [[ $d =~ "$HOME" ]] && ln -sfr "$d" "$target" || ln -sf "$d" "$target"
    fi
}

# 在当前目录创建指定文件列表的所有链接
function lnn_file() {
    local line
    while read line; do
        [ -n "$line" -a "${line:0:1}" != '#' ] && lnn $line
    done < $1
}

# 删除失效的链接文件
function clean_invalid_ln() {
    local file
    for file in $(find $1 -type l); do
        [ ! -e $file ] && rm -f $file
    done
}

# 检查当前用户是否有超级权限
function check_sudo() {
    user="$(whoami)"
    local ret=0 val
    val="$(cat /etc/group | sed -n '/^sudo:/p;' -)"
    val=${val##*:}
    val="$(cat /etc/group | sed -n '/^root:/p;' -),$val"
    val=${val##*:}
    [[ "$val" =~ "$user" ]] && ret=$(($ret|1))
    echo $ret
}

function check_ln() {
    cd "$VUSER"

    if [ ! -f "../.inited" ]; then
        [ -f "init" ] && source "./init" "init"
        > "../.inited"
    fi

    listfile_md1="$(md1sum $VGL_DATA/ln_common_list | awk '{print $1}')"
    listfile_md1="$listfile_md1""$(md1sum ln_list | awk '{print $1}')"
    if [ "x$(cat ../.inited)" != "x$listfile_md1" ]; then
        find $1 -type l -delete
        # clean_invalid_ln "$VUSER"
        [ -d "bin" ] || mkdir bin
        [ -f "$VGL_DATA/ln_common_list" ] && (cd bin; lnn_file $VGL_DATA/ln_common_list)
        [ -f "ln_list" ] && (cd bin; lnn_file ../ln_list)
        [ -L "$HOME/.bin/user" ] && rm "$HOME/.bin/user"
        ln -sf "$VUSER" "$HOME/.bin/user"
        echo $listfile_md1 > "../.inited"
        echo reset - "$VHOSTID" done! >&2
    fi
}

# 对指定列表文件做批量操作
function batch_opt() {
    local file cmd_num='' cmd i line from_stream=0
    file="$1"
    [ -f $file ] && shift || from_stream=1

    # while true; do
	# [[ "$@" =~ cmd@$((cmd_num+=1)) ]] || break
    # done
    # ((cmd_num-=1))
    # [ $((cmd_num-=1)) -eq 0 ] && return

    for i in {1..10}; do
	[[ "$@" =~ cmd@$i ]] && cmd_num="$cmd_num $i"
    done
    [ -z "$cmd_num" ] && return

    if [ "$from_stream" == 1 ]; then
	while read line; do
	    cmd="$@"
	    for i in $cmd_num; do
		param="$(echo $line | awk '{print $'$i'}')"
		cmd=${cmd//cmd@$i/$param}
	    done
	    $cmd
	done <&0
    else
	while read line; do
	    cmd="$@"
	    for i in $cmd_num; do
		param="$(echo $line | awk '{print $'$i'}')"
		cmd=${cmd//cmd@$i/$param}
	    done
	    $cmd
	done < $file
    fi
}

function ssh_from()
{
    [ -n "$SSH_CLIENT" ] && echo "${SSH_CLIENT%% *}"
}

function guess_ssh_user() {
    local ssh=$(ssh_from)
    echo user@$ssh
}

function clean_history_1() {
    array=($(sed -n '/^#[0-9]\+$/=' $1 | xargs))

    cnt=0
    while true; do
        # echo --- ${array[$cnt]}
        # echo $cnt ${#array[@]}
        if [ $((cnt+1)) -eq ${#array[@]} ]; then
            tmp=$(sed -n -e "${array[$cnt]}"'p;' -e "$((${array[$cnt]}+1))"',$p;' $1 | sed ':label;N;s/\n/%%/;b label' | sed 's/%%/ /')
            echo -e $tmp
            break;
        else
            # tmp=$(sed -n -e "${array[$cnt]}"'p;' -e "$((${array[$cnt]}+1)),$((${array[$((cnt+1))]}-1))p;" $1 | tr "\n" "%")
            tmp=$(sed -n -e "${array[$cnt]}"'p;' -e "$((${array[$cnt]}+1)),$((${array[$((cnt+1))]}-1))p;" $1 | sed ':label;N;s/\n/%%/;b label' | sed 's/%%/ /')
            cnt=$((cnt+1))
            echo -e $tmp
        fi
    done
}

function clean_history() {
    # local files="$(ls $VTMP/.bash_history_*)"

    # for i in $files; do
    #     clean_history_1 $i | sort --field-separator=" " --key=2 | tac | uniq -f 1 | sort --human-numeric-sort | sed 's/ /%%/' | sed ':label;N;s/%%/\n/g;b label' > tmpa
    #     mv tmpa $i
    # done

    local file=$VTMP/.bash_history_"$(tty | sed 's#.*/##')"
    clean_history_1 $file | sort --field-separator=" " --key=2 | tac | uniq -f 1 | sort --human-numeric-sort | sed 's/ /%%/' | sed ':label;N;s/%%/\n/g;b label' > tmpa
    mv tmpa $file
}

alias random_1='cat /dev/urandom | LC_CTYPE=C tr -dc '0-9' | fold -w 8 | head -n 1'
alias random_2='cat /dev/urandom | LC_CTYPE=C tr -dc '0-9a-zA-Z' | fold -w 6 | head -n 1'

############# export ##############

# if [ -n "$ZSH" ]; then
# else
#     export -f get_script_dir
#     export -f mem
#     export -f read_key
#     export -f nicemount
#     export -f ls_file
#     export -f ls_dir
# fi

########### export end ############

[[ "${0##*/}" =~ "lib.misc" ]] && "$@"
