#!/usr/bin/env python3

import json
import argparse

def get_key(fjson, key):
    tmp = fjson
    for i in key.split(' '):
        tmp=tmp[i]
    print(tmp)

def get_keys(fjson, key):
    tmp = fjson
    for i in key.split(' '):
        tmp=tmp[i]
    print(' '.join(tmp.keys()))

# def del_section(fjson, section):
#     fjson.remove_section(section)       #删除节
#
# def add_key(fjson, section, key, value):
#     fjson.add_option(section, key, value)    #删除节内参数
#
# def del_key(fjson, section, key):
#     fjson.remove_option(section, key)    #删除节内参数
#
# def change_value(fjson, section, key, value):
#     fjson.set(section, key, value)
#
# def change_section(fjson, section, new_section):
#     pass
#
# def get_sections(cfg):
#     print(fjson.sections())   #读取所有节
#
# def get_value(fjson, section, key):
#     print(fjson.get(section, key))
#
# def get_section(fjson, section):
#     print(fjson.items(section))
#
# def is_have_section(fjson, section):
#     sections = fjson.sections()
#     if section in sections:
#         print('0')
#     else:
#         print('1')
#
# def is_have_key(fjson, section, key):
#     keys = fjson.items(section)
#     if key in keys:
#         print('0')
#     else:
#         print('1')

def main():
    parser = argparse.ArgumentParser(description='manual to this script')
    parser.add_argument('--get_key',    type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--get_keys',    type=bool, nargs='?', const=True, default=False)

    parser.add_argument('--add_section',    type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--del_section',    type=bool, nargs='?', const=True, default=False)

    parser.add_argument('--add_key',         type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--del_key',         type=bool, nargs='?', const=True, default=False)

    parser.add_argument('--change_value',    type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--change_section',  type=bool, nargs='?', const=True, default=False)

    parser.add_argument('--get_sections',    type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--get_section',     type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--get_value',       type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--is_have_section', type=bool, nargs='?', const=True, default=False)
    parser.add_argument('--is_have_key',     type=bool, nargs='?', const=True, default=False)

    parser.add_argument('-s',  '--section',     type = str, default = None)
    parser.add_argument('-ns', '--new_section', type = str, default = None)
    parser.add_argument('-k',  '--key',         type = str, default = None)
    parser.add_argument('-v',  '--value',       type = str, default = None)
    parser.add_argument('-kv', '--key_value',   type = str, default = None)
    parser.add_argument('-f',  '--jsonfile',  type = str, default = None)

    args = parser.parse_args()

    if args.jsonfile != None:
        file_in = open(args.jsonfile)
        fjson = json.loads(file_in.read())
        file_in.close()

        # f = open(args.configfile, 'w')
    else:
        print('error!!!')
        return -1

    if args.get_key == True:
        get_key(fjson, args.key)
    elif args.get_keys == True:
        get_keys(fjson, args.key)
#    if args.add_section == True:
#         add_section(fjson, args.section, args.key_value)
#     elif args.del_section == True:
#         del_section(fjson, args.section)
#     elif args.add_key == True:
#         add_key(fjson, args.section, args.key, args.value)
#     elif args.del_key == True:
#         del_key(fjson, args.section, args.key)
#     elif args.change_value == True:
#         change_value(fjson, args.section, args.key, args.value)
#     elif args.change_section == True:
#         change_section(fjson, args.section, args.new_section)
#     elif args.get_sections == True:
#         get_sections(cfg)
#     elif args.get_value == True:
#         get_value(fjson, args.section, args.key)
#     elif args.get_section == True:
#         get_section(fjson, args.section)
#     elif args.is_have_section == True:
#         is_have_section(fjson, args.section)
#     elif args.is_have_key == True:
#         is_have_section(fjson, args.section, args.key)

if __name__ == '__main__':
    main()
