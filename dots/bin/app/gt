#!/bin/bash

include base
include work
include file
include git
include misc

APP_DIR=$(which $0)
APP_DIR=${APP_DIR%\/*}

text(){
    [ -n "$2" ] && echo "[  OK  ] $1=$2" || echo "[ FAIL ] $1=$2"
}

function git_bak_list() {
	local BAKDIR=''
	BAKDIR=${1%\/*}/git_bak/${1##*\/}
	cd $BAKDIR
	ls -F | grep /$ | {
		while read line; do
			echo ${line%/*}
		done
	}
	exit
}

function git_cover() {
	local BAKDIR=''
	BAKDIR=${1%\/*}/git_bak/${1##*\/}/$2
	if [ -d "$BAKDIR" ];then
		cp -rf $BAKDIR/* $1
	else
		echo "NO BAKDIR"
	fi
	exit
}

function git_recovery() {
	src=$1
	dest=${src%%.tar.gz*}
	tar -xf $src
	echo src = $src
	echo dest = $dest
	cd $dest
	dest=${dest%%_whole_bak*}
	source ./info
	git clone $remote $dest
	cd $dest
	git checkout $branch
	git reset --hard $commit
	patch -p 1 < ../patch
	echo cover done!
	return
}

function git_bak2() {
	local git_remote git_branch git_commit tmp dummy_branch
	local bakdir="$1"

        echo "baking project: $PWD"
        echo -n "to $bakdir ...... "

	[ -d "$bakdir" ] && rm $bakdir -rf
        mkdir -p "$bakdir"

	git_remote="$(git remote -v | head -2 | tail -1 | awk '{print $2}')"

	tmp="HEAD"
	while true; do
		[ -z "$git_remote" ] && break
		dummy_branch="$(git name-rev --name-only $tmp)"
		if [ "${dummy_branch: -2}" == '~1' ]; then
			git_branch=${dummy_branch%%~*}
			git_commit=$(git log --pretty=format:"%h" -1 $tmp)
			break
		fi
		tmp=$tmp^
	done

	echo -e "git_remote=$git_remote\ngit_branch=$git_branch\ngit_commit=$git_commit\n" > git.info
	git log --stat -5 > git.log
	git status > git.status

	echo "$(git diff --name-only $git_commit)" > .tmp_listfile
	echo "$(git status -s | grep -o "^?? .*" | awk '{print $2}')" >> .tmp_listfile
	echo -e ".config\n.pro\n" >> .tmp_listfile

	cp_files__by_listfile_with_arch .tmp_listfile "$bakdir"

	rm git.log git.status git.info .tmp_listfile

        echo "backup done!"
}

function git_bak() {

        cd_proj

	local bakdir="$1"
	local file=''
	local dir_t=''
	local line=''
	local num=0

        echo "baking project: $PWD"
        echo -n "to $bakdir ...... "

	if [ -d "$bakdir" ]; then
                rm $bakdir -rf
	fi
        mkdir -p "$bakdir"

        git status -s > .tmp-git-bak
        while read line; do
                sign="$(get_segment_from_line "x$line" 1)"
                file="$(get_segment_from_line "x$line" 2)"
                case "$sign" in
                        "x??" | "xA"* | "xM"* )
                                [[ "$file" =~ "/" ]] && {
                                        dir_t=${file%/*} && mkdir -p $bakdir/$dir_t
                                        [ ${file:0-1} = "/" ] && cp -rf $file/* $bakdir/$dir_t/ || cp $file $bakdir/$dir_t
                                } || {
                                        [ -e "$file" ] && cp $file $bakdir
                                }
			        num=$[$num+1]
                        ;;
                        "xD")
                        ;;
                esac
        done < .tmp-git-bak

        # git remote -v >  .tmp-git-bak
        # git br -av >>  .tmp-git-bak
        # git st -s >>  .tmp-git-bak

        tar -Pzcf "$bakdir.tar.gz" "$bakdir"
        rm -rf "$bakdir"

        rm .tmp-git-bak

        echo "cp $num files, finished!"

}

project_uncare=(
external/
)

function skip_check() {
        for i in ${project_uncare[@]}; do
                [[ "$line" =~ "$i" ]] && { echo 1; return; }
        done
        echo 0
}

function repo_bak() {
        local bak_dir="$1"
        local proj_dir="$PWD"
        local proj_dir_name="${proj_dir##*/}"
        local subproj_dir=
        repo status > ~/.tmp/gt-tmp
        while read line; do
                if [ "${line%% *}" == 'project' ]; then
                        if [ $(skip_check "$line") -eq 0 ]; then
                                line=${line#* }
                                subproj_dir=${line%% *}
                                cd $proj_dir/$subproj_dir
                                git_bak "$bak_dir/$proj_dir_name/$subproj_dir"
                        fi
                fi
        done < ~/.tmp/gt-tmp
        rm ~/.tmp/gt-tmp
        # tar -Pzcf "$bak_dir.tar.gz" "$bak_dir"
}

cd_proj

if [ $# -gt 0 ];then
	case "$1" in
		'recovery')
			[ $# -eq 2 ] && git_recovery $2
			exit
			;;
		*)
			;;
	esac
        if [ -d ".repo" ]; then
                case "$1" in
                        'bak')
                                source .project_info
                                [ -n "$customer" ] && repo_bak "/data1/home/wgao/work/project-bak/$customer" "mode0" || echo customer is empty!
                                ;;
                        'co')
                                repo forall -c "git checkout ."
                                ;;
                        'br')
                                repo branch
                                ;;
                        'rst')
                                [ $# -eq 2 ] && repo forall -c "git reset --hard $2"
                                ;;
                        'st')
                                repo status
                                ;;
                        'tag')
                                git --git-dir .repo/manifests/.git/ tag
                                ;;
                        'l')
                                repo_get_source_path
                                ;;
                        *)
                                repo "$@"
                                ;;
                esac
        elif [ -d ".git" ]; then
                case "$1" in
                        'push')
		                git_push_to_gerrit
                                ;;
                        'baklist')
		                git_bak_list $PWD
                                ;;
                        'tag')
                                git tag | grep ingenic
                                ;;
                        'bak')
                                BAKDIR=${PWD%\/*}/git_bak/${PWD##*\/}/${PWD##*\/}_$(date +%Y%m%d_%H-%M)
                                [ $# -eq 2 ] && BAKDIR=$BAKDIR-$2 || BAKDIR=$BAKDIR-no-up-git-push-file
                                git_bak $BAKDIR
                                # git_bak2 $BAKDIR
                                ;;
                        'cover')
		                [ $# -eq 2 ] && git_cover $PWD $2
                                ;;
                        *)
                                git "$@"
                                ;;
                esac
        fi
fi

exit
