#!/bin/bash
# 集成终端下指令

function canup() {
    (cd $VDOT
    [ x"$(git log --oneline -1 remotes/origin/master | awk '{print $1}')" != x"$(git log --oneline -1 | awk '{print $1}')" ] && echo can! || echo bad!)
}

function win2unix() {
    local i
    [ $# -eq 0 ] && return
    for i in $@; do
        iconv -f gb2312 -t utf-8 $i > /tmp/win2unix.tmp 2>/dev/null
        [ $? -eq 0 ] && mv /tmp/win2unix.tmp $i
    done
}

# vim的增强版
function svi(){
    local STR FILE LINE
    if [ $# -ne 0 ]; then
        STR=$1
        FILE=${STR%%:*}
        LINE=${STR#*:}
        LINE=${LINE%%:*}

        expr $LINE + 0 &>/dev/null
        [ $? -eq 0 ] && LINE="+$LINE" || LINE=''

        STR=''
        [ ! -f "$FILE" -a "$PWD" != "$HOME" ] && STR="$(find1 $FILE)"
        [ -n "$STR" ] && FILE="$STR"

        [ -f "$FILE" ] && vim $FILE ${LINE:+$LINE}
    fi
    # printf "\e[?2004l"
}

function ci() {
	include list

	showlist_with_input $VGL_DATA/go.vconf "dest" "copy ID to where ??" $@
	echo dest $dest

	[ -n "$dest" ] && { ssh-copy-id $dest; return; }
	[ -n "$1" ] && { ssh-copy-id $1; return; }
}

function asd() {
    if [[ "$VHOSTID" == "$VMAINID" ]]; then
	gedit "$VGL_DATA"/.asd &
    else
	ssh -X "$WORK_SERVER_SSH" 'source $HOME/.v.bash; gedit $VGL_DATA/.asd' &
    fi
}

function g() {
    include list

    if [[ $# -eq 1 && "$1" =~ "@" ]]; then
	DEST="$1"
	echo "$DEST" >> $VGL_DATA/go.vconf
    else
	showlist_with_input $VGL_DATA/go.vconf "dest" "go where ??" $@
	DEST="$dest"
    fi

    if [ -n "$DEST" ]; then
	ssh -X $DEST
    else
	echo "wrong number"
	echo 
    fi
}

# 反转上一次操作
function ccd(){
        for i in {1..3}; do
                local try_old_dir="$(history | tail -n $((i+1)) | head -1)"
                local para1=$(echo $try_old_dir | awk '{print $2}')
                local para2=$(echo $try_old_dir | awk '{print $3}')
                local para3=$(echo $try_old_dir | awk '{print $4}')
                [ -n "$para2" -a -n "$para3" ] && { $para1 $para3 $para2; return; }
		# only mv ??
        done
}

# find的增强版
function find1(){
    set +f
    if [ $# -ne 0 ]; then
        STR=${1%%:*}
        FILE=${STR##*/}
        eval find "${2:+\"$2\" }"-name \""$FILE"\"
    fi
}

function quickcd_clean(){
    cd_list="$VTMP/.cd_list"
    cd_quicklist="$VTMP/.cd_quicklist"
    cd_cache="$VTMP/.cd_cache"
    new_quicklist=$VTMP/fff
    tmp=$VTMP/fff1
    # last_100="$VTMP/.cd_last_100"
    # cd_noexist="$VTMP/.cd_noexist"
    # local tmp dir=''

    # reset quicklist
    tac $cd_quicklist > $new_quicklist
    > $cd_quicklist
    > $tmp
    while read line; do
	lin="${line%%]*}"
	lin="${lin##*[}"
	grep -oP "^\|\[$lin" $tmp > /dev/null 2>&1
	[ $? -eq 0 ] && continue
	echo "$line" >> $tmp
    done < $new_quicklist
    tac $tmp > $cd_quicklist

    tac $cd_quicklist > $new_quicklist
    > $cd_quicklist
    > $tmp
    while read line; do
	lin="${line:6}"
	grep -m 1 -oP "$lin$" $tmp > /dev/null 2>&1
	[ $? -eq 0 ] && continue
	echo "$line" >> $tmp
    done < $new_quicklist
    tac $tmp > $cd_quicklist

    # clean failure directory
    > $tmp
    while read line; do
	[ -d "${line:7}" ] && echo "$line" >> $tmp
    done < $cd_cache
    cat $tmp > $cd_cache

    # rm $HOME
    sed -i "\:$HOME$:d;" $cd_cache
    cat $cd_cache > $new_quicklist

    tac $cd_cache | head -n 10 | while read line; do
	for i in {1..5}; do
	    echo "$line" >> $new_quicklist
	done
    done

    cat $new_quicklist | sort | uniq -c |sort -rnb | awk -F'|' '{$1=null;print}' > $cd_list
    rm $new_quicklist $tmp
}

function clh() {
    tmp="$VTMP/asd"
    new="$VTMP/new_history"

    sed -n '/^\#[0-9]\{10\}$/!p;' $HISTFILE | sort | uniq > $tmp

	> $new
    while read line; do
	echo '#1561791599' >> $new
	echo $line >> $new
    done < $tmp

    tail -n 50 $HISTFILE >> $new

    mv $new $HISTFILE
    rm $tmp
}

function title() {
    echo -en "\033]0;$1\a"
}

function turnoff_screen() {
        xset dpms force off
}

eval $(basename $0) $@
